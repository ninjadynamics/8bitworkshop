{
  "version": 3,
  "sources": ["../src/machine/atari8.ts", "../src/platform/atari8.ts"],
  "sourcesContent": ["import { newPOKEYAudio, TssChannelAdapter } from \"../common/audio\";\nimport { EmuState, Machine } from \"../common/baseplatform\";\nimport { MOS6502 } from \"../common/cpu/MOS6502\";\nimport { AcceptsKeyInput, AcceptsPaddleInput, AcceptsROM, BasicScanlineMachine, FrameBased, Probeable, RasterFrameBased, TrapCondition, VideoSource } from \"../common/devices\";\nimport { dumpRAM, KeyFlags, Keys, makeKeycodeMap, newAddressDecoder, newKeyboardHandler } from \"../common/emu\";\nimport { hex, lpad, lzgmini, rgb2bgr, stringToByteArray } from \"../common/util\";\nimport { BaseWASIMachine } from \"../common/wasmplatform\";\n\nconst ATARI8_KEYMATRIX_INTL_NOSHIFT = [\n  Keys.VK_L, Keys.VK_J, Keys.VK_SEMICOLON, Keys.VK_F1, Keys.VK_F2, Keys.VK_K, Keys.VK_SLASH, Keys.VK_TILDE,\n  Keys.VK_O, null, Keys.VK_P, Keys.VK_U, Keys.VK_ENTER, Keys.VK_I, Keys.VK_MINUS, Keys.VK_EQUALS,\n  Keys.VK_V, Keys.VK_F8, Keys.VK_C, Keys.VK_F3, Keys.VK_F4, Keys.VK_B, Keys.VK_X, Keys.VK_Z,\n  Keys.VK_4, null, Keys.VK_3, Keys.VK_6, Keys.VK_ESCAPE, Keys.VK_5, Keys.VK_2, Keys.VK_1,\n  Keys.VK_COMMA, Keys.VK_SPACE, Keys.VK_PERIOD, Keys.VK_N, null, Keys.VK_M, Keys.VK_SLASH, null/*invert*/,\n  Keys.VK_R, null, Keys.VK_E, Keys.VK_Y, Keys.VK_TAB, Keys.VK_T, Keys.VK_W, Keys.VK_Q,\n  Keys.VK_9, null, Keys.VK_0, Keys.VK_7, Keys.VK_BACK_SPACE, Keys.VK_8, Keys.VK_LEFT, Keys.VK_RIGHT,\n  Keys.VK_F, Keys.VK_H, Keys.VK_D, null, Keys.VK_CAPS_LOCK, Keys.VK_G, Keys.VK_S, Keys.VK_A,\n];\n\n//TODO\nvar ATARI8_KEYCODE_MAP = makeKeycodeMap([\n  [Keys.UP, 0, 0x1],\n  [Keys.DOWN, 0, 0x2],\n  [Keys.LEFT, 0, 0x4],\n  [Keys.RIGHT, 0, 0x8],\n  [Keys.VK_SPACE, 2, 0x1],\n  /*\n    [Keys.P2_UP, 0, 0x10],\n    [Keys.P2_DOWN, 0, 0x20],\n    [Keys.P2_LEFT, 0, 0x40],\n    [Keys.P2_RIGHT, 0, 0x80],\n    [Keys.P2_A, 3, 0x1],\n  */\n    [Keys.START, 3, 0x1],\n    [Keys.SELECT, 3, 0x2],\n    [Keys.VK_OPEN_BRACKET, 3, 0x4],\n  ]);\n\n// ANTIC\n\n// https://www.atarimax.com/jindroush.atari.org/atanttim.html\n// http://www.virtualdub.org/blog/pivot/entry.php?id=243\n// http://www.beipmu.com/Antic_Timings.txt\n// https://user.xmission.com/~trevin/atari/antic_regs.html\n// https://user.xmission.com/~trevin/atari/antic_insns.html\n// http://www.atarimuseum.com/videogames/consoles/5200/conv_to_5200.html\n// https://www.virtualdub.org/downloads/Altirra%20Hardware%20Reference%20Manual.pdf\n\nconst PF_LEFT = [999, 26, 18, 10];\nconst PF_RIGHT = [999, 26 + 64, 18 + 80, 10 + 96];\n\nconst DMACTL = 0;\nconst CHACTL = 1;\nconst DLISTL = 2;\nconst DLISTH = 3;\nconst HSCROL = 4;\nconst VSCROL = 5;\nconst PMBASE = 7;\nconst CHBASE = 9;\nconst WSYNC = 10;\nconst VCOUNT = 11;\nconst PENH = 12;\nconst PENV = 13;\nconst NMIEN = 14;\nconst NMIRES = 15;\nconst NMIST = 15;\n\nconst PFNONE = 0;\nconst PFNARROW = 1;\nconst PFNORMAL = 2;\nconst PFWIDE = 3;\n\nconst NMIST_CYCLE = 12;\nconst NMI_CYCLE = 24;\nconst WSYNC_CYCLE = 212;\n\nconst MODE_LINES = [0, 0, 8, 10, 8, 16, 8, 16, 8, 4, 4, 2, 1, 2, 1, 1];\n// how many bits before DMA clock repeats?\nconst MODE_PERIOD = [0, 0, 2, 2, 2, 2, 4, 4, 8, 4, 4, 4, 4, 2, 2, 2];\nconst MODE_YPERIOD = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0];\n//const MODE_BPP = [0, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1];\n// how many color clocks / pixel * 2\nconst MODE_SHIFT = [0, 0, 1, 1, 2, 2, 2, 2, 8, 4, 4, 2, 2, 2, 2, 1];\n\nclass ANTIC {\n  regs = new Uint8Array(0x10);\t\t\t\t// registers\n  read: (address: number) => number;\t// bus read function\n  nmiPending: boolean = false;\n\n  // derived by registers\n  pfwidth: number;\t\t\t\t// playfield width\n  left: number;\n  right: number;\t\t\t\t\t// left/right clocks for mode\n\n  // a la minute\n  dliop: number = 0;    // dli operation\n  mode: number = 0;\t\t\t// current mode\n  jmp = false; // TODO\n  lms = false; // TODO\n  dlarg_lo: number = 0;\n  dlarg_hi: number = 0;\n  period: number = 0;\t\t// current mode period bitmask\n  scanaddr: number = 0;  // Scan Address (via LMS)\n  startaddr: number = 0;\t// Start of line Address\n  pfbyte: number = 0;\t\t// playfield byte fetched\n  ch: number = 0;\t\t\t\t// char read\n  linesleft: number = 0; // # of lines left in mode\n  yofs: number = 0;\t\t\t// yofs fine\n  v: number = 0;\t\t\t\t\t// vertical scanline #\n  h: number = 0;\t\t\t\t\t// horizontal color clock\n\n  linebuf = new Uint8Array(48);\n  dmaclock: number = 0;\n  dmaidx: number = 0;\n  output: number = 0;\n  dramrefresh = false;\n\n  constructor(readfn) {\n    this.read = readfn; // bus read function\n  }\n  reset() {\n    this.regs.fill(0);\n    this.regs[NMIEN] = 0x00;\n    this.regs[NMIST] = 0x7f;\n    this.regs[PENH] = 0x00;\n    this.regs[PENV] = 0xff;\n    this.setReg(DMACTL, 0x0);\n    this.h = this.v = 0;\n    this.startaddr = this.scanaddr = 0;\n    this.dmaclock = 0;\n  }\n  saveState() {\n    return {\n      regs: this.regs.slice(0),\n      mode: this.mode,\n      period: this.period,\n      scanaddr: this.scanaddr,\n      startaddr: this.startaddr,\n      pfbyte: this.pfbyte,\n      ch: this.ch,\n      linesleft: this.linesleft,\n      yofs: this.yofs,\n      v: this.v,\n      h: this.h,\n      linebuf: this.linebuf.slice(0),\n      dmaidx: this.dmaidx,\n      dmaclock: this.dmaclock,\n      output: this.output,\n      dramrefresh: this.dramrefresh,\n    };\n  }\n  loadState(s) {\n    this.regs.set(s.regs);\n    this.setReg(DMACTL, s.regs[DMACTL]);\n    this.mode = s.mode;\n    this.period = s.period;\n    this.scanaddr = s.scanaddr;\n    this.startaddr = s.startaddr;\n    this.pfbyte = s.pfbyte;\n    this.ch = s.ch;\n    this.linesleft = s.linesleft;\n    this.yofs = s.yofs;\n    this.v = s.v;\n    this.h = s.h;\n    this.linebuf.set(s.linebuf);\n    this.dmaidx = s.dmaidx;\n    this.dmaclock = s.dmaclock;\n    this.output = s.output;\n    this.dramrefresh = s.dramrefresh;\n  }\n  static stateToLongString(state): string {\n    let s = \"\";\n    s += \"H: \" + lpad(state.h, 3) + \" V: \" + lpad(state.v, 3) + \" Linesleft: \" + state.linesleft + \"\\n\";\n    s += \"Mode: \" + hex(state.mode, 2) + \" Period: \" + (state.period + 1) + \"\\n\";\n    s += \"Addr: \" + hex(state.scanaddr, 4) + \"\\n\";\n    s += dumpRAM(state.regs, 0, 16).replace('$00', 'Regs');\n    return s;\n  }\n  setReg(a: number, v: number) {\n    this.regs[a] = v;\n    switch (a) {\n      case WSYNC:\n        this.regs[WSYNC] = 0xff;\n        break;\n      case DMACTL:\n        this.pfwidth = this.regs[DMACTL] & 3;\n        this.setLeftRight();\n        break;\n      case NMIRES:\n        this.regs[NMIST] = 0x1f;\n        break;\n    }\n  }\n  setLeftRight() {\n    //let offset = 4 << MODE_PERIOD[this.mode & 0xf];\n    this.left = PF_LEFT[this.pfwidth];\n    this.right = PF_RIGHT[this.pfwidth];\n  }\n  readReg(a: number) {\n    switch (a) {\n      case NMIST:\n        return this.regs[a];\n      case VCOUNT:\n        return this.v >> 1;\n      default:  \n        return 0xff;\n    }\n  }\n  processDLIEntry() {\n    if (this.mode == 0) { // N Blank Lines\n      this.linesleft = (this.dliop >> 4) + 1;\n    } else {\n      this.linesleft = MODE_LINES[this.mode];\n      this.period = MODE_PERIOD[this.mode];\n      if (this.jmp) {\n        this.regs[DLISTL] = this.dlarg_lo;\n        this.regs[DLISTH] = this.dlarg_hi;\n        this.mode = 0;\n        // JVB (Jump and wait for Vertical Blank)\n        if (this.dliop & 0x40) {\n          this.linesleft = (248 - this.v) & 0xff; // TODO?\n        }\n      } else if (this.lms) {\n        this.scanaddr = this.dlarg_lo + (this.dlarg_hi << 8);\n        //console.log('scanaddr', hex(this.scanaddr));\n      }\n      this.startaddr = this.scanaddr;\n    }\n  }\n\n  processLine() {\n    if (this.linesleft > 0) {\n      this.linesleft--;\n      this.yofs++;\n      if (this.mode >= 8 && this.linesleft) {\n        this.scanaddr = this.startaddr; // reset line addr\n      }\n    }\n  }\n\n  triggerNMI(mask: number) {\n    if (this.regs[NMIEN] & mask) {\n      this.nmiPending = true;\n    }\n    this.regs[NMIST] = mask | 0x1f;\n  }\n\n  nextInsn(): number {\n    let pc = this.regs[DLISTL] + (this.regs[DLISTH] << 8);\n    let b = this.read(pc);\n    //console.log('nextInsn', hex(pc), hex(b), this.v);\n    pc = ((pc + 1) & 0x3ff) | (pc & ~0x3ff);\n    this.regs[DLISTL] = pc & 0xff;\n    this.regs[DLISTH] = pc >> 8;\n    return b;\n  }\n\n  nextScreen(): number {\n    let b = this.read(this.scanaddr);\n    this.scanaddr = ((this.scanaddr + 1) & 0xfff) | (this.scanaddr & ~0xfff);\n    return b;\n  }\n\n  dlDMAEnabled() { return this.regs[DMACTL] & 0b100000; }\n  pmDMAEnabled() { return this.regs[DMACTL] & 0b001100; }\n\n  isVisibleScanline() {\n    return this.v >= 8 && this.v < 248;\n  }\n  isPlayfieldDMAEnabled() {\n    return this.dlDMAEnabled() && !this.linesleft;\n  }\n  isPlayerDMAEnabled() {\n    return this.regs[DMACTL] & 0b1000;\n  }\n  isMissileDMAEnabled() {\n    return this.regs[DMACTL] & 0x1100;\n  }\n\n  clockPulse(): boolean {\n    let dma = this.regs[WSYNC] != 0;\n    if (!this.isVisibleScanline()) {\n      this.doVBlank();\n    } else {\n      switch (this.h) {\n        case 0:\n          if (this.isMissileDMAEnabled()) {\n            this.doPlayerMissileDMA(3);\n            dma = true;\n          }\n          break;\n        case 1:\n          if (this.isPlayfieldDMAEnabled()) {\n            let op = this.nextInsn(); // get mode\n            // TODO: too many booleans\n            this.jmp = (op & ~0x40) == 0x01; // JMP insn?\n            this.lms = (op & 0x40) != 0 && (op & 0xf) != 0; // LMS insn?\n            this.mode = op & 0xf;\n            this.dliop = op;\n            this.yofs = 0;\n            dma = true;\n          }\n          break;\n        case 2: case 3: case 4: case 5:\n          if (this.isPlayerDMAEnabled()) {\n            this.doPlayerMissileDMA(6 - this.h);\n            dma = true;\n          }\n          break;\n        case 6:\n        case 7:\n          if (this.yofs == 0 && this.isPlayfieldDMAEnabled() && (this.jmp || this.lms)) { // read extra bytes?\n            if (this.h == 6) this.dlarg_lo = this.nextInsn();\n            if (this.h == 7) this.dlarg_hi = this.nextInsn();\n            dma = true;\n          }\n          break;\n        case 9:\n          if (this.yofs == 0) {\n            this.processDLIEntry();\n          }\n          break;\n        case 8:\n          if (this.dliop & 0x80) { // TODO: what if DLI disabled?\n            if (this.linesleft == 1) {\n              this.triggerNMI(0x80); // DLI interrupt\n            }\n          }\n          break;\n        case 111:\n          this.processLine();\n          ++this.v;\n          break;\n      }\n      this.output = 0; // background color (TODO: only for blank lines)\n      if (this.mode >= 2) {\n        let candma = this.h < 106;\n        this.dmaclock <<= 1;\n        if (this.dmaclock & (1 << this.period)) {\n          this.dmaclock |= 1;\n        }\n        if (this.h == this.left) { this.dmaclock |= 1; this.dmaidx = 0; }\n        if (this.h == this.right) { this.dmaclock &= ~1; this.dmaidx++; }\n        if (this.dmaclock & 1) {\n          if (this.mode < 8 && this.yofs == 0) { // only read chars on 1st line\n            this.linebuf[this.dmaidx] = this.nextScreen(); // read char name\n            dma = candma;\n          }\n          this.dmaidx++;\n        } else if (this.dmaclock & 8) {\n          this.ch = this.linebuf[this.dmaidx - 4 / this.period]; // latch char\n          this.readBitmapData(); // read bitmap\n          dma = candma;\n        }\n        this.output = this.h >= this.left + 3 && this.h <= this.right + 2 ? 4 : 0;\n      }\n    }\n    if (this.h < 19 || this.h > 102) this.output = 2;\n    this.incHorizCounter();\n    if (!dma && this.dramrefresh) {\n      this.dramrefresh = false;\n      dma = true;\n    }\n    return dma;\n  }\n  incHorizCounter() {\n    ++this.h;\n    switch (this.h) {\n      case 25: case 25 + 4 * 1: case 25 + 4 * 2: case 25 + 4 * 3: case 25 + 4 * 4:\n      case 25 + 4 * 5: case 25 + 4 * 6: case 25 + 4 * 7: case 25 + 4 * 8:\n        this.dramrefresh = true;\n        break;\n      case 105:\n        this.regs[WSYNC] = 0; // TODO: dram refresh delay to 106?\n        break;\n      case 114:\n        this.h = 0;\n        break;\n    }\n  }\n  doVBlank() {\n    this.linesleft = this.mode = 0;\n    if (this.h == 111) { this.v++; }\n    if (this.v == 248 && this.h == 0) { this.triggerNMI(0x40); } // VBI\n    if (this.v == 262 && this.h == 112) { this.v = 0; }\n    this.output = 2; // blank\n  }\n\n  doPlayerMissileDMA(section: number) {\n    let oneline = this.regs[DMACTL] & 0x10;\n    let pmaddr = this.regs[PMBASE] << 8;\n    if (oneline) {\n      pmaddr &= 0b1111100000000000;\n      pmaddr |= section << 8;\n      pmaddr += this.v & 0xff;\n    } else {\n      pmaddr &= 0b111111000000000;\n      pmaddr |= section << 7;\n      pmaddr += this.v >> 1;\n    }\n    this.read(pmaddr);\n  }\n\n  readBitmapData() {\n    const mode = this.mode;\n    if (mode < 8) {\t// character mode\n      let ch = this.ch;\n      let y = this.yofs >> MODE_YPERIOD[this.mode];\n      let addrofs = y & 7;\n      let chbase = this.regs[CHBASE];\n      // modes 6 & 7\n      if ((mode & 0xe) == 6) { // or 7\n        ch &= 0x3f;\n        chbase &= 0xfe;\n      } else {\n        ch &= 0x7f;\n        chbase &= 0xfc;\n      }\n      let addr = (ch << 3) + (chbase << 8);\n      // modes 2 & 3\n      if ((mode & 0xe) == 2) { // or 3\n        let chactl = this.regs[CHACTL];\n        let mode3lc = mode == 3 && (ch & 0x60) == 0x60;\n        if (chactl & 4)\n          this.pfbyte = this.read(addr + (addrofs ^ 7)); // mirror\n        else\n          this.pfbyte = this.read(addr + addrofs);\n        if (mode3lc && y < 2) { this.pfbyte = 0; }\n        if (!mode3lc && y > 7) { this.pfbyte = 0; }\n        if (this.ch & 0x80) {\n          if (chactl & 1)\n            this.pfbyte = 0x0; // blank\n          if (chactl & 2)\n            this.pfbyte ^= 0xff; // invert\n        }\n      } else {\n        this.pfbyte = this.read(addr + addrofs);\n      }\n    } else {\t// map mode\n      this.pfbyte = this.nextScreen();\n    }\n  }\n\n  shiftout() {\n    if (this.output == 4) { // visible pixel?\n      switch (this.mode) {\n        case 2: case 3:\n        case 15:\n          {\n            let v = (this.pfbyte >> 7) & 1;\n            this.pfbyte <<= 1;\n            return v ? 8 : 6;\n          }\n        case 6: case 7:\n          {\n            let v = (this.pfbyte >> 7) & 1;\n            this.pfbyte <<= 1;\n            return v ? (this.ch >> 6) + 4 : 0;\n          }\n        case 9: case 11: case 12:\n          {\n            let v = (this.pfbyte >> 7) & 1;\n            this.pfbyte <<= 1;\n            return v ? 4 : 0;\n          }\n        case 4: case 5:\n        case 8: case 10:\n        case 13: case 14:\n          {\n            let v = (this.pfbyte >> 6) & 3;\n            this.pfbyte <<= 2;\n            return [0, 4, 5, 6][v]; // TODO: 5th color\n          }\n      }\n    }\n    return this.output;\n  }\n\n}\n\n// GTIA\n// https://user.xmission.com/~trevin/atari/gtia_regs.html\n// https://user.xmission.com/~trevin/atari/gtia_pinout.html\n\n\n// write regs\nconst HPOSP0 = 0x0;\nconst HPOSM0 = 0x4;\nconst SIZEP0 = 0x8;\nconst SIZEM = 0x0c;\nconst GRAFP0 = 0x0d;\nconst GRAFM = 0x11;\nconst COLPM0 = 0x12;\nconst COLPF0 = 0x16;\nconst COLPF1 = 0x17;\nconst COLPF2 = 0x18;\nconst COLPF3 = 0x19;\nconst COLBK = 0x1a;\nconst PRIOR = 0x1b;\nconst VDELAY = 0x1c;\nconst GRACTL = 0x1d;\nconst HITCLR = 0x1e;\nconst CONSPK = 0x1f;\n// read regs\nconst M0PF = 0x0;\nconst P0PF = 0x4;\nconst M0PL = 0x8;\nconst P0PL = 0xc;\nconst TRIG0 = 0x10;\nconst CONSOL = 0x1f;\n\nclass GTIA {\n  regs = new Uint8Array(0x20);\n  shiftregs = new Uint32Array(8);\n\n  count = 0;\n  an = 0;\n  rgb = 0;\n  pmcol = 0;\n  console_inputs = 0;\n\n  reset() {\n    this.regs.fill(0);\n    this.count = 0;\n  }\n  saveState() {\n    return {\n      regs: this.regs.slice(0),\n      shiftregs: this.shiftregs.slice(0),\n      count: this.count,\n      console_inputs: this.console_inputs,\n    };\n  }\n  loadState(s) {\n    this.regs.set(s.regs);\n    this.shiftregs.set(s.shiftregs);\n    this.count = s.count;\n    this.console_inputs = s.console_inputs;\n  }\n  setReg(a: number, v: number) {\n    switch (a) {\n      case CONSOL:\n        v = (v & 15) ^ 15; // 0 = input, 1 = pull down\n        break;\n      case HITCLR:\n        this.regs[P0PF] = this.regs[P0PL] = this.regs[M0PF] = this.regs[M0PL] = 0;\n        break;\n    }\n    this.regs[a] = v;\n  }\n  readReg(a: number) {\n    if (a == CONSOL) {\n      return this.console_inputs & this.regs[CONSOL];\n    }\n    return this.regs[a];\n  }\n  updateGfx(h: number, data: number) {\n    switch (h) {\n      case 0:\n        this.count = 0;\n        if (this.regs[GRACTL] & 1) { this.regs[GRAFM] = data; }\n        break;\n      case 2: case 3: case 4: case 5:\n        if (this.regs[GRACTL] & 2) { this.regs[GRAFP0 - 2 + h] = data; }\n        break;\n    }\n  }\n  getPlayfieldColor(): number {\n    let pfcol = 0;\n    switch (this.an) {\n      case 0:\n        pfcol = this.regs[COLBK]; // 0 = background\n        break;\n      case 2: case 3:\n        pfcol = 0; // 2/3 = blank\n        break;\n      case 4: case 5: case 6: case 7:\n        pfcol = this.regs[COLPF0 + this.an - 4];\n        break;\n      case 8:\n        pfcol = (this.regs[COLPF2] & 0xf0) | (this.regs[COLPF1] & 0x0f);\n        break;\n    }\n    return pfcol;\n  }\n  clockPulse1(): void {\n    let topcol = -1;\n    let lasti = -1;\n    let pfset = this.an > 4; // TODO?\n    let p0pf = this.regs[P0PF];\n    let p0pl = this.regs[P0PL];\n    for (let i = 0; i < 8; i++) {\n      let pmcol = this.getPlayerMissileColor(i);\n      if (pmcol >= 0) {\n        if (pfset) {\n          p0pl |= 1 << i;\n        }\n        if (lasti > 0) {\n          p0pl |= 1 << i;\n          p0pl |= 1 << lasti;\n        }\n        topcol = pmcol;\n        lasti = i;\n      }\n    }\n    this.regs[P0PF] = p0pf;\n    this.regs[P0PL] = p0pl;\n    this.pmcol = topcol; // TODO: priority\n    this.count++;\n    this.clockPulse2();\n  }\n  clockPulse2(): void {\n    let col = this.getPlayfieldColor();\n    if (this.pmcol >= 0) col = this.pmcol;\n    this.rgb = COLORS_RGBA[col];\n  }\n  getPlayerMissileColor(i: number) {\n    let bit = this.shiftregs[i] & 0x80000000;\n    this.shiftregs[i] <<= 1;\n    if (this.regs[HPOSP0 + i] - 7 == this.count) {\n      this.triggerObject(i);\n    }\n    return bit ? this.regs[COLPM0 + (i & 3)] : -1;\n  }\n  triggerObject(i: number) {\n    let size, data;\n    if (i < 4) {\n      size = this.regs[SIZEP0 + i] & 3;\n      data = this.regs[GRAFP0 + i];\n    } else {\n      size = (this.regs[SIZEM] >> (i - 4) * 2) & 3;\n      data = this.regs[GRAFM] & (1 << i); // TODO\n    }\n    if (size & 1) data = expandBits(data); else data <<= 8;\n    if (size == 3) data = expandBits(data); else data <<= 16;\n    this.shiftregs[i] = data;\n  }\n\n  static stateToLongString(state): string {\n    let s = \"\";\n    s += dumpRAM(state.regs, 0, 32);\n    return s;\n  }\n}\n\nfunction expandBits(x: number): number {\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n  return x | (x << 1);\n}\n\n\nexport class Atari800 extends BasicScanlineMachine {\n\n  // http://www.ataripreservation.org/websites/freddy.offenga/megazine/ISSUE5-PALNTSC.html\n  cpuFrequency = 1789773;\n  numTotalScanlines = 262;\n  cpuCyclesPerLine = 114;\n  canvasWidth = 352; // TODO?\n  aspectRatio = 240 / 172;\n  firstVisibleClock = 34 * 2; // TODO?\n  numVisibleScanlines = 250;\n  // TODO: for 400/800/5200\n  defaultROMSize = 0x8000;\n  overscan = true;\n  audioOversample = 4;\n  sampleRate = this.numTotalScanlines * 60 * this.audioOversample;\n\n  cpu: MOS6502;\n  ram: Uint8Array;\n  rom: Uint8Array;\n  bios: Uint8Array;\n  bus;\n  pokey;\n  audioadapter;\n  antic: ANTIC;\n  gtia: GTIA;\n  inputs = new Uint8Array(4);\n  linergb = new Uint32Array(this.canvasWidth);\n  lastdmabyte = 0;\n  keycode = 0;\n  irqstatus = 0;\n  // TODO: save/load vars\n\n  constructor() {\n    super();\n    this.cpu = new MOS6502();\n    this.ram = new Uint8Array(0x10000);\n    this.bios = new Uint8Array(0x2800);\n    this.bus = this.newBus();\n    this.connectCPUMemoryBus(this.bus);\n    // create support chips\n    this.antic = new ANTIC(this.readDMA.bind(this));\n    this.gtia = new GTIA();\n    this.pokey = newPOKEYAudio(1);\n    this.audioadapter = new TssChannelAdapter(this.pokey.pokey1, this.audioOversample, this.sampleRate);\n    this.handler = newKeyboardHandler(\n      this.inputs, ATARI8_KEYCODE_MAP, this.getKeyboardFunction(), true);\n  }\n\n  newBus() {\n    return {\n      // TODO: https://github.com/dmlloyd/atari800/blob/master/DOC/cart.txt\n      read: newAddressDecoder([\n        [0x0000, 0x9fff, 0xffff, (a) => { return this.ram[a]; }],\n        [0xa000, 0xbfff, 0xffff, (a) => { return this.rom ? this.rom[a - 0xa000] : this.ram[a]; }],\n        [0xd000, 0xd0ff, 0x1f, (a) => { return this.gtia.readReg(a); }],\n        [0xd200, 0xd2ff, 0xf, (a) => { return this.readPokey(a); }],\n        [0xd300, 0xd3ff, 0xf, (a) => { return this.readPIA(a); }],\n        [0xd400, 0xd4ff, 0xf, (a) => { return this.antic.readReg(a); }],\n        [0xd800, 0xffff, 0xffff, (a) => { return this.bios[a - 0xd800]; }],\n      ]),\n      write: newAddressDecoder([\n        [0x0000, 0xbfff, 0xffff, (a, v) => { this.ram[a] = v; }],\n        [0xd000, 0xd0ff, 0x1f, (a, v) => { this.gtia.setReg(a, v); }],\n        [0xd200, 0xd2ff, 0xf, (a, v) => { this.writePokey(a, v); }],\n        [0xd400, 0xd4ff, 0xf, (a, v) => { this.antic.setReg(a, v); }],\n      ]),\n    };\n  }\n\n  loadBIOS(bios: Uint8Array) {\n    this.bios.set(bios);\n  }\n\n  reset() {\n    super.reset();\n    this.antic.reset();\n    this.gtia.reset();\n    this.keycode = 0;\n    this.irqstatus = 0;\n  }\n\n  read(a) {\n    // TODO: lastdmabyte?\n    return this.bus.read(a);\n  }\n  // used by ANTIC\n  readDMA(a) {\n    let v = this.bus.read(a);\n    this.probe.logVRAMRead(a, v);\n    this.lastdmabyte = v;\n    return v;\n  }\n  readConst(a) {\n    return a < 0xd000 || a >= 0xe000 ? this.bus.read(a) : 0xff;\n  }\n  write(a, v) {\n    this.bus.write(a, v);\n  }\n  readPokey(a: number) {\n    //console.log(hex(a), hex(this.saveState().c.PC));\n    switch (a) {\n      case 9: // KBCODE\n        return this.keycode & 0xff;\n      case 14: // IRQST\n        return this.irqstatus ^ 0xff;\n      case 15: // SKSTAT\n        return ((~this.keycode >> 6) & 0x4) | ((~this.keycode >> 3) & 0x8) | 0x12;\n      default:\n        return 0xff;\n    }\n  }\n  readPIA(a: number) {\n    if (a == 0 || a == 1) { return ~this.inputs[a]; }\n  }\n  writePokey(a, v) {\n    switch (a) {\n      case 13: this.sendIRQ(0x18); break; // serial output ready IRQ (TODO)\n      case 14: this.irqstatus = 0; break;\n    }\n    this.pokey.pokey1.setRegister(a, v);\n  }\n\n  startScanline() {\n    this.gtia.regs[TRIG0] = ~this.inputs[2];\n    this.gtia.console_inputs = this.inputs[3] ^ 7;\n    this.audio && this.audioadapter.generate(this.audio);\n  }\n\n  drawScanline() {\n    // TODO\n    if (this.antic.v < this.numVisibleScanlines) {\n      this.pixels.set(this.linergb, this.antic.v * this.canvasWidth);\n    }\n  }\n\n  advanceCPU(): number {\n    // update ANTIC\n    if (this.antic.clockPulse()) {\n      this.probe.logClocks(1);\n      // DMA cycle\n    } else {\n      // update CPU, NMI?\n      if (this.antic.nmiPending) {\n        this.cpu.NMI();\n        this.probe.logInterrupt(1);\n        this.antic.nmiPending = false;\n      }\n      super.advanceCPU();\n    }\n    // update GTIA\n    let gtiatick1 = () => {\n      this.gtia.clockPulse1();\n      this.linergb[xofs++] = this.gtia.rgb;\n    }\n    let gtiatick2 = () => {\n      this.gtia.clockPulse2();\n      this.linergb[xofs++] = this.gtia.rgb;\n    }\n    this.gtia.updateGfx(this.antic.h - 1, this.lastdmabyte);\n    let xofs = this.antic.h * 4 - this.firstVisibleClock;\n    let bp = MODE_SHIFT[this.antic.mode];\n    if (bp < 8 || (xofs & 4) == 0) { this.gtia.an = this.antic.shiftout(); }\n    gtiatick1();\n    if (bp == 1) { this.gtia.an = this.antic.shiftout(); }\n    gtiatick2();\n    if (bp <= 2) { this.gtia.an = this.antic.shiftout(); }\n    gtiatick1();\n    if (bp == 1) { this.gtia.an = this.antic.shiftout(); }\n    gtiatick2();\n    return 1;\n  }\n\n  loadState(state: any) {\n    this.cpu.loadState(state.c);\n    this.ram.set(state.ram);\n    this.antic.loadState(state.antic);\n    this.gtia.loadState(state.gtia);\n    this.loadControlsState(state);\n    this.lastdmabyte = state.lastdmabyte;\n    this.keycode = state.keycode;\n    this.irqstatus = state.irqstatus;\n  }\n  saveState() {\n    return {\n      c: this.cpu.saveState(),\n      ram: this.ram.slice(0),\n      antic: this.antic.saveState(),\n      gtia: this.gtia.saveState(),\n      inputs: this.inputs.slice(0),\n      lastdmabyte: this.lastdmabyte,\n      keycode: this.keycode, // TODO: inputs?\n      irqstatus: this.irqstatus,\n    };\n  }\n  loadControlsState(state) {\n    this.inputs.set(state.inputs);\n  }\n  saveControlsState() {\n    return {\n      inputs: this.inputs.slice(0)\n    };\n  }\n  getRasterScanline() {\n    return this.antic.v;\n  }\n  getDebugCategories() {\n    return ['CPU', 'Stack', 'ANTIC', 'GTIA', 'POKEY'];\n  }\n  getDebugInfo(category, state) {\n    switch (category) {\n      case 'ANTIC': return ANTIC.stateToLongString(state.antic);\n      case 'GTIA': return GTIA.stateToLongString(state.gtia);\n      case 'POKEY': {\n        let s = '';\n        for (let i = 0; i < 16; i++) { s += hex(this.readPokey(i)) + ' '; }\n        s += \"\\nIRQ Status: \" + hex(this.irqstatus) + \"\\n\";\n        return s;\n      }\n    }\n  }\n  getKeyboardFunction() {\n    return (o, key, code, flags) => {\n      if (flags & (KeyFlags.KeyDown | KeyFlags.KeyUp)) {\n        var keymap = ATARI8_KEYMATRIX_INTL_NOSHIFT;\n        if (key == Keys.VK_F9.c) {\n          this.sendIRQ(0x80); // break IRQ\n          return true;\n        }\n        for (var i = 0; i < keymap.length; i++) {\n          if (keymap[i] && keymap[i].c == key) {\n            this.keycode = i;\n            if (flags & KeyFlags.Shift) { this.keycode |= 0x40; }\n            if (flags & KeyFlags.Ctrl) { this.keycode |= 0x80; }\n            if (flags & KeyFlags.KeyDown) {\n              this.keycode |= 0x100;\n              this.sendIRQ(0x40); // key pressed IRQ\n              console.log(o, key, code, flags, hex(this.keycode));\n              return true;\n            }\n          }\n        }\n      };\n    }\n  }\n  sendIRQ(mask: number) {\n    // irq enabled?\n    if (this.pokey.pokey1.getRegister(0xe) & mask) {\n      this.irqstatus = mask;\n      this.cpu.IRQ();\n      this.probe.logInterrupt(2);\n      // TODO? if (this.antic.h == 4) { console.log(\"NMI blocked!\"); }\n    }\n  }\n  loadROM(rom: Uint8Array) {\n    // TODO: support other than 8 KB carts\n    super.loadROM(rom);\n  }\n}\n\nexport class Atari5200 extends Atari800 {\n  newBus() {\n    return {\n      read: newAddressDecoder([\n        [0x0000, 0x3fff, 0xffff, (a) => { return this.ram[a]; }],\n        [0x4000, 0xbfff, 0xffff, (a) => { return this.rom ? this.rom[a - 0x4000] : 0; }],\n        [0xc000, 0xcfff, 0x1f, (a) => { return this.gtia.readReg(a); }],\n        [0xd400, 0xd4ff, 0xf, (a) => { return this.antic.readReg(a); }],\n        [0xe800, 0xefff, 0xf, (a) => { return this.readPokey(a); }],\n        [0xf800, 0xffff, 0x7ff, (a) => { return this.bios[a]; }],\n      ]),\n      write: newAddressDecoder([\n        [0x0000, 0x3fff, 0xffff, (a, v) => { this.ram[a] = v; }],\n        [0xc000, 0xcfff, 0x1f, (a, v) => { this.gtia.setReg(a, v); }],\n        [0xd400, 0xd4ff, 0xf, (a, v) => { this.antic.setReg(a, v); }],\n        [0xe800, 0xefff, 0xf, (a, v) => { this.writePokey(a, v); }],\n      ]),\n    };\n  }\n  loadROM(rom: Uint8Array) {\n    // support 4/8/16/32 KB carts\n    let rom2 = new Uint8Array(0x8000);\n    for (let i = 0; i < rom2.length; i += rom.length) {\n      rom2.set(rom, i);\n    }\n    super.loadROM(rom2);\n  }\n}\n\n///\n\nexport class Atari8_WASMMachine extends BaseWASIMachine\n  implements Machine, Probeable, VideoSource, AcceptsROM, FrameBased, AcceptsKeyInput, AcceptsPaddleInput {\n\n  numTotalScanlines = 312;\n  cpuCyclesPerLine = 63;\n\n  prgstart: number;\n  joymask0 = 0;\n  joymask1 = 0;\n\n  loadROM(rom: Uint8Array) {\n    super.loadROM(rom);\n    this.reloadROM();\n  }\n  reloadROM() {\n    if (this.sys) {\n      var result = this.exports.machine_load_rom(this.sys, this.romptr, this.romlen);\n      console.log('machine_load_rom', result);\n      //console.log(this.wasmFs.fs.existsSync('atari8.img'), result);\n    }\n  }\n  loadBIOS(srcArray: Uint8Array) {\n    super.loadBIOS(srcArray);\n  }\n  reset() {\n    super.reset();\n    this.reloadROM();\n  }\n  advanceFrame(trap: TrapCondition): number {\n    // TODO\n    this.exports.machine_start_frame(this.sys);\n    if (trap) {\n      this.advanceFrameClock(trap, 999999); // TODO?\n    } else {\n      this.exports.machine_advance_frame(this.sys);\n    }\n    this.syncVideo();\n    this.syncAudio();\n    return 1;\n  }\n  getCPUState() {\n    this.exports.machine_save_cpu_state(this.sys, this.stateptr);\n    var s = this.statearr;\n    var pc = s[6] + (s[7] << 8);\n    return {\n      PC: pc,\n      SP: s[2],\n      A: s[0],\n      X: s[3],\n      Y: s[4],\n      C: s[1] & 1,\n      Z: s[1] & 2,\n      I: s[1] & 4,\n      D: s[1] & 8,\n      V: s[1] & 64,\n      N: s[1] & 128,\n      o: this.readConst(pc),\n    }\n  }\n  saveState() {\n    var cpu = this.getCPUState();\n    this.exports.machine_save_state(this.sys, this.stateptr);\n    return {\n      c: cpu,\n      state: this.statearr.slice(0),\n      //ram:this.statearr.slice(18640, 18640+0x200), // ZP and stack\n    };\n  }\n  loadState(state): void {\n    this.statearr.set(state.state);\n    this.exports.machine_load_state(this.sys, this.stateptr);\n  }\n  getVideoParams() {\n    return { width: 384, height: 240, overscan: true, videoFrequency: 60 };\n  }\n  pollControls() {\n  }\n  setKeyInput(key: number, code: number, flags: number): void {\n    // modifier flags\n    if (flags & KeyFlags.Shift) key |= 0x100;\n    if (flags & KeyFlags.Ctrl) key |= 0x200;\n    // keyboard -> joystick\n    var mask = 0;\n    if (key == 37) { key = 0x8; mask = 0x4; } // LEFT\n    if (key == 38) { key = 0xb; mask = 0x1; } // UP\n    if (key == 39) { key = 0x9; mask = 0x8; } // RIGHT\n    if (key == 40) { key = 0xa; mask = 0x2; } // DOWN\n    if (key == 32) { mask = 0x100; } // FIRE\n    // set machine inputs\n    if (flags & KeyFlags.KeyDown) {\n      this.exports.machine_key_down(this.sys, key);\n      this.joymask0 |= mask;\n    } else if (flags & KeyFlags.KeyUp) {\n      this.exports.machine_key_up(this.sys, key);\n      this.joymask0 &= ~mask;\n    }\n    this.setJoyInput(0, this.joymask0);\n    this.setJoyInput(1, this.joymask1);\n  }\n  setJoyInput(joy: number, mask: number) {\n    this.exports.machine_joy_set(this.sys, joy, mask);\n  }\n  setPaddleInput(controller: number, value: number): void {\n    this.exports.machine_paddle_set(this.sys, controller, value);\n  }\n\n}\n\nconst ATARI_NTSC_RGB = [\n  0x000000,\t\t// 00\n  0x404040,\t\t// 02\n  0x6c6c6c,\t\t// 04\n  0x909090,\t\t// 06\n  0xb0b0b0,\t\t// 08\n  0xc8c8c8,\t\t// 0A\n  0xdcdcdc,\t\t// 0C\n  0xf4f4f4,\t\t// 0E\n  0x004444,\t\t// 10\n  0x106464,\t\t// 12\n  0x248484,\t\t// 14\n  0x34a0a0,\t\t// 16\n  0x40b8b8,\t\t// 18\n  0x50d0d0,\t\t// 1A\n  0x5ce8e8,\t\t// 1C\n  0x68fcfc,\t\t// 1E\n  0x002870,\t\t// 20\n  0x144484,\t\t// 22\n  0x285c98,\t\t// 24\n  0x3c78ac,\t\t// 26\n  0x4c8cbc,\t\t// 28\n  0x5ca0cc,\t\t// 2A\n  0x68b4dc,\t\t// 2C\n  0x78c8ec,\t\t// 2E\n  0x001884,\t\t// 30\n  0x183498,\t\t// 32\n  0x3050ac,\t\t// 34\n  0x4868c0,\t\t// 36\n  0x5c80d0,\t\t// 38\n  0x7094e0,\t\t// 3A\n  0x80a8ec,\t\t// 3C\n  0x94bcfc,\t\t// 3E\n  0x000088,\t\t// 40\n  0x20209c,\t\t// 42\n  0x3c3cb0,\t\t// 44\n  0x5858c0,\t\t// 46\n  0x7070d0,\t\t// 48\n  0x8888e0,\t\t// 4A\n  0xa0a0ec,\t\t// 4C\n  0xb4b4fc,\t\t// 4E\n  0x5c0078,\t\t// 50\n  0x74208c,\t\t// 52\n  0x883ca0,\t\t// 54\n  0x9c58b0,\t\t// 56\n  0xb070c0,\t\t// 58\n  0xc084d0,\t\t// 5A\n  0xd09cdc,\t\t// 5C\n  0xe0b0ec,\t\t// 5E\n  0x780048,\t\t// 60\n  0x902060,\t\t// 62\n  0xa43c78,\t\t// 64\n  0xb8588c,\t\t// 66\n  0xcc70a0,\t\t// 68\n  0xdc84b4,\t\t// 6A\n  0xec9cc4,\t\t// 6C\n  0xfcb0d4,\t\t// 6E\n  0x840014,\t\t// 70\n  0x982030,\t\t// 72\n  0xac3c4c,\t\t// 74\n  0xc05868,\t\t// 76\n  0xd0707c,\t\t// 78\n  0xe08894,\t\t// 7A\n  0xeca0a8,\t\t// 7C\n  0xfcb4bc,\t\t// 7E\n  0x880000,\t\t// 80\n  0x9c201c,\t\t// 82\n  0xb04038,\t\t// 84\n  0xc05c50,\t\t// 86\n  0xd07468,\t\t// 88\n  0xe08c7c,\t\t// 8A\n  0xeca490,\t\t// 8C\n  0xfcb8a4,\t\t// 8E\n  0x7c1800,\t\t// 90\n  0x90381c,\t\t// 92\n  0xa85438,\t\t// 94\n  0xbc7050,\t\t// 96\n  0xcc8868,\t\t// 98\n  0xdc9c7c,\t\t// 9A\n  0xecb490,\t\t// 9C\n  0xfcc8a4,\t\t// 9E\n  0x5c2c00,\t\t// A0\n  0x784c1c,\t\t// A2\n  0x906838,\t\t// A4\n  0xac8450,\t\t// A6\n  0xc09c68,\t\t// A8\n  0xd4b47c,\t\t// AA\n  0xe8cc90,\t\t// AC\n  0xfce0a4,\t\t// AE\n  0x2c3c00,\t\t// B0\n  0x485c1c,\t\t// B2\n  0x647c38,\t\t// B4\n  0x809c50,\t\t// B6\n  0x94b468,\t\t// B8\n  0xacd07c,\t\t// BA\n  0xc0e490,\t\t// BC\n  0xd4fca4,\t\t// BE\n  0x003c00,\t\t// C0\n  0x205c20,\t\t// C2\n  0x407c40,\t\t// C4\n  0x5c9c5c,\t\t// C6\n  0x74b474,\t\t// C8\n  0x8cd08c,\t\t// CA\n  0xa4e4a4,\t\t// CC\n  0xb8fcb8,\t\t// CE\n  0x003814,\t\t// D0\n  0x1c5c34,\t\t// D2\n  0x387c50,\t\t// D4\n  0x50986c,\t\t// D6\n  0x68b484,\t\t// D8\n  0x7ccc9c,\t\t// DA\n  0x90e4b4,\t\t// DC\n  0xa4fcc8,\t\t// DE\n  0x00302c,\t\t// E0\n  0x1c504c,\t\t// E2\n  0x347068,\t\t// E4\n  0x4c8c84,\t\t// E6\n  0x64a89c,\t\t// E8\n  0x78c0b4,\t\t// EA\n  0x88d4cc,\t\t// EC\n  0x9cece0,\t\t// EE\n  0x002844,\t\t// F0\n  0x184864,\t\t// F2\n  0x306884,\t\t// F4\n  0x4484a0,\t\t// F6\n  0x589cb8,\t\t// F8\n  0x6cb4d0,\t\t// FA\n  0x7ccce8,\t\t// FC\n  0x8ce0fc\t\t// FE\n];\n\nvar COLORS_RGBA = new Uint32Array(256);\nvar COLORS_WEB = [];\nfor (var i = 0; i < 256; i++) {\n  COLORS_RGBA[i] = ATARI_NTSC_RGB[i >> 1] | 0xff000000;\n  COLORS_WEB[i] = \"#\" + hex(rgb2bgr(ATARI_NTSC_RGB[i >> 1]), 6);\n}\n\n", "\nimport { Platform, getOpcodeMetadata_6502, getToolForFilename_6502, Base6502MachinePlatform } from \"../common/baseplatform\";\nimport { PLATFORMS, Keys, makeKeycodeMap } from \"../common/emu\";\nimport { BaseMAME6502Platform } from \"../common/mameplatform\";\nimport { Atari5200, Atari800, Atari8_WASMMachine } from \"../machine/atari8\";\n\ndeclare var jt; // for 6502\n\nvar Atari8_PRESETS = [\n  {id:'hello.dasm', name:'Hello World (ASM)'},\n  {id:'hellopm.dasm', name:'Hello Sprites (ASM)'},\n  {id:'helloconio.c', name:'Text Mode (C)'},\n  {id:'siegegame.c', name:'Siege Game (C)'},\n  {id:'hellodlist.c', name:'Display List (C)'},\n];\n\nvar Atari800_PRESETS = Atari8_PRESETS.concat([\n  {id:'sieve.bas', name:'Benchmark (FastBasic)'},\n  {id:'pmtest.bas', name:'Sprites Test (FastBasic)'},\n  {id:'dli.bas', name:'DLI Test (FastBasic)'},\n  {id:'joyas.bas', name:'Match-3 Game (FastBasic)'},\n]);\n\nconst ATARI8_KEYCODE_MAP = makeKeycodeMap([\n  [Keys.VK_SPACE, 0, 0],\n  [Keys.VK_ENTER, 0, 0],\n]);\n\nconst Atari800_MemoryMap = { main:[\n  {name:'RAM',start:0x0,size:0xc000,type:'ram'},\n  {name:'Left Cartridge ROM',start:0xa000,size:0x2000,type:'rom'},\n  {name:'GTIA',start:0xd000,size:0x20,type:'io'},\n  {name:'POKEY',start:0xd200,size:0x10,type:'io'},\n  {name:'PIA',start:0xd300,size:0x04,type:'io'},\n  {name:'ANTIC',start:0xd400,size:0x10,type:'io'},\n  {name:'Cartridge Control Line',start:0xd600,size:0x100,type:'io'},\n  {name:'ROM',start:0xd800,size:0x800,type:'rom'},\n  {name:'Character Set',start:0xe000,size:0x400,type:'rom'},\n  {name:'ROM',start:0xe400,size:0x1c00,type:'rom'},\n] }\n\nfunction getToolForFilename_Atari8(fn:string) {\n  if (fn.endsWith(\".bas\") || fn.endsWith(\".fb\") || fn.endsWith(\".fbi\")) return \"fastbasic\";\n  else return getToolForFilename_6502(fn);\n}\n\n/// MAME support\n\nabstract class Atari8MAMEPlatform extends BaseMAME6502Platform {\n  getPresets() { return Atari8_PRESETS; }\n  getToolForFilename = getToolForFilename_Atari8;\n  getOpcodeMetadata = getOpcodeMetadata_6502;\n  getDefaultExtension() { return \".asm\"; };\n  showHelp(tool:string, ident:string) {\n    if (tool == 'fastbasic')\n      window.open(\"https://github.com/dmsc/fastbasic/blob/master/manual.md\", \"_help\");\n    else\n      window.open(\"https://atariwiki.org/wiki/Wiki.jsp?page=Assembler\", \"_help\"); // TODO\n  }\n}\n\nabstract class Atari8WASIMAMEPlatform extends BaseMAME6502Platform {\n  getPresets() { return Atari8_PRESETS; }\n  getToolForFilename = getToolForFilename_Atari8;\n  getOpcodeMetadata = getOpcodeMetadata_6502;\n  getDefaultExtension() { return \".asm\"; };\n  showHelp(tool:string, ident:string) {\n    if (tool == 'fastbasic')\n      window.open(\"https://github.com/dmsc/fastbasic/blob/master/manual.md\", \"_help\");\n    else\n      window.open(\"https://atariwiki.org/wiki/Wiki.jsp?page=Assembler\", \"_help\"); // TODO\n  }\n}\n\nclass Atari800MAMEPlatform extends Atari8MAMEPlatform implements Platform {\n  getPresets() { return Atari800_PRESETS; }\n  loadROM(title, data) {\n    if (!this.started) {\n      this.startModule(this.mainElement, {\n        jsfile:'mame8bitws.js',\n        biosfile:'a800xl.zip',\n        cfgfile:'a800xl.cfg',\n        driver:'a800xl',\n        width:336*2,\n        height:225*2,\n        romfn:'/emulator/cart.rom',\n        romdata:new Uint8Array(data),\n        romsize:0x2000,\n        preInit:function(_self) {\n        },\n      });\n    } else {\n      this.loadROMFile(data);\n      this.loadRegion(\":cartleft:cart:rom\", data);\n    }\n  }\n  start() {\n  }\n  getMemoryMap = function() { return Atari800_MemoryMap };\n}\n\nclass Atari5200MAMEPlatform extends Atari8MAMEPlatform implements Platform {\n  loadROM(title, data) {\n    if (!this.started) {\n      this.startModule(this.mainElement, {\n        jsfile:'mame8bitws.js',\n        biosfile:'a5200/5200.rom',\n        cfgfile:'a5200.cfg',\n        driver:'a5200',\n        width:336*2,\n        height:225*2,\n        romfn:'/emulator/cart.rom',\n        romdata:new Uint8Array(data),\n        romsize:0x8000,\n        preInit:function(_self) {\n        },\n      });\n    } else {\n      this.loadROMFile(data);\n      this.loadRegion(\":cartleft:cart:rom\", data);\n    }\n  }\n  start() {\n  }\n  getMemoryMap = function() { return { main:[\n    {name:'RAM',start:0x0,size:0x4000,type:'ram'},\n    {name:'Cartridge ROM',start:0x4000,size:0x8000,type:'rom'},\n    {name:'GTIA',start:0xc000,size:0x20,type:'io'},\n    {name:'ANTIC',start:0xd400,size:0x10,type:'io'},\n    {name:'POKEY',start:0xe800,size:0x10,type:'io'},\n    {name:'ATARI Character Set',start:0xf800,size:0x400,type:'rom'},\n    {name:'ROM',start:0xfc00,size:0x400,type:'rom'},\n  ] } };\n}\n\n/// WASM Atari8 platform\nclass Atari8WASMPlatform extends Base6502MachinePlatform<Atari8_WASMMachine> implements Platform {\n\n  newMachine()          { return new Atari8_WASMMachine('atari8'); }\n  getPresets()          { return Atari800_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  getToolForFilename = getToolForFilename_Atari8;\n  readAddress(a)        { return this.machine.readConst(a); }\n  getMemoryMap()        { return Atari800_MemoryMap; }\n  showHelp() {\n    // TODO\n  }\n  getROMExtension(rom:Uint8Array) { \n    // TODO\n    if (rom && rom[0] == 0x01 && rom[1] == 0x08) return \".prg\";\n    else return \".bin\";\n  }\n}\n\nclass Atari800WASMPlatform extends Atari8WASMPlatform {  \n}\n\n////\n\nclass Atari800Platform extends Base6502MachinePlatform<Atari800> {\n  newMachine()          { return new Atari800(); }\n  getPresets()          { return Atari800_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  getToolForFilename = getToolForFilename_Atari8;\n  readAddress(a)        { return this.machine.readConst(a); }\n  getMemoryMap()        { return Atari800_MemoryMap; }\n  showHelp() {\n    // TODO\n  }\n  getROMExtension(rom:Uint8Array) { \n    // TODO\n    if (rom && rom[0] == 0x01 && rom[1] == 0x08) return \".prg\";\n    else return \".bin\";\n  }\n  async start() {\n    let bios = await this.loadKernel();\n    await super.start();\n    this.machine.loadBIOS(bios);\n  }\n  biosPath = 'res/altirra/kernel.rom';\n  async loadKernel() {\n    var biosResponse = await fetch(this.biosPath);\n    if (biosResponse.status == 200 || (biosResponse as any as Blob).size) {\n      var biosBinary = await biosResponse.arrayBuffer();\n      return new Uint8Array(biosBinary);\n    } else throw new Error('could not load BIOS file');\n  }\n}\n\nclass Atari5200Platform extends Atari800Platform {\n  newMachine()          { return new Atari5200(); }\n  biosPath = 'res/altirra/superkernel.rom';\n}\n\n///\n\nPLATFORMS['atari8-800.xlmame'] = Atari800MAMEPlatform\nPLATFORMS['atari8-5200.mame'] = Atari5200MAMEPlatform\nPLATFORMS['atari8-800.xlwasm'] = Atari800WASMPlatform\nPLATFORMS['atari8-800'] = Atari800Platform\nPLATFORMS['atari8-5200'] = Atari5200Platform\n"],
  "mappings": "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",
  "names": []
}
