{
  "version": 3,
  "sources": ["../../node_modules/iobuffer/src/text-encoding-polyfill.js", "../../node_modules/chroma-js/chroma.js", "../../node_modules/stackframe/stackframe.js", "../../node_modules/error-stack-parser/error-stack-parser.js", "../../node_modules/localforage/dist/localforage.js", "../../src/common/util.ts", "../../src/common/basic/compiler.ts", "../../src/worker/tools/misc.ts", "../../src/worker/tools/cc65.ts", "../../src/worker/tools/dasm.ts", "../../src/worker/tools/sdcc.ts", "../../src/worker/assembler.ts", "../../src/common/hdl/hdltypes.ts", "../../src/common/hdl/vxmlparser.ts", "../../src/worker/tools/verilog.ts", "../../src/worker/tools/m6809.ts", "../../src/worker/tools/m6502.ts", "../../src/worker/tools/z80.ts", "../../src/worker/tools/x86.ts", "../../src/worker/tools/arm.ts", "../../node_modules/yufka/node_modules/acorn/dist/acorn.mjs", "../../node_modules/sourcemap-codec/src/sourcemap-codec.ts", "../../node_modules/magic-string/src/BitSet.js", "../../node_modules/magic-string/src/Chunk.js", "../../node_modules/magic-string/src/SourceMap.js", "../../node_modules/magic-string/src/utils/guessIndent.js", "../../node_modules/magic-string/src/utils/getRelativePath.js", "../../node_modules/magic-string/src/utils/isObject.js", "../../node_modules/magic-string/src/utils/getLocator.js", "../../node_modules/magic-string/src/utils/Mappings.js", "../../node_modules/magic-string/src/MagicString.js", "../../node_modules/magic-string/src/Bundle.js", "../../node_modules/yufka/dist/esm/lib/metadata.js", "../../node_modules/yufka/dist/esm/lib/helpers.js", "../../node_modules/yufka/dist/esm/lib/util.js", "../../node_modules/yufka/dist/esm/lib/lifecycle.js", "../../node_modules/yufka/dist/esm/yufka.esm.js", "../../src/common/script/lib/bitmap.ts", "../../node_modules/iobuffer/src/utf8.browser.ts", "../../node_modules/iobuffer/src/IOBuffer.ts", "../../node_modules/fast-png/node_modules/pako/dist/pako.esm.mjs", "../../node_modules/fast-png/src/common.ts", "../../node_modules/fast-png/src/internalTypes.ts", "../../node_modules/fast-png/src/PNGDecoder.ts", "../../node_modules/fast-png/src/types.ts", "../../node_modules/fast-png/src/index.ts", "../../src/common/script/lib/color.ts", "../../src/common/script/lib/io.ts", "../../src/common/script/lib/output.ts", "../../src/common/script/lib/scriptui.ts", "../../src/common/script/env.ts", "../../src/ide/project.ts", "../../src/worker/tools/script.ts", "../../src/worker/workermain.ts"],
  "sourcesContent": [null, "/**\n * chroma.js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2019, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n * derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * -------------------------------------------------------\n *\n * chroma.js includes colors from colorbrewer2.org, which are released under\n * the following license:\n *\n * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,\n * and The Pennsylvania State University.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n * ------------------------------------------------------\n *\n * Named colors are taken from X11 Color Names.\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @preserve\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.chroma = factory());\n}(this, (function () { 'use strict';\n\n    var limit = function (x, min, max) {\n        if ( min === void 0 ) min=0;\n        if ( max === void 0 ) max=1;\n\n        return x < min ? min : x > max ? max : x;\n    };\n\n    var clip_rgb = function (rgb) {\n        rgb._clipped = false;\n        rgb._unclipped = rgb.slice(0);\n        for (var i=0; i<=3; i++) {\n            if (i < 3) {\n                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }\n                rgb[i] = limit(rgb[i], 0, 255);\n            } else if (i === 3) {\n                rgb[i] = limit(rgb[i], 0, 1);\n            }\n        }\n        return rgb;\n    };\n\n    // ported from jQuery's $.type\n    var classToType = {};\n    for (var i = 0, list = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i < list.length; i += 1) {\n        var name = list[i];\n\n        classToType[(\"[object \" + name + \"]\")] = name.toLowerCase();\n    }\n    var type = function(obj) {\n        return classToType[Object.prototype.toString.call(obj)] || \"object\";\n    };\n\n    var unpack = function (args, keyOrder) {\n        if ( keyOrder === void 0 ) keyOrder=null;\n\n    \t// if called with more than 3 arguments, we return the arguments\n        if (args.length >= 3) { return Array.prototype.slice.call(args); }\n        // with less than 3 args we check if first arg is object\n        // and use the keyOrder string to extract and sort properties\n    \tif (type(args[0]) == 'object' && keyOrder) {\n    \t\treturn keyOrder.split('')\n    \t\t\t.filter(function (k) { return args[0][k] !== undefined; })\n    \t\t\t.map(function (k) { return args[0][k]; });\n    \t}\n    \t// otherwise we just return the first argument\n    \t// (which we suppose is an array of args)\n        return args[0];\n    };\n\n    var last = function (args) {\n        if (args.length < 2) { return null; }\n        var l = args.length-1;\n        if (type(args[l]) == 'string') { return args[l].toLowerCase(); }\n        return null;\n    };\n\n    var PI = Math.PI;\n\n    var utils = {\n    \tclip_rgb: clip_rgb,\n    \tlimit: limit,\n    \ttype: type,\n    \tunpack: unpack,\n    \tlast: last,\n    \tPI: PI,\n    \tTWOPI: PI*2,\n    \tPITHIRD: PI/3,\n    \tDEG2RAD: PI / 180,\n    \tRAD2DEG: 180 / PI\n    };\n\n    var input = {\n    \tformat: {},\n    \tautodetect: []\n    };\n\n    var last$1 = utils.last;\n    var clip_rgb$1 = utils.clip_rgb;\n    var type$1 = utils.type;\n\n\n    var Color = function Color() {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var me = this;\n        if (type$1(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n\n        // last argument could be the mode\n        var mode = last$1(args);\n        var autodetect = false;\n\n        if (!mode) {\n            autodetect = true;\n            if (!input.sorted) {\n                input.autodetect = input.autodetect.sort(function (a,b) { return b.p - a.p; });\n                input.sorted = true;\n            }\n            // auto-detect format\n            for (var i = 0, list = input.autodetect; i < list.length; i += 1) {\n                var chk = list[i];\n\n                mode = chk.test.apply(chk, args);\n                if (mode) { break; }\n            }\n        }\n\n        if (input.format[mode]) {\n            var rgb = input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));\n            me._rgb = clip_rgb$1(rgb);\n        } else {\n            throw new Error('unknown format: '+args);\n        }\n\n        // add alpha channel\n        if (me._rgb.length === 3) { me._rgb.push(1); }\n    };\n\n    Color.prototype.toString = function toString () {\n        if (type$1(this.hex) == 'function') { return this.hex(); }\n        return (\"[\" + (this._rgb.join(',')) + \"]\");\n    };\n\n    var Color_1 = Color;\n\n    var chroma = function () {\n    \tvar args = [], len = arguments.length;\n    \twhile ( len-- ) args[ len ] = arguments[ len ];\n\n    \treturn new (Function.prototype.bind.apply( chroma.Color, [ null ].concat( args) ));\n    };\n\n    chroma.Color = Color_1;\n    chroma.version = '2.1.2';\n\n    var chroma_1 = chroma;\n\n    var unpack$1 = utils.unpack;\n    var max = Math.max;\n\n    var rgb2cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$1(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var k = 1 - max(r,max(g,b));\n        var f = k < 1 ? 1 / (1-k) : 0;\n        var c = (1-r-k) * f;\n        var m = (1-g-k) * f;\n        var y = (1-b-k) * f;\n        return [c,m,y,k];\n    };\n\n    var rgb2cmyk_1 = rgb2cmyk;\n\n    var unpack$2 = utils.unpack;\n\n    var cmyk2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$2(args, 'cmyk');\n        var c = args[0];\n        var m = args[1];\n        var y = args[2];\n        var k = args[3];\n        var alpha = args.length > 4 ? args[4] : 1;\n        if (k === 1) { return [0,0,0,alpha]; }\n        return [\n            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r\n            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g\n            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b\n            alpha\n        ];\n    };\n\n    var cmyk2rgb_1 = cmyk2rgb;\n\n    var unpack$3 = utils.unpack;\n    var type$2 = utils.type;\n\n\n\n    Color_1.prototype.cmyk = function() {\n        return rgb2cmyk_1(this._rgb);\n    };\n\n    chroma_1.cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['cmyk']) ));\n    };\n\n    input.format.cmyk = cmyk2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$3(args, 'cmyk');\n            if (type$2(args) === 'array' && args.length === 4) {\n                return 'cmyk';\n            }\n        }\n    });\n\n    var unpack$4 = utils.unpack;\n    var last$2 = utils.last;\n    var rnd = function (a) { return Math.round(a*100)/100; };\n\n    /*\n     * supported arguments:\n     * - hsl2css(h,s,l)\n     * - hsl2css(h,s,l,a)\n     * - hsl2css([h,s,l], mode)\n     * - hsl2css([h,s,l,a], mode)\n     * - hsl2css({h,s,l,a}, mode)\n     */\n    var hsl2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hsla = unpack$4(args, 'hsla');\n        var mode = last$2(args) || 'lsa';\n        hsla[0] = rnd(hsla[0] || 0);\n        hsla[1] = rnd(hsla[1]*100) + '%';\n        hsla[2] = rnd(hsla[2]*100) + '%';\n        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {\n            hsla[3] = hsla.length > 3 ? hsla[3] : 1;\n            mode = 'hsla';\n        } else {\n            hsla.length = 3;\n        }\n        return (mode + \"(\" + (hsla.join(',')) + \")\");\n    };\n\n    var hsl2css_1 = hsl2css;\n\n    var unpack$5 = utils.unpack;\n\n    /*\n     * supported arguments:\n     * - rgb2hsl(r,g,b)\n     * - rgb2hsl(r,g,b,a)\n     * - rgb2hsl([r,g,b])\n     * - rgb2hsl([r,g,b,a])\n     * - rgb2hsl({r,g,b,a})\n     */\n    var rgb2hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$5(args, 'rgba');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n\n        var l = (max + min) / 2;\n        var s, h;\n\n        if (max === min){\n            s = 0;\n            h = Number.NaN;\n        } else {\n            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n        }\n\n        if (r == max) { h = (g - b) / (max - min); }\n        else if (g == max) { h = 2 + (b - r) / (max - min); }\n        else if (b == max) { h = 4 + (r - g) / (max - min); }\n\n        h *= 60;\n        if (h < 0) { h += 360; }\n        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }\n        return [h,s,l];\n    };\n\n    var rgb2hsl_1 = rgb2hsl;\n\n    var unpack$6 = utils.unpack;\n    var last$3 = utils.last;\n\n\n    var round = Math.round;\n\n    /*\n     * supported arguments:\n     * - rgb2css(r,g,b)\n     * - rgb2css(r,g,b,a)\n     * - rgb2css([r,g,b], mode)\n     * - rgb2css([r,g,b,a], mode)\n     * - rgb2css({r,g,b,a}, mode)\n     */\n    var rgb2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack$6(args, 'rgba');\n        var mode = last$3(args) || 'rgb';\n        if (mode.substr(0,3) == 'hsl') {\n            return hsl2css_1(rgb2hsl_1(rgba), mode);\n        }\n        rgba[0] = round(rgba[0]);\n        rgba[1] = round(rgba[1]);\n        rgba[2] = round(rgba[2]);\n        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {\n            rgba[3] = rgba.length > 3 ? rgba[3] : 1;\n            mode = 'rgba';\n        }\n        return (mode + \"(\" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + \")\");\n    };\n\n    var rgb2css_1 = rgb2css;\n\n    var unpack$7 = utils.unpack;\n    var round$1 = Math.round;\n\n    var hsl2rgb = function () {\n        var assign;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$7(args, 'hsl');\n        var h = args[0];\n        var s = args[1];\n        var l = args[2];\n        var r,g,b;\n        if (s === 0) {\n            r = g = b = l*255;\n        } else {\n            var t3 = [0,0,0];\n            var c = [0,0,0];\n            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;\n            var t1 = 2 * l - t2;\n            var h_ = h / 360;\n            t3[0] = h_ + 1/3;\n            t3[1] = h_;\n            t3[2] = h_ - 1/3;\n            for (var i=0; i<3; i++) {\n                if (t3[i] < 0) { t3[i] += 1; }\n                if (t3[i] > 1) { t3[i] -= 1; }\n                if (6 * t3[i] < 1)\n                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }\n                else if (2 * t3[i] < 1)\n                    { c[i] = t2; }\n                else if (3 * t3[i] < 2)\n                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }\n                else\n                    { c[i] = t1; }\n            }\n            (assign = [round$1(c[0]*255),round$1(c[1]*255),round$1(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);\n        }\n        if (args.length > 3) {\n            // keep alpha channel\n            return [r,g,b,args[3]];\n        }\n        return [r,g,b,1];\n    };\n\n    var hsl2rgb_1 = hsl2rgb;\n\n    var RE_RGB = /^rgb\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*\\)$/;\n    var RE_RGBA = /^rgba\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n    var RE_RGB_PCT = /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n    var RE_RGBA_PCT = /^rgba\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n    var RE_HSL = /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n    var RE_HSLA = /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\n    var round$2 = Math.round;\n\n    var css2rgb = function (css) {\n        css = css.toLowerCase().trim();\n        var m;\n\n        if (input.format.named) {\n            try {\n                return input.format.named(css);\n            } catch (e) {\n                // eslint-disable-next-line\n            }\n        }\n\n        // rgb(250,20,0)\n        if ((m = css.match(RE_RGB))) {\n            var rgb = m.slice(1,4);\n            for (var i=0; i<3; i++) {\n                rgb[i] = +rgb[i];\n            }\n            rgb[3] = 1;  // default alpha\n            return rgb;\n        }\n\n        // rgba(250,20,0,0.4)\n        if ((m = css.match(RE_RGBA))) {\n            var rgb$1 = m.slice(1,5);\n            for (var i$1=0; i$1<4; i$1++) {\n                rgb$1[i$1] = +rgb$1[i$1];\n            }\n            return rgb$1;\n        }\n\n        // rgb(100%,0%,0%)\n        if ((m = css.match(RE_RGB_PCT))) {\n            var rgb$2 = m.slice(1,4);\n            for (var i$2=0; i$2<3; i$2++) {\n                rgb$2[i$2] = round$2(rgb$2[i$2] * 2.55);\n            }\n            rgb$2[3] = 1;  // default alpha\n            return rgb$2;\n        }\n\n        // rgba(100%,0%,0%,0.4)\n        if ((m = css.match(RE_RGBA_PCT))) {\n            var rgb$3 = m.slice(1,5);\n            for (var i$3=0; i$3<3; i$3++) {\n                rgb$3[i$3] = round$2(rgb$3[i$3] * 2.55);\n            }\n            rgb$3[3] = +rgb$3[3];\n            return rgb$3;\n        }\n\n        // hsl(0,100%,50%)\n        if ((m = css.match(RE_HSL))) {\n            var hsl = m.slice(1,4);\n            hsl[1] *= 0.01;\n            hsl[2] *= 0.01;\n            var rgb$4 = hsl2rgb_1(hsl);\n            rgb$4[3] = 1;\n            return rgb$4;\n        }\n\n        // hsla(0,100%,50%,0.5)\n        if ((m = css.match(RE_HSLA))) {\n            var hsl$1 = m.slice(1,4);\n            hsl$1[1] *= 0.01;\n            hsl$1[2] *= 0.01;\n            var rgb$5 = hsl2rgb_1(hsl$1);\n            rgb$5[3] = +m[4];  // default alpha = 1\n            return rgb$5;\n        }\n    };\n\n    css2rgb.test = function (s) {\n        return RE_RGB.test(s) ||\n            RE_RGBA.test(s) ||\n            RE_RGB_PCT.test(s) ||\n            RE_RGBA_PCT.test(s) ||\n            RE_HSL.test(s) ||\n            RE_HSLA.test(s);\n    };\n\n    var css2rgb_1 = css2rgb;\n\n    var type$3 = utils.type;\n\n\n\n\n    Color_1.prototype.css = function(mode) {\n        return rgb2css_1(this._rgb, mode);\n    };\n\n    chroma_1.css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['css']) ));\n    };\n\n    input.format.css = css2rgb_1;\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$3(h) === 'string' && css2rgb_1.test(h)) {\n                return 'css';\n            }\n        }\n    });\n\n    var unpack$8 = utils.unpack;\n\n    input.format.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack$8(args, 'rgba');\n        rgb[0] *= 255;\n        rgb[1] *= 255;\n        rgb[2] *= 255;\n        return rgb;\n    };\n\n    chroma_1.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['gl']) ));\n    };\n\n    Color_1.prototype.gl = function() {\n        var rgb = this._rgb;\n        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];\n    };\n\n    var unpack$9 = utils.unpack;\n\n    var rgb2hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$9(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n        var delta = max - min;\n        var c = delta * 100 / 255;\n        var _g = min / (255 - delta) * 100;\n        var h;\n        if (delta === 0) {\n            h = Number.NaN;\n        } else {\n            if (r === max) { h = (g - b) / delta; }\n            if (g === max) { h = 2+(b - r) / delta; }\n            if (b === max) { h = 4+(r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, c, _g];\n    };\n\n    var rgb2hcg_1 = rgb2hcg;\n\n    var unpack$a = utils.unpack;\n    var floor = Math.floor;\n\n    /*\n     * this is basically just HSV with some minor tweaks\n     *\n     * hue.. [0..360]\n     * chroma .. [0..1]\n     * grayness .. [0..1]\n     */\n\n    var hcg2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$a(args, 'hcg');\n        var h = args[0];\n        var c = args[1];\n        var _g = args[2];\n        var r,g,b;\n        _g = _g * 255;\n        var _c = c * 255;\n        if (c === 0) {\n            r = g = b = _g;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n            var i = floor(h);\n            var f = h - i;\n            var p = _g * (1 - c);\n            var q = p + _c * (1 - f);\n            var t = p + _c * f;\n            var v = p + _c;\n            switch (i) {\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var hcg2rgb_1 = hcg2rgb;\n\n    var unpack$b = utils.unpack;\n    var type$4 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hcg = function() {\n        return rgb2hcg_1(this._rgb);\n    };\n\n    chroma_1.hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcg']) ));\n    };\n\n    input.format.hcg = hcg2rgb_1;\n\n    input.autodetect.push({\n        p: 1,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$b(args, 'hcg');\n            if (type$4(args) === 'array' && args.length === 3) {\n                return 'hcg';\n            }\n        }\n    });\n\n    var unpack$c = utils.unpack;\n    var last$4 = utils.last;\n    var round$3 = Math.round;\n\n    var rgb2hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$c(args, 'rgba');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var a = ref[3];\n        var mode = last$4(args) || 'auto';\n        if (a === undefined) { a = 1; }\n        if (mode === 'auto') {\n            mode = a < 1 ? 'rgba' : 'rgb';\n        }\n        r = round$3(r);\n        g = round$3(g);\n        b = round$3(b);\n        var u = r << 16 | g << 8 | b;\n        var str = \"000000\" + u.toString(16); //#.toUpperCase();\n        str = str.substr(str.length - 6);\n        var hxa = '0' + round$3(a * 255).toString(16);\n        hxa = hxa.substr(hxa.length - 2);\n        switch (mode.toLowerCase()) {\n            case 'rgba': return (\"#\" + str + hxa);\n            case 'argb': return (\"#\" + hxa + str);\n            default: return (\"#\" + str);\n        }\n    };\n\n    var rgb2hex_1 = rgb2hex;\n\n    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\n    var hex2rgb = function (hex) {\n        if (hex.match(RE_HEX)) {\n            // remove optional leading #\n            if (hex.length === 4 || hex.length === 7) {\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full six-digit\n            if (hex.length === 3) {\n                hex = hex.split('');\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n            }\n            var u = parseInt(hex, 16);\n            var r = u >> 16;\n            var g = u >> 8 & 0xFF;\n            var b = u & 0xFF;\n            return [r,g,b,1];\n        }\n\n        // match rgba hex format, eg #FF000077\n        if (hex.match(RE_HEXA)) {\n            if (hex.length === 5 || hex.length === 9) {\n                // remove optional leading #\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full eight-digit\n            if (hex.length === 4) {\n                hex = hex.split('');\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];\n            }\n            var u$1 = parseInt(hex, 16);\n            var r$1 = u$1 >> 24 & 0xFF;\n            var g$1 = u$1 >> 16 & 0xFF;\n            var b$1 = u$1 >> 8 & 0xFF;\n            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;\n            return [r$1,g$1,b$1,a];\n        }\n\n        // we used to check for css colors here\n        // if _input.css? and rgb = _input.css hex\n        //     return rgb\n\n        throw new Error((\"unknown hex color: \" + hex));\n    };\n\n    var hex2rgb_1 = hex2rgb;\n\n    var type$5 = utils.type;\n\n\n\n\n    Color_1.prototype.hex = function(mode) {\n        return rgb2hex_1(this._rgb, mode);\n    };\n\n    chroma_1.hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hex']) ));\n    };\n\n    input.format.hex = hex2rgb_1;\n    input.autodetect.push({\n        p: 4,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$5(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {\n                return 'hex';\n            }\n        }\n    });\n\n    var unpack$d = utils.unpack;\n    var TWOPI = utils.TWOPI;\n    var min = Math.min;\n    var sqrt = Math.sqrt;\n    var acos = Math.acos;\n\n    var rgb2hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n        */\n        var ref = unpack$d(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var h;\n        var min_ = min(r,g,b);\n        var i = (r+g+b) / 3;\n        var s = i > 0 ? 1 - min_/i : 0;\n        if (s === 0) {\n            h = NaN;\n        } else {\n            h = ((r-g)+(r-b)) / 2;\n            h /= sqrt((r-g)*(r-g) + (r-b)*(g-b));\n            h = acos(h);\n            if (b > g) {\n                h = TWOPI - h;\n            }\n            h /= TWOPI;\n        }\n        return [h*360,s,i];\n    };\n\n    var rgb2hsi_1 = rgb2hsi;\n\n    var unpack$e = utils.unpack;\n    var limit$1 = utils.limit;\n    var TWOPI$1 = utils.TWOPI;\n    var PITHIRD = utils.PITHIRD;\n    var cos = Math.cos;\n\n    /*\n     * hue [0..360]\n     * saturation [0..1]\n     * intensity [0..1]\n     */\n    var hsi2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n        */\n        args = unpack$e(args, 'hsi');\n        var h = args[0];\n        var s = args[1];\n        var i = args[2];\n        var r,g,b;\n\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(s)) { s = 0; }\n        // normalize hue\n        if (h > 360) { h -= 360; }\n        if (h < 0) { h += 360; }\n        h /= 360;\n        if (h < 1/3) {\n            b = (1-s)/3;\n            r = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\n            g = 1 - (b+r);\n        } else if (h < 2/3) {\n            h -= 1/3;\n            r = (1-s)/3;\n            g = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\n            b = 1 - (r+g);\n        } else {\n            h -= 2/3;\n            g = (1-s)/3;\n            b = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\n            r = 1 - (g+b);\n        }\n        r = limit$1(i*r*3);\n        g = limit$1(i*g*3);\n        b = limit$1(i*b*3);\n        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];\n    };\n\n    var hsi2rgb_1 = hsi2rgb;\n\n    var unpack$f = utils.unpack;\n    var type$6 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hsi = function() {\n        return rgb2hsi_1(this._rgb);\n    };\n\n    chroma_1.hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsi']) ));\n    };\n\n    input.format.hsi = hsi2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$f(args, 'hsi');\n            if (type$6(args) === 'array' && args.length === 3) {\n                return 'hsi';\n            }\n        }\n    });\n\n    var unpack$g = utils.unpack;\n    var type$7 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hsl = function() {\n        return rgb2hsl_1(this._rgb);\n    };\n\n    chroma_1.hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsl']) ));\n    };\n\n    input.format.hsl = hsl2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$g(args, 'hsl');\n            if (type$7(args) === 'array' && args.length === 3) {\n                return 'hsl';\n            }\n        }\n    });\n\n    var unpack$h = utils.unpack;\n    var min$1 = Math.min;\n    var max$1 = Math.max;\n\n    /*\n     * supported arguments:\n     * - rgb2hsv(r,g,b)\n     * - rgb2hsv([r,g,b])\n     * - rgb2hsv({r,g,b})\n     */\n    var rgb2hsl$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$h(args, 'rgb');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n        var min_ = min$1(r, g, b);\n        var max_ = max$1(r, g, b);\n        var delta = max_ - min_;\n        var h,s,v;\n        v = max_ / 255.0;\n        if (max_ === 0) {\n            h = Number.NaN;\n            s = 0;\n        } else {\n            s = delta / max_;\n            if (r === max_) { h = (g - b) / delta; }\n            if (g === max_) { h = 2+(b - r) / delta; }\n            if (b === max_) { h = 4+(r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, s, v]\n    };\n\n    var rgb2hsv = rgb2hsl$1;\n\n    var unpack$i = utils.unpack;\n    var floor$1 = Math.floor;\n\n    var hsv2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$i(args, 'hsv');\n        var h = args[0];\n        var s = args[1];\n        var v = args[2];\n        var r,g,b;\n        v *= 255;\n        if (s === 0) {\n            r = g = b = v;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n\n            var i = floor$1(h);\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n\n            switch (i) {\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\n            }\n        }\n        return [r,g,b,args.length > 3?args[3]:1];\n    };\n\n    var hsv2rgb_1 = hsv2rgb;\n\n    var unpack$j = utils.unpack;\n    var type$8 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hsv = function() {\n        return rgb2hsv(this._rgb);\n    };\n\n    chroma_1.hsv = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsv']) ));\n    };\n\n    input.format.hsv = hsv2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$j(args, 'hsv');\n            if (type$8(args) === 'array' && args.length === 3) {\n                return 'hsv';\n            }\n        }\n    });\n\n    var labConstants = {\n        // Corresponds roughly to RGB brighter/darker\n        Kn: 18,\n\n        // D65 standard referent\n        Xn: 0.950470,\n        Yn: 1,\n        Zn: 1.088830,\n\n        t0: 0.137931034,  // 4 / 29\n        t1: 0.206896552,  // 6 / 29\n        t2: 0.12841855,   // 3 * t1 * t1\n        t3: 0.008856452,  // t1 * t1 * t1\n    };\n\n    var unpack$k = utils.unpack;\n    var pow = Math.pow;\n\n    var rgb2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$k(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2xyz(r,g,b);\n        var x = ref$1[0];\n        var y = ref$1[1];\n        var z = ref$1[2];\n        var l = 116 * y - 16;\n        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];\n    };\n\n    var rgb_xyz = function (r) {\n        if ((r /= 255) <= 0.04045) { return r / 12.92; }\n        return pow((r + 0.055) / 1.055, 2.4);\n    };\n\n    var xyz_lab = function (t) {\n        if (t > labConstants.t3) { return pow(t, 1 / 3); }\n        return t / labConstants.t2 + labConstants.t0;\n    };\n\n    var rgb2xyz = function (r,g,b) {\n        r = rgb_xyz(r);\n        g = rgb_xyz(g);\n        b = rgb_xyz(b);\n        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / labConstants.Xn);\n        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / labConstants.Yn);\n        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / labConstants.Zn);\n        return [x,y,z];\n    };\n\n    var rgb2lab_1 = rgb2lab;\n\n    var unpack$l = utils.unpack;\n    var pow$1 = Math.pow;\n\n    /*\n     * L* [0..100]\n     * a [-100..100]\n     * b [-100..100]\n     */\n    var lab2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$l(args, 'lab');\n        var l = args[0];\n        var a = args[1];\n        var b = args[2];\n        var x,y,z, r,g,b_;\n\n        y = (l + 16) / 116;\n        x = isNaN(a) ? y : y + a / 500;\n        z = isNaN(b) ? y : y - b / 200;\n\n        y = labConstants.Yn * lab_xyz(y);\n        x = labConstants.Xn * lab_xyz(x);\n        z = labConstants.Zn * lab_xyz(z);\n\n        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB\n        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n\n        return [r,g,b_,args.length > 3 ? args[3] : 1];\n    };\n\n    var xyz_rgb = function (r) {\n        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$1(r, 1 / 2.4) - 0.055)\n    };\n\n    var lab_xyz = function (t) {\n        return t > labConstants.t1 ? t * t * t : labConstants.t2 * (t - labConstants.t0)\n    };\n\n    var lab2rgb_1 = lab2rgb;\n\n    var unpack$m = utils.unpack;\n    var type$9 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.lab = function() {\n        return rgb2lab_1(this._rgb);\n    };\n\n    chroma_1.lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lab']) ));\n    };\n\n    input.format.lab = lab2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$m(args, 'lab');\n            if (type$9(args) === 'array' && args.length === 3) {\n                return 'lab';\n            }\n        }\n    });\n\n    var unpack$n = utils.unpack;\n    var RAD2DEG = utils.RAD2DEG;\n    var sqrt$1 = Math.sqrt;\n    var atan2 = Math.atan2;\n    var round$4 = Math.round;\n\n    var lab2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$n(args, 'lab');\n        var l = ref[0];\n        var a = ref[1];\n        var b = ref[2];\n        var c = sqrt$1(a * a + b * b);\n        var h = (atan2(b, a) * RAD2DEG + 360) % 360;\n        if (round$4(c*10000) === 0) { h = Number.NaN; }\n        return [l, c, h];\n    };\n\n    var lab2lch_1 = lab2lch;\n\n    var unpack$o = utils.unpack;\n\n\n\n    var rgb2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$o(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2lab_1(r,g,b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        return lab2lch_1(l,a,b_);\n    };\n\n    var rgb2lch_1 = rgb2lch;\n\n    var unpack$p = utils.unpack;\n    var DEG2RAD = utils.DEG2RAD;\n    var sin = Math.sin;\n    var cos$1 = Math.cos;\n\n    var lch2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n        These formulas were invented by David Dalrymple to obtain maximum contrast without going\n        out of gamut if the parameters are in the range 0-1.\n\n        A saturation multiplier was added by Gregor Aisch\n        */\n        var ref = unpack$p(args, 'lch');\n        var l = ref[0];\n        var c = ref[1];\n        var h = ref[2];\n        if (isNaN(h)) { h = 0; }\n        h = h * DEG2RAD;\n        return [l, cos$1(h) * c, sin(h) * c]\n    };\n\n    var lch2lab_1 = lch2lab;\n\n    var unpack$q = utils.unpack;\n\n\n\n    var lch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$q(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var ref = lch2lab_1 (l,c,h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = lab2rgb_1 (L,a,b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var lch2rgb_1 = lch2rgb;\n\n    var unpack$r = utils.unpack;\n\n\n    var hcl2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hcl = unpack$r(args, 'hcl').reverse();\n        return lch2rgb_1.apply(void 0, hcl);\n    };\n\n    var hcl2rgb_1 = hcl2rgb;\n\n    var unpack$s = utils.unpack;\n    var type$a = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.lch = function() { return rgb2lch_1(this._rgb); };\n    Color_1.prototype.hcl = function() { return rgb2lch_1(this._rgb).reverse(); };\n\n    chroma_1.lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lch']) ));\n    };\n    chroma_1.hcl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcl']) ));\n    };\n\n    input.format.lch = lch2rgb_1;\n    input.format.hcl = hcl2rgb_1;\n\n    ['lch','hcl'].forEach(function (m) { return input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$s(args, m);\n            if (type$a(args) === 'array' && args.length === 3) {\n                return m;\n            }\n        }\n    }); });\n\n    /**\n    \tX11 color names\n\n    \thttp://www.w3.org/TR/css3-color/#svg-color\n    */\n\n    var w3cx11 = {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflower: '#6495ed',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkgrey: '#a9a9a9',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkslategrey: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        grey: '#808080',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        indianred: '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        laserlemon: '#ffff54',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrod: '#fafad2',\n        lightgoldenrodyellow: '#fafad2',\n        lightgray: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightgrey: '#d3d3d3',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        maroon2: '#7f0000',\n        maroon3: '#b03060',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370db',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#db7093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        purple2: '#7f007f',\n        purple3: '#a020f0',\n        rebeccapurple: '#663399',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32'\n    };\n\n    var w3cx11_1 = w3cx11;\n\n    var type$b = utils.type;\n\n\n\n\n\n    Color_1.prototype.name = function() {\n        var hex = rgb2hex_1(this._rgb, 'rgb');\n        for (var i = 0, list = Object.keys(w3cx11_1); i < list.length; i += 1) {\n            var n = list[i];\n\n            if (w3cx11_1[n] === hex) { return n.toLowerCase(); }\n        }\n        return hex;\n    };\n\n    input.format.named = function (name) {\n        name = name.toLowerCase();\n        if (w3cx11_1[name]) { return hex2rgb_1(w3cx11_1[name]); }\n        throw new Error('unknown color name: '+name);\n    };\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$b(h) === 'string' && w3cx11_1[h.toLowerCase()]) {\n                return 'named';\n            }\n        }\n    });\n\n    var unpack$t = utils.unpack;\n\n    var rgb2num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$t(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        return (r << 16) + (g << 8) + b;\n    };\n\n    var rgb2num_1 = rgb2num;\n\n    var type$c = utils.type;\n\n    var num2rgb = function (num) {\n        if (type$c(num) == \"number\" && num >= 0 && num <= 0xFFFFFF) {\n            var r = num >> 16;\n            var g = (num >> 8) & 0xFF;\n            var b = num & 0xFF;\n            return [r,g,b,1];\n        }\n        throw new Error(\"unknown num color: \"+num);\n    };\n\n    var num2rgb_1 = num2rgb;\n\n    var type$d = utils.type;\n\n\n\n    Color_1.prototype.num = function() {\n        return rgb2num_1(this._rgb);\n    };\n\n    chroma_1.num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['num']) ));\n    };\n\n    input.format.num = num2rgb_1;\n\n    input.autodetect.push({\n        p: 5,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            if (args.length === 1 && type$d(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {\n                return 'num';\n            }\n        }\n    });\n\n    var unpack$u = utils.unpack;\n    var type$e = utils.type;\n    var round$5 = Math.round;\n\n    Color_1.prototype.rgb = function(rnd) {\n        if ( rnd === void 0 ) rnd=true;\n\n        if (rnd === false) { return this._rgb.slice(0,3); }\n        return this._rgb.slice(0,3).map(round$5);\n    };\n\n    Color_1.prototype.rgba = function(rnd) {\n        if ( rnd === void 0 ) rnd=true;\n\n        return this._rgb.slice(0,4).map(function (v,i) {\n            return i<3 ? (rnd === false ? v : round$5(v)) : v;\n        });\n    };\n\n    chroma_1.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['rgb']) ));\n    };\n\n    input.format.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack$u(args, 'rgba');\n        if (rgba[3] === undefined) { rgba[3] = 1; }\n        return rgba;\n    };\n\n    input.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$u(args, 'rgba');\n            if (type$e(args) === 'array' && (args.length === 3 ||\n                args.length === 4 && type$e(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {\n                return 'rgb';\n            }\n        }\n    });\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     */\n\n    var log = Math.log;\n\n    var temperature2rgb = function (kelvin) {\n        var temp = kelvin / 100;\n        var r,g,b;\n        if (temp < 66) {\n            r = 255;\n            g = -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log(g);\n            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log(b);\n        } else {\n            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log(r);\n            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log(g);\n            b = 255;\n        }\n        return [r,g,b,1];\n    };\n\n    var temperature2rgb_1 = temperature2rgb;\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     **/\n\n\n    var unpack$v = utils.unpack;\n    var round$6 = Math.round;\n\n    var rgb2temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack$v(args, 'rgb');\n        var r = rgb[0], b = rgb[2];\n        var minTemp = 1000;\n        var maxTemp = 40000;\n        var eps = 0.4;\n        var temp;\n        while (maxTemp - minTemp > eps) {\n            temp = (maxTemp + minTemp) * 0.5;\n            var rgb$1 = temperature2rgb_1(temp);\n            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {\n                maxTemp = temp;\n            } else {\n                minTemp = temp;\n            }\n        }\n        return round$6(temp);\n    };\n\n    var rgb2temperature_1 = rgb2temperature;\n\n    Color_1.prototype.temp =\n    Color_1.prototype.kelvin =\n    Color_1.prototype.temperature = function() {\n        return rgb2temperature_1(this._rgb);\n    };\n\n    chroma_1.temp =\n    chroma_1.kelvin =\n    chroma_1.temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['temp']) ));\n    };\n\n    input.format.temp =\n    input.format.kelvin =\n    input.format.temperature = temperature2rgb_1;\n\n    var type$f = utils.type;\n\n    Color_1.prototype.alpha = function(a, mutate) {\n        if ( mutate === void 0 ) mutate=false;\n\n        if (a !== undefined && type$f(a) === 'number') {\n            if (mutate) {\n                this._rgb[3] = a;\n                return this;\n            }\n            return new Color_1([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n        }\n        return this._rgb[3];\n    };\n\n    Color_1.prototype.clipped = function() {\n        return this._rgb._clipped || false;\n    };\n\n    Color_1.prototype.darken = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \tvar me = this;\n    \tvar lab = me.lab();\n    \tlab[0] -= labConstants.Kn * amount;\n    \treturn new Color_1(lab, 'lab').alpha(me.alpha(), true);\n    };\n\n    Color_1.prototype.brighten = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \treturn this.darken(-amount);\n    };\n\n    Color_1.prototype.darker = Color_1.prototype.darken;\n    Color_1.prototype.brighter = Color_1.prototype.brighten;\n\n    Color_1.prototype.get = function(mc) {\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel);\n            if (i > -1) { return src[i]; }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var type$g = utils.type;\n    var pow$2 = Math.pow;\n\n    var EPS = 1e-7;\n    var MAX_ITER = 20;\n\n    Color_1.prototype.luminance = function(lum) {\n        if (lum !== undefined && type$g(lum) === 'number') {\n            if (lum === 0) {\n                // return pure black\n                return new Color_1([0,0,0,this._rgb[3]], 'rgb');\n            }\n            if (lum === 1) {\n                // return pure white\n                return new Color_1([255,255,255,this._rgb[3]], 'rgb');\n            }\n            // compute new color using...\n            var cur_lum = this.luminance();\n            var mode = 'rgb';\n            var max_iter = MAX_ITER;\n\n            var test = function (low, high) {\n                var mid = low.interpolate(high, 0.5, mode);\n                var lm = mid.luminance();\n                if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                    // close enough\n                    return mid;\n                }\n                return lm > lum ? test(low, mid) : test(mid, high);\n            };\n\n            var rgb = (cur_lum > lum ? test(new Color_1([0,0,0]), this) : test(this, new Color_1([255,255,255]))).rgb();\n            return new Color_1(rgb.concat( [this._rgb[3]]));\n        }\n        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));\n    };\n\n\n    var rgb2luminance = function (r,g,b) {\n        // relative luminance\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        r = luminance_x(r);\n        g = luminance_x(g);\n        b = luminance_x(b);\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    };\n\n    var luminance_x = function (x) {\n        x /= 255;\n        return x <= 0.03928 ? x/12.92 : pow$2((x+0.055)/1.055, 2.4);\n    };\n\n    var interpolator = {};\n\n    var type$h = utils.type;\n\n\n    var mix = function (col1, col2, f) {\n        if ( f === void 0 ) f=0.5;\n        var rest = [], len = arguments.length - 3;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];\n\n        var mode = rest[0] || 'lrgb';\n        if (!interpolator[mode] && !rest.length) {\n            // fall back to the first supported mode\n            mode = Object.keys(interpolator)[0];\n        }\n        if (!interpolator[mode]) {\n            throw new Error((\"interpolation mode \" + mode + \" is not defined\"));\n        }\n        if (type$h(col1) !== 'object') { col1 = new Color_1(col1); }\n        if (type$h(col2) !== 'object') { col2 = new Color_1(col2); }\n        return interpolator[mode](col1, col2, f)\n            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n    };\n\n    Color_1.prototype.mix =\n    Color_1.prototype.interpolate = function(col2, f) {\n    \tif ( f === void 0 ) f=0.5;\n    \tvar rest = [], len = arguments.length - 2;\n    \twhile ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];\n\n    \treturn mix.apply(void 0, [ this, col2, f ].concat( rest ));\n    };\n\n    Color_1.prototype.premultiply = function(mutate) {\n    \tif ( mutate === void 0 ) mutate=false;\n\n    \tvar rgb = this._rgb;\n    \tvar a = rgb[3];\n    \tif (mutate) {\n    \t\tthis._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];\n    \t\treturn this;\n    \t} else {\n    \t\treturn new Color_1([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');\n    \t}\n    };\n\n    Color_1.prototype.saturate = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \tvar me = this;\n    \tvar lch = me.lch();\n    \tlch[1] += labConstants.Kn * amount;\n    \tif (lch[1] < 0) { lch[1] = 0; }\n    \treturn new Color_1(lch, 'lch').alpha(me.alpha(), true);\n    };\n\n    Color_1.prototype.desaturate = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \treturn this.saturate(-amount);\n    };\n\n    var type$i = utils.type;\n\n    Color_1.prototype.set = function(mc, value, mutate) {\n        if ( mutate === void 0 ) mutate=false;\n\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel);\n            if (i > -1) {\n                if (type$i(value) == 'string') {\n                    switch(value.charAt(0)) {\n                        case '+': src[i] += +value; break;\n                        case '-': src[i] += +value; break;\n                        case '*': src[i] *= +(value.substr(1)); break;\n                        case '/': src[i] /= +(value.substr(1)); break;\n                        default: src[i] = +value;\n                    }\n                } else if (type$i(value) === 'number') {\n                    src[i] = value;\n                } else {\n                    throw new Error(\"unsupported value for Color.set\");\n                }\n                var out = new Color_1(src, mode);\n                if (mutate) {\n                    this._rgb = out._rgb;\n                    return this;\n                }\n                return out;\n            }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var rgb$1 = function (col1, col2, f) {\n        var xyz0 = col1._rgb;\n        var xyz1 = col2._rgb;\n        return new Color_1(\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\n            'rgb'\n        )\n    };\n\n    // register interpolator\n    interpolator.rgb = rgb$1;\n\n    var sqrt$2 = Math.sqrt;\n    var pow$3 = Math.pow;\n\n    var lrgb = function (col1, col2, f) {\n        var ref = col1._rgb;\n        var x1 = ref[0];\n        var y1 = ref[1];\n        var z1 = ref[2];\n        var ref$1 = col2._rgb;\n        var x2 = ref$1[0];\n        var y2 = ref$1[1];\n        var z2 = ref$1[2];\n        return new Color_1(\n            sqrt$2(pow$3(x1,2) * (1-f) + pow$3(x2,2) * f),\n            sqrt$2(pow$3(y1,2) * (1-f) + pow$3(y2,2) * f),\n            sqrt$2(pow$3(z1,2) * (1-f) + pow$3(z2,2) * f),\n            'rgb'\n        )\n    };\n\n    // register interpolator\n    interpolator.lrgb = lrgb;\n\n    var lab$1 = function (col1, col2, f) {\n        var xyz0 = col1.lab();\n        var xyz1 = col2.lab();\n        return new Color_1(\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\n            'lab'\n        )\n    };\n\n    // register interpolator\n    interpolator.lab = lab$1;\n\n    var _hsx = function (col1, col2, f, m) {\n        var assign, assign$1;\n\n        var xyz0, xyz1;\n        if (m === 'hsl') {\n            xyz0 = col1.hsl();\n            xyz1 = col2.hsl();\n        } else if (m === 'hsv') {\n            xyz0 = col1.hsv();\n            xyz1 = col2.hsv();\n        } else if (m === 'hcg') {\n            xyz0 = col1.hcg();\n            xyz1 = col2.hcg();\n        } else if (m === 'hsi') {\n            xyz0 = col1.hsi();\n            xyz1 = col2.hsi();\n        } else if (m === 'lch' || m === 'hcl') {\n            m = 'hcl';\n            xyz0 = col1.hcl();\n            xyz1 = col2.hcl();\n        }\n\n        var hue0, hue1, sat0, sat1, lbv0, lbv1;\n        if (m.substr(0, 1) === 'h') {\n            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);\n            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);\n        }\n\n        var sat, hue, lbv, dh;\n\n        if (!isNaN(hue0) && !isNaN(hue1)) {\n            // both colors have hue\n            if (hue1 > hue0 && hue1 - hue0 > 180) {\n                dh = hue1-(hue0+360);\n            } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n                dh = hue1+360-hue0;\n            } else{\n                dh = hue1 - hue0;\n            }\n            hue = hue0 + f * dh;\n        } else if (!isNaN(hue0)) {\n            hue = hue0;\n            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }\n        } else if (!isNaN(hue1)) {\n            hue = hue1;\n            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }\n        } else {\n            hue = Number.NaN;\n        }\n\n        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }\n        lbv = lbv0 + f * (lbv1-lbv0);\n        return new Color_1([hue, sat, lbv], m);\n    };\n\n    var lch$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'lch');\n    };\n\n    // register interpolator\n    interpolator.lch = lch$1;\n    interpolator.hcl = lch$1;\n\n    var num$1 = function (col1, col2, f) {\n        var c1 = col1.num();\n        var c2 = col2.num();\n        return new Color_1(c1 + f * (c2-c1), 'num')\n    };\n\n    // register interpolator\n    interpolator.num = num$1;\n\n    var hcg$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hcg');\n    };\n\n    // register interpolator\n    interpolator.hcg = hcg$1;\n\n    var hsi$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hsi');\n    };\n\n    // register interpolator\n    interpolator.hsi = hsi$1;\n\n    var hsl$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hsl');\n    };\n\n    // register interpolator\n    interpolator.hsl = hsl$1;\n\n    var hsv$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hsv');\n    };\n\n    // register interpolator\n    interpolator.hsv = hsv$1;\n\n    var clip_rgb$2 = utils.clip_rgb;\n    var pow$4 = Math.pow;\n    var sqrt$3 = Math.sqrt;\n    var PI$1 = Math.PI;\n    var cos$2 = Math.cos;\n    var sin$1 = Math.sin;\n    var atan2$1 = Math.atan2;\n\n    var average = function (colors, mode, weights) {\n        if ( mode === void 0 ) mode='lrgb';\n        if ( weights === void 0 ) weights=null;\n\n        var l = colors.length;\n        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }\n        // normalize weights\n        var k = l / weights.reduce(function(a, b) { return a + b; });\n        weights.forEach(function (w,i) { weights[i] *= k; });\n        // convert colors to Color objects\n        colors = colors.map(function (c) { return new Color_1(c); });\n        if (mode === 'lrgb') {\n            return _average_lrgb(colors, weights)\n        }\n        var first = colors.shift();\n        var xyz = first.get(mode);\n        var cnt = [];\n        var dx = 0;\n        var dy = 0;\n        // initial color\n        for (var i=0; i<xyz.length; i++) {\n            xyz[i] = (xyz[i] || 0) * weights[0];\n            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n                var A = xyz[i] / 180 * PI$1;\n                dx += cos$2(A) * weights[0];\n                dy += sin$1(A) * weights[0];\n            }\n        }\n\n        var alpha = first.alpha() * weights[0];\n        colors.forEach(function (c,ci) {\n            var xyz2 = c.get(mode);\n            alpha += c.alpha() * weights[ci+1];\n            for (var i=0; i<xyz.length; i++) {\n                if (!isNaN(xyz2[i])) {\n                    cnt[i] += weights[ci+1];\n                    if (mode.charAt(i) === 'h') {\n                        var A = xyz2[i] / 180 * PI$1;\n                        dx += cos$2(A) * weights[ci+1];\n                        dy += sin$1(A) * weights[ci+1];\n                    } else {\n                        xyz[i] += xyz2[i] * weights[ci+1];\n                    }\n                }\n            }\n        });\n\n        for (var i$1=0; i$1<xyz.length; i$1++) {\n            if (mode.charAt(i$1) === 'h') {\n                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;\n                while (A$1 < 0) { A$1 += 360; }\n                while (A$1 >= 360) { A$1 -= 360; }\n                xyz[i$1] = A$1;\n            } else {\n                xyz[i$1] = xyz[i$1]/cnt[i$1];\n            }\n        }\n        alpha /= l;\n        return (new Color_1(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);\n    };\n\n\n    var _average_lrgb = function (colors, weights) {\n        var l = colors.length;\n        var xyz = [0,0,0,0];\n        for (var i=0; i < colors.length; i++) {\n            var col = colors[i];\n            var f = weights[i] / l;\n            var rgb = col._rgb;\n            xyz[0] += pow$4(rgb[0],2) * f;\n            xyz[1] += pow$4(rgb[1],2) * f;\n            xyz[2] += pow$4(rgb[2],2) * f;\n            xyz[3] += rgb[3] * f;\n        }\n        xyz[0] = sqrt$3(xyz[0]);\n        xyz[1] = sqrt$3(xyz[1]);\n        xyz[2] = sqrt$3(xyz[2]);\n        if (xyz[3] > 0.9999999) { xyz[3] = 1; }\n        return new Color_1(clip_rgb$2(xyz));\n    };\n\n    // minimal multi-purpose interface\n\n    // @requires utils color analyze\n\n\n    var type$j = utils.type;\n\n    var pow$5 = Math.pow;\n\n    var scale = function(colors) {\n\n        // constructor\n        var _mode = 'rgb';\n        var _nacol = chroma_1('#ccc');\n        var _spread = 0;\n        // const _fixed = false;\n        var _domain = [0, 1];\n        var _pos = [];\n        var _padding = [0,0];\n        var _classes = false;\n        var _colors = [];\n        var _out = false;\n        var _min = 0;\n        var _max = 1;\n        var _correctLightness = false;\n        var _colorCache = {};\n        var _useCache = true;\n        var _gamma = 1;\n\n        // private methods\n\n        var setColors = function(colors) {\n            colors = colors || ['#fff', '#000'];\n            if (colors && type$j(colors) === 'string' && chroma_1.brewer &&\n                chroma_1.brewer[colors.toLowerCase()]) {\n                colors = chroma_1.brewer[colors.toLowerCase()];\n            }\n            if (type$j(colors) === 'array') {\n                // handle single color\n                if (colors.length === 1) {\n                    colors = [colors[0], colors[0]];\n                }\n                // make a copy of the colors\n                colors = colors.slice(0);\n                // convert to chroma classes\n                for (var c=0; c<colors.length; c++) {\n                    colors[c] = chroma_1(colors[c]);\n                }\n                // auto-fill color position\n                _pos.length = 0;\n                for (var c$1=0; c$1<colors.length; c$1++) {\n                    _pos.push(c$1/(colors.length-1));\n                }\n            }\n            resetCache();\n            return _colors = colors;\n        };\n\n        var getClass = function(value) {\n            if (_classes != null) {\n                var n = _classes.length-1;\n                var i = 0;\n                while (i < n && value >= _classes[i]) {\n                    i++;\n                }\n                return i-1;\n            }\n            return 0;\n        };\n\n        var tMapLightness = function (t) { return t; };\n        var tMapDomain = function (t) { return t; };\n\n        // const classifyValue = function(value) {\n        //     let val = value;\n        //     if (_classes.length > 2) {\n        //         const n = _classes.length-1;\n        //         const i = getClass(value);\n        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n        //     }\n        //     return val;\n        // };\n\n        var getColor = function(val, bypassMap) {\n            var col, t;\n            if (bypassMap == null) { bypassMap = false; }\n            if (isNaN(val) || (val === null)) { return _nacol; }\n            if (!bypassMap) {\n                if (_classes && (_classes.length > 2)) {\n                    // find the class\n                    var c = getClass(val);\n                    t = c / (_classes.length-2);\n                } else if (_max !== _min) {\n                    // just interpolate between min/max\n                    t = (val - _min) / (_max - _min);\n                } else {\n                    t = 1;\n                }\n            } else {\n                t = val;\n            }\n\n            // domain map\n            t = tMapDomain(t);\n\n            if (!bypassMap) {\n                t = tMapLightness(t);  // lightness correction\n            }\n\n            if (_gamma !== 1) { t = pow$5(t, _gamma); }\n\n            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n\n            t = Math.min(1, Math.max(0, t));\n\n            var k = Math.floor(t * 10000);\n\n            if (_useCache && _colorCache[k]) {\n                col = _colorCache[k];\n            } else {\n                if (type$j(_colors) === 'array') {\n                    //for i in [0.._pos.length-1]\n                    for (var i=0; i<_pos.length; i++) {\n                        var p = _pos[i];\n                        if (t <= p) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if ((t >= p) && (i === (_pos.length-1))) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t > p && t < _pos[i+1]) {\n                            t = (t-p)/(_pos[i+1]-p);\n                            col = chroma_1.interpolate(_colors[i], _colors[i+1], t, _mode);\n                            break;\n                        }\n                    }\n                } else if (type$j(_colors) === 'function') {\n                    col = _colors(t);\n                }\n                if (_useCache) { _colorCache[k] = col; }\n            }\n            return col;\n        };\n\n        var resetCache = function () { return _colorCache = {}; };\n\n        setColors(colors);\n\n        // public interface\n\n        var f = function(v) {\n            var c = chroma_1(getColor(v));\n            if (_out && c[_out]) { return c[_out](); } else { return c; }\n        };\n\n        f.classes = function(classes) {\n            if (classes != null) {\n                if (type$j(classes) === 'array') {\n                    _classes = classes;\n                    _domain = [classes[0], classes[classes.length-1]];\n                } else {\n                    var d = chroma_1.analyze(_domain);\n                    if (classes === 0) {\n                        _classes = [d.min, d.max];\n                    } else {\n                        _classes = chroma_1.limits(d, 'e', classes);\n                    }\n                }\n                return f;\n            }\n            return _classes;\n        };\n\n\n        f.domain = function(domain) {\n            if (!arguments.length) {\n                return _domain;\n            }\n            _min = domain[0];\n            _max = domain[domain.length-1];\n            _pos = [];\n            var k = _colors.length;\n            if ((domain.length === k) && (_min !== _max)) {\n                // update positions\n                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {\n                    var d = list[i];\n\n                  _pos.push((d-_min) / (_max-_min));\n                }\n            } else {\n                for (var c=0; c<k; c++) {\n                    _pos.push(c/(k-1));\n                }\n                if (domain.length > 2) {\n                    // set domain map\n                    var tOut = domain.map(function (d,i) { return i/(domain.length-1); });\n                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });\n                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {\n                        tMapDomain = function (t) {\n                            if (t <= 0 || t >= 1) { return t; }\n                            var i = 0;\n                            while (t >= tBreaks[i+1]) { i++; }\n                            var f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);\n                            var out = tOut[i] + f * (tOut[i+1] - tOut[i]);\n                            return out;\n                        };\n                    }\n\n                }\n            }\n            _domain = [_min, _max];\n            return f;\n        };\n\n        f.mode = function(_m) {\n            if (!arguments.length) {\n                return _mode;\n            }\n            _mode = _m;\n            resetCache();\n            return f;\n        };\n\n        f.range = function(colors, _pos) {\n            setColors(colors, _pos);\n            return f;\n        };\n\n        f.out = function(_o) {\n            _out = _o;\n            return f;\n        };\n\n        f.spread = function(val) {\n            if (!arguments.length) {\n                return _spread;\n            }\n            _spread = val;\n            return f;\n        };\n\n        f.correctLightness = function(v) {\n            if (v == null) { v = true; }\n            _correctLightness = v;\n            resetCache();\n            if (_correctLightness) {\n                tMapLightness = function(t) {\n                    var L0 = getColor(0, true).lab()[0];\n                    var L1 = getColor(1, true).lab()[0];\n                    var pol = L0 > L1;\n                    var L_actual = getColor(t, true).lab()[0];\n                    var L_ideal = L0 + ((L1 - L0) * t);\n                    var L_diff = L_actual - L_ideal;\n                    var t0 = 0;\n                    var t1 = 1;\n                    var max_iter = 20;\n                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {\n                        (function() {\n                            if (pol) { L_diff *= -1; }\n                            if (L_diff < 0) {\n                                t0 = t;\n                                t += (t1 - t) * 0.5;\n                            } else {\n                                t1 = t;\n                                t += (t0 - t) * 0.5;\n                            }\n                            L_actual = getColor(t, true).lab()[0];\n                            return L_diff = L_actual - L_ideal;\n                        })();\n                    }\n                    return t;\n                };\n            } else {\n                tMapLightness = function (t) { return t; };\n            }\n            return f;\n        };\n\n        f.padding = function(p) {\n            if (p != null) {\n                if (type$j(p) === 'number') {\n                    p = [p,p];\n                }\n                _padding = p;\n                return f;\n            } else {\n                return _padding;\n            }\n        };\n\n        f.colors = function(numColors, out) {\n            // If no arguments are given, return the original colors that were provided\n            if (arguments.length < 2) { out = 'hex'; }\n            var result = [];\n\n            if (arguments.length === 0) {\n                result = _colors.slice(0);\n\n            } else if (numColors === 1) {\n                result = [f(0.5)];\n\n            } else if (numColors > 1) {\n                var dm = _domain[0];\n                var dd = _domain[1] - dm;\n                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });\n\n            } else { // returns all colors based on the defined classes\n                colors = [];\n                var samples = [];\n                if (_classes && (_classes.length > 2)) {\n                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n                        samples.push((_classes[i-1]+_classes[i])*0.5);\n                    }\n                } else {\n                    samples = _domain;\n                }\n                result = samples.map(function (v) { return f(v); });\n            }\n\n            if (chroma_1[out]) {\n                result = result.map(function (c) { return c[out](); });\n            }\n            return result;\n        };\n\n        f.cache = function(c) {\n            if (c != null) {\n                _useCache = c;\n                return f;\n            } else {\n                return _useCache;\n            }\n        };\n\n        f.gamma = function(g) {\n            if (g != null) {\n                _gamma = g;\n                return f;\n            } else {\n                return _gamma;\n            }\n        };\n\n        f.nodata = function(d) {\n            if (d != null) {\n                _nacol = chroma_1(d);\n                return f;\n            } else {\n                return _nacol;\n            }\n        };\n\n        return f;\n    };\n\n    function __range__(left, right, inclusive) {\n      var range = [];\n      var ascending = left < right;\n      var end = !inclusive ? right : ascending ? right + 1 : right - 1;\n      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n        range.push(i);\n      }\n      return range;\n    }\n\n    //\n    // interpolates between a set of colors uzing a bezier spline\n    //\n\n    // @requires utils lab\n\n\n\n\n    var bezier = function(colors) {\n        var assign, assign$1, assign$2;\n\n        var I, lab0, lab1, lab2;\n        colors = colors.map(function (c) { return new Color_1(c); });\n        if (colors.length === 2) {\n            // linear interpolation\n            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));\n                return new Color_1(lab, 'lab');\n            };\n        } else if (colors.length === 3) {\n            // quadratic bezier interpolation\n            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));\n                return new Color_1(lab, 'lab');\n            };\n        } else if (colors.length === 4) {\n            // cubic bezier interpolation\n            var lab3;\n            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));\n                return new Color_1(lab, 'lab');\n            };\n        } else if (colors.length === 5) {\n            var I0 = bezier(colors.slice(0, 3));\n            var I1 = bezier(colors.slice(2, 5));\n            I = function(t) {\n                if (t < 0.5) {\n                    return I0(t*2);\n                } else {\n                    return I1((t-0.5)*2);\n                }\n            };\n        }\n        return I;\n    };\n\n    var bezier_1 = function (colors) {\n        var f = bezier(colors);\n        f.scale = function () { return scale(f); };\n        return f;\n    };\n\n    /*\n     * interpolates between a set of colors uzing a bezier spline\n     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n     */\n\n\n\n\n    var blend = function (bottom, top, mode) {\n        if (!blend[mode]) {\n            throw new Error('unknown blend mode ' + mode);\n        }\n        return blend[mode](bottom, top);\n    };\n\n    var blend_f = function (f) { return function (bottom,top) {\n            var c0 = chroma_1(top).rgb();\n            var c1 = chroma_1(bottom).rgb();\n            return chroma_1.rgb(f(c0, c1));\n        }; };\n\n    var each = function (f) { return function (c0, c1) {\n            var out = [];\n            out[0] = f(c0[0], c1[0]);\n            out[1] = f(c0[1], c1[1]);\n            out[2] = f(c0[2], c1[2]);\n            return out;\n        }; };\n\n    var normal = function (a) { return a; };\n    var multiply = function (a,b) { return a * b / 255; };\n    var darken$1 = function (a,b) { return a > b ? b : a; };\n    var lighten = function (a,b) { return a > b ? a : b; };\n    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };\n    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };\n    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };\n    var dodge = function (a,b) {\n        if (a === 255) { return 255; }\n        a = 255 * (b / 255) / (1 - a / 255);\n        return a > 255 ? 255 : a\n    };\n\n    // # add = (a,b) ->\n    // #     if (a + b > 255) then 255 else a + b\n\n    blend.normal = blend_f(each(normal));\n    blend.multiply = blend_f(each(multiply));\n    blend.screen = blend_f(each(screen));\n    blend.overlay = blend_f(each(overlay));\n    blend.darken = blend_f(each(darken$1));\n    blend.lighten = blend_f(each(lighten));\n    blend.dodge = blend_f(each(dodge));\n    blend.burn = blend_f(each(burn));\n    // blend.add = blend_f(each(add));\n\n    var blend_1 = blend;\n\n    // cubehelix interpolation\n    // based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n    // http://astron-soc.in/bulletin/11June/289392011.pdf\n\n    var type$k = utils.type;\n    var clip_rgb$3 = utils.clip_rgb;\n    var TWOPI$2 = utils.TWOPI;\n    var pow$6 = Math.pow;\n    var sin$2 = Math.sin;\n    var cos$3 = Math.cos;\n\n\n    var cubehelix = function(start, rotations, hue, gamma, lightness) {\n        if ( start === void 0 ) start=300;\n        if ( rotations === void 0 ) rotations=-1.5;\n        if ( hue === void 0 ) hue=1;\n        if ( gamma === void 0 ) gamma=1;\n        if ( lightness === void 0 ) lightness=[0,1];\n\n        var dh = 0, dl;\n        if (type$k(lightness) === 'array') {\n            dl = lightness[1] - lightness[0];\n        } else {\n            dl = 0;\n            lightness = [lightness, lightness];\n        }\n\n        var f = function(fract) {\n            var a = TWOPI$2 * (((start+120)/360) + (rotations * fract));\n            var l = pow$6(lightness[0] + (dl * fract), gamma);\n            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;\n            var amp = (h * l * (1-l)) / 2;\n            var cos_a = cos$3(a);\n            var sin_a = sin$2(a);\n            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));\n            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));\n            var b = l + (amp * (+1.97294 * cos_a));\n            return chroma_1(clip_rgb$3([r*255,g*255,b*255,1]));\n        };\n\n        f.start = function(s) {\n            if ((s == null)) { return start; }\n            start = s;\n            return f;\n        };\n\n        f.rotations = function(r) {\n            if ((r == null)) { return rotations; }\n            rotations = r;\n            return f;\n        };\n\n        f.gamma = function(g) {\n            if ((g == null)) { return gamma; }\n            gamma = g;\n            return f;\n        };\n\n        f.hue = function(h) {\n            if ((h == null)) { return hue; }\n            hue = h;\n            if (type$k(hue) === 'array') {\n                dh = hue[1] - hue[0];\n                if (dh === 0) { hue = hue[1]; }\n            } else {\n                dh = 0;\n            }\n            return f;\n        };\n\n        f.lightness = function(h) {\n            if ((h == null)) { return lightness; }\n            if (type$k(h) === 'array') {\n                lightness = h;\n                dl = h[1] - h[0];\n            } else {\n                lightness = [h,h];\n                dl = 0;\n            }\n            return f;\n        };\n\n        f.scale = function () { return chroma_1.scale(f); };\n\n        f.hue(hue);\n\n        return f;\n    };\n\n    var digits = '0123456789abcdef';\n\n    var floor$2 = Math.floor;\n    var random = Math.random;\n\n    var random_1 = function () {\n        var code = '#';\n        for (var i=0; i<6; i++) {\n            code += digits.charAt(floor$2(random() * 16));\n        }\n        return new Color_1(code, 'hex');\n    };\n\n    var log$1 = Math.log;\n    var pow$7 = Math.pow;\n    var floor$3 = Math.floor;\n    var abs = Math.abs;\n\n\n    var analyze = function (data, key) {\n        if ( key === void 0 ) key=null;\n\n        var r = {\n            min: Number.MAX_VALUE,\n            max: Number.MAX_VALUE*-1,\n            sum: 0,\n            values: [],\n            count: 0\n        };\n        if (type(data) === 'object') {\n            data = Object.values(data);\n        }\n        data.forEach(function (val) {\n            if (key && type(val) === 'object') { val = val[key]; }\n            if (val !== undefined && val !== null && !isNaN(val)) {\n                r.values.push(val);\n                r.sum += val;\n                if (val < r.min) { r.min = val; }\n                if (val > r.max) { r.max = val; }\n                r.count += 1;\n            }\n        });\n\n        r.domain = [r.min, r.max];\n\n        r.limits = function (mode, num) { return limits(r, mode, num); };\n\n        return r;\n    };\n\n\n    var limits = function (data, mode, num) {\n        if ( mode === void 0 ) mode='equal';\n        if ( num === void 0 ) num=7;\n\n        if (type(data) == 'array') {\n            data = analyze(data);\n        }\n        var min = data.min;\n        var max = data.max;\n        var values = data.values.sort(function (a,b) { return a-b; });\n\n        if (num === 1) { return [min,max]; }\n\n        var limits = [];\n\n        if (mode.substr(0,1) === 'c') { // continuous\n            limits.push(min);\n            limits.push(max);\n        }\n\n        if (mode.substr(0,1) === 'e') { // equal interval\n            limits.push(min);\n            for (var i=1; i<num; i++) {\n                limits.push(min+((i/num)*(max-min)));\n            }\n            limits.push(max);\n        }\n\n        else if (mode.substr(0,1) === 'l') { // log scale\n            if (min <= 0) {\n                throw new Error('Logarithmic scales are only possible for values > 0');\n            }\n            var min_log = Math.LOG10E * log$1(min);\n            var max_log = Math.LOG10E * log$1(max);\n            limits.push(min);\n            for (var i$1=1; i$1<num; i$1++) {\n                limits.push(pow$7(10, min_log + ((i$1/num) * (max_log - min_log))));\n            }\n            limits.push(max);\n        }\n\n        else if (mode.substr(0,1) === 'q') { // quantile scale\n            limits.push(min);\n            for (var i$2=1; i$2<num; i$2++) {\n                var p = ((values.length-1) * i$2)/num;\n                var pb = floor$3(p);\n                if (pb === p) {\n                    limits.push(values[pb]);\n                } else { // p > pb\n                    var pr = p - pb;\n                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));\n                }\n            }\n            limits.push(max);\n\n        }\n\n        else if (mode.substr(0,1) === 'k') { // k-means clustering\n            /*\n            implementation based on\n            http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n            simplified for 1-d input values\n            */\n            var cluster;\n            var n = values.length;\n            var assignments = new Array(n);\n            var clusterSizes = new Array(num);\n            var repeat = true;\n            var nb_iters = 0;\n            var centroids = null;\n\n            // get seed values\n            centroids = [];\n            centroids.push(min);\n            for (var i$3=1; i$3<num; i$3++) {\n                centroids.push(min + ((i$3/num) * (max-min)));\n            }\n            centroids.push(max);\n\n            while (repeat) {\n                // assignment step\n                for (var j=0; j<num; j++) {\n                    clusterSizes[j] = 0;\n                }\n                for (var i$4=0; i$4<n; i$4++) {\n                    var value = values[i$4];\n                    var mindist = Number.MAX_VALUE;\n                    var best = (void 0);\n                    for (var j$1=0; j$1<num; j$1++) {\n                        var dist = abs(centroids[j$1]-value);\n                        if (dist < mindist) {\n                            mindist = dist;\n                            best = j$1;\n                        }\n                        clusterSizes[best]++;\n                        assignments[i$4] = best;\n                    }\n                }\n\n                // update centroids step\n                var newCentroids = new Array(num);\n                for (var j$2=0; j$2<num; j$2++) {\n                    newCentroids[j$2] = null;\n                }\n                for (var i$5=0; i$5<n; i$5++) {\n                    cluster = assignments[i$5];\n                    if (newCentroids[cluster] === null) {\n                        newCentroids[cluster] = values[i$5];\n                    } else {\n                        newCentroids[cluster] += values[i$5];\n                    }\n                }\n                for (var j$3=0; j$3<num; j$3++) {\n                    newCentroids[j$3] *= 1/clusterSizes[j$3];\n                }\n\n                // check convergence\n                repeat = false;\n                for (var j$4=0; j$4<num; j$4++) {\n                    if (newCentroids[j$4] !== centroids[j$4]) {\n                        repeat = true;\n                        break;\n                    }\n                }\n\n                centroids = newCentroids;\n                nb_iters++;\n\n                if (nb_iters > 200) {\n                    repeat = false;\n                }\n            }\n\n            // finished k-means clustering\n            // the next part is borrowed from gabrielflor.it\n            var kClusters = {};\n            for (var j$5=0; j$5<num; j$5++) {\n                kClusters[j$5] = [];\n            }\n            for (var i$6=0; i$6<n; i$6++) {\n                cluster = assignments[i$6];\n                kClusters[cluster].push(values[i$6]);\n            }\n            var tmpKMeansBreaks = [];\n            for (var j$6=0; j$6<num; j$6++) {\n                tmpKMeansBreaks.push(kClusters[j$6][0]);\n                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);\n            }\n            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });\n            limits.push(tmpKMeansBreaks[0]);\n            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {\n                var v = tmpKMeansBreaks[i$7];\n                if (!isNaN(v) && (limits.indexOf(v) === -1)) {\n                    limits.push(v);\n                }\n            }\n        }\n        return limits;\n    };\n\n    var analyze_1 = {analyze: analyze, limits: limits};\n\n    var contrast = function (a, b) {\n        // WCAG contrast ratio\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n        a = new Color_1(a);\n        b = new Color_1(b);\n        var l1 = a.luminance();\n        var l2 = b.luminance();\n        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n    };\n\n    var sqrt$4 = Math.sqrt;\n    var atan2$2 = Math.atan2;\n    var abs$1 = Math.abs;\n    var cos$4 = Math.cos;\n    var PI$2 = Math.PI;\n\n    var deltaE = function(a, b, L, C) {\n        if ( L === void 0 ) L=1;\n        if ( C === void 0 ) C=1;\n\n        // Delta E (CMC)\n        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CMC.html\n        a = new Color_1(a);\n        b = new Color_1(b);\n        var ref = Array.from(a.lab());\n        var L1 = ref[0];\n        var a1 = ref[1];\n        var b1 = ref[2];\n        var ref$1 = Array.from(b.lab());\n        var L2 = ref$1[0];\n        var a2 = ref$1[1];\n        var b2 = ref$1[2];\n        var c1 = sqrt$4((a1 * a1) + (b1 * b1));\n        var c2 = sqrt$4((a2 * a2) + (b2 * b2));\n        var sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + (0.01765 * L1));\n        var sc = ((0.0638 * c1) / (1.0 + (0.0131 * c1))) + 0.638;\n        var h1 = c1 < 0.000001 ? 0.0 : (atan2$2(b1, a1) * 180.0) / PI$2;\n        while (h1 < 0) { h1 += 360; }\n        while (h1 >= 360) { h1 -= 360; }\n        var t = (h1 >= 164.0) && (h1 <= 345.0) ? (0.56 + abs$1(0.2 * cos$4((PI$2 * (h1 + 168.0)) / 180.0))) : (0.36 + abs$1(0.4 * cos$4((PI$2 * (h1 + 35.0)) / 180.0)));\n        var c4 = c1 * c1 * c1 * c1;\n        var f = sqrt$4(c4 / (c4 + 1900.0));\n        var sh = sc * (((f * t) + 1.0) - f);\n        var delL = L1 - L2;\n        var delC = c1 - c2;\n        var delA = a1 - a2;\n        var delB = b1 - b2;\n        var dH2 = ((delA * delA) + (delB * delB)) - (delC * delC);\n        var v1 = delL / (L * sl);\n        var v2 = delC / (C * sc);\n        var v3 = sh;\n        return sqrt$4((v1 * v1) + (v2 * v2) + (dH2 / (v3 * v3)));\n    };\n\n    // simple Euclidean distance\n    var distance = function(a, b, mode) {\n        if ( mode === void 0 ) mode='lab';\n\n        // Delta E (CIE 1976)\n        // see http://www.brucelindbloom.com/index.html?Equations.html\n        a = new Color_1(a);\n        b = new Color_1(b);\n        var l1 = a.get(mode);\n        var l2 = b.get(mode);\n        var sum_sq = 0;\n        for (var i in l1) {\n            var d = (l1[i] || 0) - (l2[i] || 0);\n            sum_sq += d*d;\n        }\n        return Math.sqrt(sum_sq);\n    };\n\n    var valid = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        try {\n            new (Function.prototype.bind.apply( Color_1, [ null ].concat( args) ));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // some pre-defined color scales:\n\n\n\n\n    var scales = {\n    \tcool: function cool() { return scale([chroma_1.hsl(180,1,.9), chroma_1.hsl(250,.7,.4)]) },\n    \thot: function hot() { return scale(['#000','#f00','#ff0','#fff'], [0,.25,.75,1]).mode('rgb') }\n    };\n\n    /**\n        ColorBrewer colors for chroma.js\n\n        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n        Pennsylvania State University.\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software distributed\n        under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n        CONDITIONS OF ANY KIND, either express or implied. See the License for the\n        specific language governing permissions and limitations under the License.\n    */\n\n    var colorbrewer = {\n        // sequential\n        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n        // diverging\n\n        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n        // qualitative\n\n        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],\n    };\n\n    // add lowercase aliases for case-insensitive matches\n    for (var i$1 = 0, list$1 = Object.keys(colorbrewer); i$1 < list$1.length; i$1 += 1) {\n        var key = list$1[i$1];\n\n        colorbrewer[key.toLowerCase()] = colorbrewer[key];\n    }\n\n    var colorbrewer_1 = colorbrewer;\n\n    // feel free to comment out anything to rollup\n    // a smaller chroma.js built\n\n    // io --> convert colors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // operators --> modify existing Colors\n\n\n\n\n\n\n\n\n\n\n    // interpolators\n\n\n\n\n\n\n\n\n\n\n    // generators -- > create new colors\n    chroma_1.average = average;\n    chroma_1.bezier = bezier_1;\n    chroma_1.blend = blend_1;\n    chroma_1.cubehelix = cubehelix;\n    chroma_1.mix = chroma_1.interpolate = mix;\n    chroma_1.random = random_1;\n    chroma_1.scale = scale;\n\n    // other utility methods\n    chroma_1.analyze = analyze_1.analyze;\n    chroma_1.contrast = contrast;\n    chroma_1.deltaE = deltaE;\n    chroma_1.distance = distance;\n    chroma_1.limits = analyze_1.limits;\n    chroma_1.valid = valid;\n\n    // scale\n    chroma_1.scales = scales;\n\n    // colors\n    chroma_1.colors = w3cx11_1;\n    chroma_1.brewer = colorbrewer_1;\n\n    var chroma_js = chroma_1;\n\n    return chroma_js;\n\n})));\n", "(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function() {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n    var objectProps = ['evalOrigin'];\n\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\n\n    function StackFrame(obj) {\n        if (!obj) return;\n        for (var i = 0; i < props.length; i++) {\n            if (obj[props[i]] !== undefined) {\n                this['set' + _capitalize(props[i])](obj[props[i]]);\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function() {\n            var fileName = this.getFileName() || '';\n            var lineNumber = this.getLineNumber() || '';\n            var columnNumber = this.getColumnNumber() || '';\n            var functionName = this.getFunctionName() || '';\n            if (this.getIsEval()) {\n                if (fileName) {\n                    return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n                }\n                return '[eval]:' + lineNumber + ':' + columnNumber;\n            }\n            if (functionName) {\n                return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n            }\n            return fileName + ':' + lineNumber + ':' + columnNumber;\n        }\n    };\n\n    StackFrame.fromString = function StackFrame$$fromString(str) {\n        var argsStartIndex = str.indexOf('(');\n        var argsEndIndex = str.lastIndexOf(')');\n\n        var functionName = str.substring(0, argsStartIndex);\n        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');\n        var locationString = str.substring(argsEndIndex + 1);\n\n        if (locationString.indexOf('@') === 0) {\n            var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');\n            var fileName = parts[1];\n            var lineNumber = parts[2];\n            var columnNumber = parts[3];\n        }\n\n        return new StackFrame({\n            functionName: functionName,\n            args: args || undefined,\n            fileName: fileName,\n            lineNumber: lineNumber || undefined,\n            columnNumber: columnNumber || undefined\n        });\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n", "(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('error-stack-parser', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.ErrorStackParser = factory(root.StackFrame);\n    }\n}(this, function ErrorStackParser(StackFrame) {\n    'use strict';\n\n    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\n    var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n\n    return {\n        /**\n         * Given an Error object, extract the most information from it.\n         *\n         * @param {Error} error object\n         * @return {Array} of StackFrames\n         */\n        parse: function ErrorStackParser$$parse(error) {\n            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n                return this.parseOpera(error);\n            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                return this.parseV8OrIE(error);\n            } else if (error.stack) {\n                return this.parseFFOrSafari(error);\n            } else {\n                throw new Error('Cannot parse given Error object');\n            }\n        },\n\n        // Separate line and column numbers from a string of the form: (URI:Line:Column)\n        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n            // Fail-fast but return locations like \"(native)\"\n            if (urlLike.indexOf(':') === -1) {\n                return [urlLike];\n            }\n\n            var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n            var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n            return [parts[1], parts[2] || undefined, parts[3] || undefined];\n        },\n\n        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !!line.match(CHROME_IE_STACK_REGEXP);\n            }, this);\n\n            return filtered.map(function(line) {\n                if (line.indexOf('(eval ') > -1) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n                }\n                var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(');\n\n                // capture and preseve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n                // case it has spaces in it, as the string is split on \\s+ later on\n                var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/);\n\n                // remove the parenthesized location from the line, if it was matched\n                sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n\n                var tokens = sanitizedLine.split(/\\s+/).slice(1);\n                // if a location was matched, pass it to extractLocation() otherwise pop the last token\n                var locationParts = this.extractLocation(location ? location[1] : tokens.pop());\n                var functionName = tokens.join(' ') || undefined;\n                var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n\n                return new StackFrame({\n                    functionName: functionName,\n                    fileName: fileName,\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                });\n            }, this);\n        },\n\n        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n            }, this);\n\n            return filtered.map(function(line) {\n                // Throw away eval information until we implement stacktrace.js/stackframe#8\n                if (line.indexOf(' > eval') > -1) {\n                    line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n                }\n\n                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                    // Safari eval frames only have function names and nothing else\n                    return new StackFrame({\n                        functionName: line\n                    });\n                } else {\n                    var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                    var matches = line.match(functionNameRegex);\n                    var functionName = matches && matches[1] ? matches[1] : undefined;\n                    var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n\n                    return new StackFrame({\n                        functionName: functionName,\n                        fileName: locationParts[0],\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }\n            }, this);\n        },\n\n        parseOpera: function ErrorStackParser$$parseOpera(e) {\n            if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n                return this.parseOpera9(e);\n            } else if (!e.stack) {\n                return this.parseOpera10(e);\n            } else {\n                return this.parseOpera11(e);\n            }\n        },\n\n        parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n            var lines = e.message.split('\\n');\n            var result = [];\n\n            for (var i = 2, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(new StackFrame({\n                        fileName: match[2],\n                        lineNumber: match[1],\n                        source: lines[i]\n                    }));\n                }\n            }\n\n            return result;\n        },\n\n        parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n            var lines = e.stacktrace.split('\\n');\n            var result = [];\n\n            for (var i = 0, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(\n                        new StackFrame({\n                            functionName: match[3] || undefined,\n                            fileName: match[2],\n                            lineNumber: match[1],\n                            source: lines[i]\n                        })\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        // Opera 10.65+ Error.stack very similar to FF/Safari\n        parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n            }, this);\n\n            return filtered.map(function(line) {\n                var tokens = line.split('@');\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionCall = (tokens.shift() || '');\n                var functionName = functionCall\n                    .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                    .replace(/\\([^)]*\\)/g, '') || undefined;\n                var argsRaw;\n                if (functionCall.match(/\\(([^)]*)\\)/)) {\n                    argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');\n                }\n                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\n                    undefined : argsRaw.split(',');\n\n                return new StackFrame({\n                    functionName: functionName,\n                    args: args,\n                    fileName: locationParts[0],\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                });\n            }, this);\n        }\n    };\n}));\n", "/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n", "\nexport function lpad(s:string, n:number):string {\n  s += ''; // convert to string\n  while (s.length<n) s=\" \"+s;\n  return s;\n}\n\nexport function rpad(s:string, n:number):string {\n  s += ''; // convert to string\n  while (s.length<n) s+=\" \";\n  return s;\n}\n\nexport function byte2signed(b:number):number {\n  b &= 0xff;\n  return (b < 0x80) ? b : -(256-b);\n}\n\nexport function getFilenameForPath(s:string):string {\n  var toks = s.split('/');\n  return toks[toks.length-1];\n}\n\nexport function getFolderForPath(s:string):string {\n  return s.substring(0, s.lastIndexOf('/'));\n}\n\nexport function getFilenamePrefix(s:string):string {\n  var pos = s.lastIndexOf('.');\n  return (pos > 0) ? s.substr(0, pos) : s;\n}\n\nexport function hex(v:number, nd?:number) {\n  if (!nd) nd = 2;\n  if (nd == 8) {\n    return hex((v>>16)&0xffff,4) + hex(v&0xffff,4);\n  } else {\n    return toradix(v,nd,16);\n  }\n}\n\nexport function tobin(v:number, nd?:number) {\n  if (!nd) nd = 8;\n  return toradix(v,nd,2);\n}\n\nexport function toradix(v:number, nd:number, radix:number) {\n  try {\n    var s = v.toString(radix).toUpperCase();\n    while (s.length < nd)\n      s = \"0\" + s;\n    return s;\n  } catch (e) {\n    return v+\"\";\n  }\n}\n\nexport function arrayCompare(a:ArrayLike<any>, b:ArrayLike<any>):boolean {\n  if (a == null && b == null) return true;\n  if (a == null) return false;\n  if (b == null) return false;\n  if (a.length != b.length) return false;\n  for (var i=0; i<a.length; i++)\n    if (a[i] != b[i])\n      return false;\n  return true;\n}\n\nexport function invertMap(m:{}):{} {\n  var r = {};\n  if (m) {\n    for (var k in m) r[m[k]] = k;\n  }\n  return r;\n}\n\nexport function highlightDifferences(s1:string, s2:string):string {\n  var split1 = s1.split(/(\\S+\\s+)/).filter(function(n) {return n});\n  var split2 = s2.split(/(\\S+\\s+)/).filter(function(n) {return n});\n  var i = 0;\n  var j = 0;\n  var result = \"\";\n  while (i < split1.length && j < split2.length) {\n    var w1 = split1[i];\n    var w2 = split2[j];\n    if (w2 && w2.indexOf(\"\\n\") >= 0) {\n      while (i < s1.length && split1[i].indexOf(\"\\n\") < 0)\n        i++;\n    }\n    if (w1 != w2) {\n      w2 = '<span class=\"hilite\">' + w2 + '</span>';\n    }\n    result += w2;\n    i++;\n    j++;\n  }\n  while (j < split2.length) {\n      result += split2[j++];\n  }\n  return result;\n}\n\nexport function lzgmini() {\n\n  // Constants\n  var LZG_HEADER_SIZE = 16;\n  var LZG_METHOD_COPY = 0;\n  var LZG_METHOD_LZG1 = 1;\n\n  // LUT for decoding the copy length parameter\n  var LZG_LENGTH_DECODE_LUT = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,\n                               20,21,22,23,24,25,26,27,28,29,35,48,72,128];\n\n  // Decoded data (produced by the decode() method)\n  var outdata = null;\n\n  // Calculate the checksum\n  var calcChecksum = function(data) {\n    var a = 1;\n    var b = 0;\n    var i = LZG_HEADER_SIZE;\n    while (i < data.length)\n    {\n      a = (a + (data[i] & 0xff)) & 0xffff;\n      b = (b + a) & 0xffff;\n      i++;\n    }\n    return (b << 16) | a;\n  }\n\n  // Decode LZG coded data. The function returns the size of the decoded data.\n  // Use any of the get* methods to retrieve the decoded data.\n  this.decode = function(data:number[]):number[] {\n    // Start by clearing the decompressed array in this object\n    outdata = null;\n\n    // Check magic ID\n    if ((data.length < LZG_HEADER_SIZE) || (data[0] != 76) ||\n         (data[1] != 90) || (data[2] != 71))\n    {\n      return null;\n    }\n    \n    // what's the length?\n    var uncomplen = data[6] | (data[5]<<8) | (data[4]<<16) | (data[3]<<24);\n\n    // Calculate & check the checksum\n    var checksum = ((data[11] & 0xff) << 24) |\n                   ((data[12] & 0xff) << 16) |\n                   ((data[13] & 0xff) << 8) |\n                   (data[14] & 0xff);\n    if (calcChecksum(data) != checksum)\n    {\n      return null;\n    }\n\n    var dst = new Array();\n    // Check which method to use\n    var method = data[15] & 0xff;\n    if (method == LZG_METHOD_LZG1)\n    {\n      // Get marker symbols\n      var m1 = data[16] & 0xff;\n      var m2 = data[17] & 0xff;\n      var m3 = data[18] & 0xff;\n      var m4 = data[19] & 0xff;\n\n      // Main decompression loop\n      var symbol, b, b2, b3, len, offset;\n      var dstlen = 0;\n      var k = LZG_HEADER_SIZE + 4;\n      var datalen = data.length;\n      while (k <= datalen)\n      {\n        symbol = data[k++] & 0xff;\n        if ((symbol != m1) && (symbol != m2) && (symbol != m3) && (symbol != m4))\n        {\n          // Literal copy\n          dst[dstlen++] = symbol;\n        }\n        else\n        {\n          b = data[k++] & 0xff;\n          if (b != 0)\n          {\n            // Decode offset / length parameters\n            if (symbol == m1)\n            {\n              // marker1 - \"Distant copy\"\n              len = LZG_LENGTH_DECODE_LUT[b & 0x1f];\n              b2 = data[k++] & 0xff;\n              b3 = data[k++] & 0xff;\n              offset = (((b & 0xe0) << 11) | (b2 << 8) | b3) + 2056;\n            }\n            else if (symbol == m2)\n            {\n              // marker2 - \"Medium copy\"\n              len = LZG_LENGTH_DECODE_LUT[b & 0x1f];\n              b2 = data[k++] & 0xff;\n              offset = (((b & 0xe0) << 3) | b2) + 8;\n            }\n            else if (symbol == m3)\n            {\n              // marker3 - \"Short copy\"\n              len = (b >> 6) + 3;\n              offset = (b & 63) + 8;\n            }\n            else\n            {\n              // marker4 - \"Near copy (incl. RLE)\"\n              len = LZG_LENGTH_DECODE_LUT[b & 0x1f];\n              offset = (b >> 5) + 1;\n            }\n\n            // Copy the corresponding data from the history window\n            for (i = 0; i < len; i++)\n            {\n              dst[dstlen] = dst[dstlen-offset];\n              dstlen++;\n            }\n          }\n          else\n          {\n            // Literal copy (single occurance of a marker symbol)\n            dst[dstlen++] = symbol;\n          }\n        }\n      }\n\n    }\n    else if (method == LZG_METHOD_COPY)\n    {\n      // Plain copy\n      var dstlen = 0;\n      var datalen = data.length;\n      for (var i = LZG_HEADER_SIZE; i < datalen; i++)\n      {\n        dst[dstlen++] = data[i] & 0xff;\n      }\n    }\n    else\n    {\n      // Unknown method\n      return null;\n    }\n    // Store the decompressed data in the lzgmini object for later retrieval\n    if (dst.length < uncomplen) return null; // data too short\n    outdata = dst.slice(0, uncomplen);\n    return outdata;\n  }\n\n  // Get the decoded byte array\n  this.getByteArray = function():number[]\n  {\n    return outdata;\n  }\n\n  // Get the decoded string from a Latin 1 (or ASCII) encoded array\n  this.getStringLatin1 = function():string {\n    return byteArrayToString(outdata);\n  }\n\n  // Get the decoded string from an UTF-8 encoded array\n  this.getStringUTF8 = function():string {\n    return byteArrayToUTF8(outdata);\n  }\n}\n\nexport function stringToByteArray(s:string) : Uint8Array {\n  var a = new Uint8Array(s.length);\n  for (var i=0; i<s.length; i++)\n    a[i] = s.charCodeAt(i);\n  return a;\n}\n\nexport function byteArrayToString(data : number[] | Uint8Array) : string {\n  var str = \"\";\n  if (data != null) {\n    var charLUT = new Array();\n    for (var i = 0; i < 256; ++i)\n      charLUT[i] = String.fromCharCode(i);\n    var len = data.length;\n    for (var i = 0; i < len; i++)\n      str += charLUT[data[i]];\n  }\n  return str;\n}\n\nexport function byteArrayToUTF8(data : number[] | Uint8Array) : string {\n  var str = \"\";\n  var charLUT = new Array();\n  for (var i = 0; i < 128; ++i)\n    charLUT[i] = String.fromCharCode(i);\n  var c;\n  var len = data.length;\n  for (var i = 0; i < len;) {\n    c = data[i++];\n    if (c < 128) {\n      str += charLUT[c];\n    } else {\n      if ((c >= 192) && (c < 224)) {\n        c = ((c & 31) << 6) | (data[i++] & 63);\n      } else {\n        c = ((c & 15) << 12) | ((data[i] & 63) << 6) | (data[i+1] & 63);\n        i += 2;\n        if (c == 0xfeff) continue; // ignore BOM\n      }\n      str += String.fromCharCode(c);\n    }\n  }\n  return str;\n}\n\nexport function removeBOM(s:string) {\n  if (s.charCodeAt(0) === 0xFEFF) {\n    s = s.substr(1);\n  }\n  return s;\n}\n\nexport function isProbablyBinary(path:string, data?:number[] | Uint8Array) : boolean {\n  var score = 0;\n  // check extensions\n  if (path) {\n    path = path.toUpperCase();\n    const BINEXTS = ['.CHR','.BIN','.DAT','.PAL','.NAM','.RLE','.LZ4','.NSF'];\n    for (var ext of BINEXTS) {\n      if (path.endsWith(ext)) score++;\n    }\n  }\n  // decode as UTF-8\n  for (var i = 0; i < (data?data.length:0);) {\n    let c = data[i++];\n    if ((c & 0x80) == 0) {\n      // more likely binary if we see a NUL or obscure control character\n      if (c < 9 || (c >= 14 && c < 26) || c == 0x7f) {\n        score++;\n        break;\n      }\n    } else {\n      // look for invalid unicode sequences\n      var nextra = 0;\n      if ((c & 0xe0) == 0xc0) nextra = 1;\n      else if ((c & 0xf0) == 0xe0) nextra = 2;\n      else if ((c & 0xf8) == 0xf0) nextra = 3;\n      else if (c < 0xa0) score++;\n      else if (c == 0xff) score++;\n      while (nextra--) {\n        if (i >= data.length || (data[i++] & 0xc0) != 0x80) {\n          score++;\n          break;\n        }\n      }\n    }\n  }\n  return score > 0;\n}\n\n// need to load liblzg.js first\nexport function compressLZG(em_module, inBuffer:number[], levelArg?:boolean) : Uint8Array {\n  var level = levelArg || 9;\n  var inLen = inBuffer.length;\n  var inPtr = em_module._malloc(inLen + 1);\n  for (var i = 0; i < inLen; i++) {\n      em_module.setValue(inPtr + i, inBuffer[i], 'i8');\n  }\n  var maxEncSize = em_module._LZG_MaxEncodedSize(inLen);\n  var outPtr = em_module._malloc(maxEncSize + 1);\n  var compLen = em_module.ccall('compress_lzg', 'number', ['number', 'number', 'number', 'number', 'number'], [level, inPtr, inLen, maxEncSize, outPtr]);\n  em_module._free(inPtr);\n  var outBuffer = new Uint8Array(compLen);\n  for (var i = 0; i < compLen; i++) {\n      outBuffer[i] = em_module.getValue(outPtr + i, 'i8');\n  }\n  em_module._free(outPtr);\n  return outBuffer;\n}\n\n// only does primitives, 1D arrays and no recursion\nexport function safe_extend(deep, dest, src) {\n  // TODO: deep ignored\n  for (var key in src) {\n    var val = src[key];\n    var type = typeof(val);\n    if (val === null || type == 'undefined') {\n      dest[key] = val;\n    } else if (type == 'function') {\n      // ignore function\n    } else if (type == 'object') {\n      if (val['slice']) { // array?\n        dest[key] = val.slice();\n      } else {\n        // ignore object\n      }\n    } else {\n      dest[key] = val;\n    }\n  }\n  return dest;\n}\n\nexport function printFlags(val:number, names:string[], r2l:boolean) {\n  var s = '';\n  for (var i=0; i<names.length; i++) {\n    if (names[i]) {\n      var bit = 1 << (r2l ? (names.length-1-i) : i);\n      if (i > 0) s += \" \";\n      s += (val & bit) ? names[i] : \"-\";\n    }\n  }\n  return s;\n}\n\nexport function rgb2bgr(x) {\n  return ((x&0xff)<<16) | ((x>>16)&0xff) | (x&0x00ff00);\n}\n\nexport function RGBA(r:number,g:number,b:number) {\n  return (r&0xff) | ((g&0xff)<<8) | ((b&0xff)<<16) | 0xff000000;\n}\n\nexport function clamp(minv:number, maxv:number, v:number) {\n  return (v < minv) ? minv : (v > maxv) ? maxv : v;\n}\n\nexport function safeident(s : string) : string {\n  return s.replace(/\\W+/g, \"_\");\n}\n\nexport function rle_unpack(src : Uint8Array) : Uint8Array {\n  var i = 0;\n  var tag = src[i++];\n  var dest = [];\n  var data = tag;\n  while (i < src.length) {\n    var ch = src[i++];\n    if (ch == tag) {\n      var count = src[i++];\n      for (var j=0; j<count; j++)\n        dest.push(data);\n      if (count == 0)\n        break;\n    } else {\n      data = ch;\n      dest.push(data);\n    }\n  }\n  return new Uint8Array(dest);\n}\n\n// firefox doesn't do GET with binary files\n// TODO: replace with fetch()?\nexport function getWithBinary(url:string, success:(text:string|Uint8Array)=>void, datatype:'text'|'arraybuffer') {\n  var oReq = new XMLHttpRequest();\n  oReq.open(\"GET\", url, true);\n  oReq.responseType = datatype;\n  oReq.onload = function (oEvent) {\n    if (oReq.status == 200) {\n      var data = oReq.response;\n      if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data);\n      }\n      success(data);\n    } else if (oReq.status == 404) {\n      success(null);\n    } else {\n      throw Error(\"Error \" + oReq.status + \" loading \" + url);\n    }\n  }\n  oReq.onerror = function (oEvent) {\n    success(null);\n  }\n  oReq.ontimeout = function (oEvent) {\n    throw Error(\"Timeout loading \" + url);\n  }\n  oReq.send(null);\n}\n\n// get platform ID without . emulator\nexport function getBasePlatform(platform : string) : string {\n  return platform.split('.')[0];\n}\n\n// get platform ID without - specialization\nexport function getRootPlatform(platform : string) : string {\n  return platform.split('-')[0];\n}\n\n// get platform ID without emulator or specialization\nexport function getRootBasePlatform(platform : string) : string {\n  return getRootPlatform(getBasePlatform(platform));\n}\n\nexport function isArray(obj: any) : obj is ArrayLike<any> {\n  return obj != null && (Array.isArray(obj) || isTypedArray(obj));\n}\n\nexport function isTypedArray(obj: any) : obj is ArrayLike<number> {\n  return obj != null && obj['BYTES_PER_ELEMENT'];\n}\n\nexport function convertDataToUint8Array(data: string|Uint8Array) : Uint8Array {\n  return (typeof data === 'string') ? stringToByteArray(data) : data;\n}\n\nexport function convertDataToString(data: string|Uint8Array) : string {\n  return (data instanceof Uint8Array) ? byteArrayToUTF8(data) : data;\n}\n\nexport function byteToASCII(b: number) : string {\n  if (b < 32)\n    return String.fromCharCode(b + 0x2400);\n  else\n    return String.fromCharCode(b);\n}\n\nexport function loadScript(scriptfn:string) : Promise<Event> {\n  return new Promise( (resolve, reject) => {\n    var script = document.createElement('script');\n    script.onload = resolve;\n    script.onerror = reject;\n    script.src = scriptfn;\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n}\n\nexport function decodeQueryString(qs : string) : {} {\n  if (qs.startsWith('?')) qs = qs.substr(1);\n  var a = qs.split('&');\n  if (!a || a.length == 0)\n      return {};\n  var b = {};\n  for (var i = 0; i < a.length; ++i) {\n      var p = a[i].split('=', 2);\n      if (p.length == 1)\n          b[p[0]] = \"\";\n      else\n          b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n  }\n  return b;\n}\n\nexport function parseBool(s : string) : boolean {\n  if (!s) return false;\n  if (s == 'false' || s == '0') return false;\n  if (s == 'true' || s == '1') return true;\n  return s ? true : false;\n}\n\n///\n\nexport class XMLParseError extends Error {\n}\n\nexport interface XMLNode {\n  type: string;\n  text: string | null;\n  children: XMLNode[];\n  attrs: { [id: string]: string };\n  obj: any;\n}\n\nexport type XMLVisitFunction = (node: XMLNode) => any;\n\nfunction escapeXML(s: string): string {\n  if (s.indexOf('&') >= 0) {\n      return s.replace(/&apos;/g, \"'\")\n          .replace(/&quot;/g, '\"')\n          .replace(/&gt;/g, '>')\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&');\n  } else {\n      return s;\n  }\n}\n\nexport function parseXMLPoorly(s: string, openfn?: XMLVisitFunction, closefn?: XMLVisitFunction): XMLNode {\n  const tag_re = /[<]([/]?)([?a-z_-]+)([^>]*)[>]+|(\\s*[^<]+)/gi;\n  const attr_re = /\\s*(\\w+)=\"(.*?)\"\\s*/gi;\n  var fm: RegExpMatchArray;\n  var stack: XMLNode[] = [];\n  var top: XMLNode;\n\n  function closetop() {\n      top = stack.pop();\n      if (top == null || top.type != ident) throw new XMLParseError(\"mismatch close tag: \" + ident);\n      if (closefn) {\n          top.obj = closefn(top);\n      }\n      if (stack.length == 0) throw new XMLParseError(\"close tag without open: \" + ident);\n      stack[stack.length - 1].children.push(top);\n  }\n  function parseattrs(as: string): { [id: string]: string } {\n      var am;\n      var attrs = {};\n      if (as != null) {\n          while (am = attr_re.exec(as)) {\n              attrs[am[1]] = escapeXML(am[2]);\n          }\n      }\n      return attrs;\n  }\n  while (fm = tag_re.exec(s)) {\n      var [_m0, close, ident, attrs, content] = fm;\n      //console.log(stack.length, close, ident, attrs, content);\n      if (close) {\n          closetop();\n      } else if (ident) {\n          var node = { type: ident, text: null, children: [], attrs: parseattrs(attrs), obj: null };\n          stack.push(node);\n          if (attrs) {\n              parseattrs(attrs);\n          }\n          if (openfn) {\n              node.obj = openfn(node);\n          }\n          if (attrs && attrs.endsWith('/')) closetop();\n      } else if (content != null) {\n          if (stack.length == 0) throw new XMLParseError(\"content without element\");\n          var txt = escapeXML(content as string).trim();\n          if (txt.length) stack[stack.length - 1].text = txt;\n      }\n  }\n  if (stack.length != 1) throw new XMLParseError(\"tag not closed\");\n  if (stack[0].type != '?xml') throw new XMLParseError(\"?xml needs to be first element\");\n  return top;\n}\n\nexport function escapeHTML(s: string): string {\n  return s.replace(/[&]/g, '&amp;').replace(/[<]/g, '&lt;').replace(/[>]/g, '&gt;');\n}\n\n// lame factorization for displaying bitmaps\n// returns a > b such that a * b == x (or higher), a >= mina, b >= minb\nexport function findIntegerFactors(x: number, mina: number, minb: number, aspect: number) : {a: number, b: number} {\n  let a = x;\n  let b = 1;\n  if (minb > 1 && minb < a) {\n    a = Math.ceil(x / minb);\n    b = minb;\n  }\n  while (a > b) {\n    let a2 = a;\n    let b2 = b;\n    if ((a & 1) == 0) {\n      b2 = b * 2;\n      a2 = a / 2;\n    }\n    if ((a % 3) == 0) {\n      b2 = b * 3;\n      a2 = a / 3;\n    }\n    if ((a % 5) == 0) {\n      b2 = b * 5;\n      a2 = a / 5;\n    }\n    if (a2 < mina) break;\n    if (a2 < b2 * aspect) break;\n    a = a2;\n    b = b2;\n  }\n  return {a, b};\n}\n\nexport class FileDataCache {\n  maxSize : number = 8000000;\n  size : number;\n  cache : Map<string, string|Uint8Array>;\n  constructor() {\n    this.reset();\n  }\n  get(key : string) : string|Uint8Array {\n    return this.cache.get(key);\n  }\n  put(key : string, value : string|Uint8Array) {\n    this.cache.set(key, value);\n    this.size += value.length;\n    if (this.size > this.maxSize) {\n      console.log('cache reset', this);\n      this.reset();\n    }\n  }\n  reset() {\n    this.cache = new Map();\n    this.size = 0;\n  }\n}\n\nexport function coerceToArray<T>(arrobj: any) : T[] {\n    if (Array.isArray(arrobj)) return arrobj;\n    else if (arrobj != null && typeof arrobj[Symbol.iterator] === 'function') return Array.from(arrobj);\n    else if (typeof arrobj === 'object') return Array.from(Object.values(arrobj))\n    else throw new Error(`Expected array or object, got \"${arrobj}\"`);\n}\n", "import { WorkerError, CodeListingMap, SourceLocation, SourceLine } from \"../workertypes\";\n\nexport interface BASICOptions {\n    dialectName : string;               // use this to select the dialect \n    // SYNTAX AND PARSING\n    asciiOnly : boolean;                // reject non-ASCII chars?\n    uppercaseOnly : boolean;            // convert everything to uppercase?\n    optionalLabels : boolean;\t\t\t// can omit line numbers and use labels?\n    optionalWhitespace : boolean;       // can \"crunch\" keywords? also, eat extra \":\" delims\n    multipleStmtsPerLine : boolean;     // multiple statements separated by \":\"\n    varNaming : 'A'|'A1'|'A1$'|'AA'|'*';      // only allow A0-9 for numerics, single letter for arrays/strings\n    squareBrackets : boolean;           // \"[\" and \"]\" interchangable with \"(\" and \")\"?\n    tickComments : boolean;             // support 'comments?\n    hexOctalConsts : boolean;           // support &H and &O integer constants?\n    optionalLet : boolean;              // LET is optional\n    chainAssignments : boolean;         // support A = B = value (HP2000)\n    validKeywords : string[];           // valid keywords (or null for accept all)\n    validFunctions : string[];          // valid functions (or null for accept all)\n    validOperators : string[];          // valid operators (or null for accept all)\n    // VALUES AND OPERATORS\n    defaultValues : boolean;            // initialize unset variables to default value? (0 or \"\")\n    stringConcat : boolean;             // can concat strings with \"+\" operator?\n    checkOverflow : boolean;            // check for overflow of numerics?\n    bitwiseLogic : boolean;             // -1 = TRUE, 0 = FALSE, AND/OR/NOT done with bitwise ops\n    maxStringLength : number;           // maximum string length in chars\n    maxDefArgs : number;                // maximum # of arguments for user-defined functions\n    // ARRAYS\n    staticArrays : boolean;             // can only DIM with constant value? (and never redim)\n    sharedArrayNamespace : boolean;     // arrays and variables have same namespace? (TODO)\n    defaultArrayBase : number;          // arrays start at this number (0 or 1)\n    defaultArraySize : number;          // arrays are allocated w/ this size (starting @ 0)\n    maxDimensions : number;             // max number of dimensions for arrays\n    arraysContainChars : boolean;       // HP BASIC array-slicing syntax\n    // PRINTING\n    printZoneLength : number;           // print zone length\n    numericPadding : boolean;           // \" \" or \"-\" before and \" \" after numbers?\n    // CONTROL FLOW\n    compiledBlocks : boolean;           // assume blocks are statically compiled, not interpreted\n    testInitialFor : boolean;           // can we skip a NEXT statement? (can't interleave tho)\n    optionalNextVar : boolean;          // can do NEXT without variable\n    multipleNextVars : boolean;         // NEXT J,I\n    checkOnGotoIndex : boolean;         // fatal error when ON..GOTO index out of bounds\n    computedGoto : boolean;             // non-const expr GOTO label (and GOTO..OF expression)\n    restoreWithLabel : boolean;         // RESTORE <label>\n    endStmtRequired : boolean;          // need END at end?\n    // MISC\n    multilineIfThen? : boolean;         // multi-line IF .. ELSE .. END IF?\n    commandsPerSec? : number;           // how many commands per second?\n    maxLinesPerFile? : number;          // limit on # of lines\n    maxArrayElements? : number;         // max array elements (all dimensions)\n}\n\n// objects that have source code position info\nexport interface SourceLocated {\n    $loc?: SourceLocation;\n}\n// statements also have the 'offset' (pc) field from SourceLine\nexport interface SourceLineLocated {\n    $loc?: SourceLine;\n}\n\nexport class CompileError extends Error {\n    $loc : SourceLocation;\n    constructor(msg: string, loc: SourceLocation) {\n        super(msg);\n        Object.setPrototypeOf(this, CompileError.prototype);\n        this.$loc = loc;\n    }\n}\n\n// Lexer regular expression -- each (capture group) handles a different token type\n//                FLOAT                             INT       HEXOCTAL                    REMARK   IDENT           STRING   RELOP        EXP    OPERATORS             OTHER  WS\nconst re_toks = /([0-9.]+[E][+-]?\\d+|\\d+[.][E0-9]*|[.][E0-9]+)|[0]*(\\d+)|&([OH][0-9A-F]+)|(['].*)|([A-Z_]\\w*[$]?)|(\".*?\")|([<>]?[=<>#])|(\\*\\*)|([-+*/^,;:()\\[\\]\\?\\\\])|(\\S+)|(\\s+)/gi;\n\nexport enum TokenType {\n    EOL = 0,\n    Float,\n    Int,\n    HexOctalInt,\n    Remark,\n    Ident,\n    String,\n    Relational,\n    DoubleStar,\n    Operator,\n    CatchAll,\n    Whitespace,\n    _LAST,\n}\n\nexport type ExprTypes = BinOp | UnOp | IndOp | Literal;\nexport type Expr = ExprTypes; // & SourceLocated;\nexport type Opcode = string;\nexport type Value = number | string;\nexport type ValueType = 'number' | 'string' | 'label';\n\nexport interface ExprBase extends SourceLocated {\n    valtype: ValueType;\n}\n\nexport interface Literal extends ExprBase {\n    value: Value;\n}\n\nexport interface BinOp extends ExprBase {\n    op: Opcode;\n    left: Expr;\n    right: Expr;\n}\n\nexport interface UnOp extends ExprBase {\n    op: 'neg' | 'lnot' | 'bnot';\n    expr: Expr;\n}\n\nexport interface IndOp extends ExprBase {\n    name: string;\n    args: Expr[];\n}\n\nexport interface Statement extends SourceLineLocated {\n    command: string;\n}\n\nexport interface ScopeStartStatement extends Statement {\n    endpc?: number;\n}\n\nexport interface ScopeEndStatement extends Statement {\n    startpc?: number;\n}\n\nexport interface PRINT_Statement extends Statement {\n    command: \"PRINT\";\n    args: Expr[];\n}\n\nexport interface LET_Statement extends Statement {\n    command: \"LET\";\n    lexprs: IndOp[];\n    right: Expr;\n}\n\nexport interface DIM_Statement extends Statement {\n    command: \"DIM\";\n    args: IndOp[];\n}\n\nexport interface GOTO_Statement extends Statement {\n    command: \"GOTO\";\n    label: Expr;\n}\n\nexport interface GOSUB_Statement extends Statement {\n    command: \"GOSUB\";\n    label: Expr;\n}\n\nexport interface RETURN_Statement extends Statement {\n    command: \"RETURN\";\n}\n\nexport interface ONGO_Statement extends Statement {\n    command: \"ONGOTO\" | \"ONGOSUB\";\n    expr: Expr;\n    labels: Expr[];\n}\n\nexport interface IF_Statement extends ScopeStartStatement {\n    command: \"IF\";\n    cond: Expr;\n}\n\nexport interface ELSE_Statement extends ScopeStartStatement {\n    command: \"ELSE\";\n}\n\nexport interface FOR_Statement extends ScopeStartStatement {\n    command: \"FOR\";\n    lexpr: IndOp;\n    initial: Expr;\n    target: Expr;\n    step?: Expr;\n}\n\nexport interface NEXT_Statement extends ScopeEndStatement {\n    command: \"NEXT\";\n    lexpr?: IndOp;\n}\n\nexport interface WHILE_Statement extends ScopeStartStatement {\n    command: \"WHILE\";\n    cond: Expr;\n}\n\nexport interface WEND_Statement extends ScopeEndStatement {\n    command: \"WEND\";\n}\n\nexport interface END_Statement extends ScopeEndStatement {\n    command: \"END\";\n}\n\nexport interface INPUT_Statement extends Statement {\n    command: \"INPUT\";\n    prompt: Expr;\n    args: IndOp[];\n    timeout?: Expr;\n    elapsed?: IndOp;\n}\n\nexport interface ENTER_Statement extends INPUT_Statement {\n    timeout: Expr;\n    elapsed: IndOp;\n}\n\nexport interface DATA_Statement extends Statement {\n    command: \"DATA\";\n    datums: Literal[];\n}\n\nexport interface READ_Statement extends Statement {\n    command: \"READ\";\n    args: IndOp[];\n}\n\nexport interface RESTORE_Statement extends Statement {\n    command: \"RESTORE\";\n    label: Expr;\n}\n\nexport interface DEF_Statement extends Statement {\n    command: \"DEF\";\n    lexpr: IndOp;\n    def: Expr;\n}\n\nexport interface SUB_Statement extends ScopeStartStatement {\n    command: \"SUB\";\n    lexpr: IndOp;\n}\n\nexport interface CALL_Statement {\n    command: \"CALL\";\n    call: IndOp;\n}\n\nexport interface OPTION_Statement extends Statement {\n    command: \"OPTION\";\n    optname: string;\n    optargs: string[];\n}\n\nexport interface GET_Statement extends Statement { // applesoft only?\n    command: \"GET\";\n    lexpr: IndOp;\n}\n\nexport interface CHANGE_Statement extends Statement {\n    command: \"CHANGE\";\n    src: Expr;\n    dest: IndOp;\n}\n\nexport interface CONVERT_Statement extends Statement {\n    command: \"CONVERT\";\n    src: Expr;\n    dest: IndOp;\n}\n\nexport interface NoArgStatement extends Statement {\n    command: string;\n}\n\nexport interface BASICProgram {\n    opts: BASICOptions;\n    stmts: Statement[];\n    labels: { [label: string]: number }; // label -> PC\n}\n\nclass Token implements SourceLocated {\n    str: string;\n    type: TokenType;\n    $loc: SourceLocation;\n}\n\nconst OPERATORS = {\n    'IMP':  {f:'bimp',p:4},\n    'EQV':  {f:'beqv',p:5},\n    'XOR':  {f:'bxor',p:6},\n    'OR':   {f:'bor',p:7}, // or \"lor\" for logical\n    'AND':  {f:'band',p:8}, // or \"land\" for logical\n    '||':   {f:'lor',p:17}, // not used\n    '&&':   {f:'land',p:18}, // not used\n    '=':    {f:'eq',p:50},\n    '==':   {f:'eq',p:50},\n    '<>':   {f:'ne',p:50},\n    '><':   {f:'ne',p:50},\n    '!=':   {f:'ne',p:50},\n    '#':    {f:'ne',p:50},\n    '<':    {f:'lt',p:50},\n    '>':    {f:'gt',p:50},\n    '<=':   {f:'le',p:50},\n    '>=':   {f:'ge',p:50},\n    'MIN':  {f:'min',p:75},\n    'MAX':  {f:'max',p:75},\n    '+':    {f:'add',p:100},\n    '-':    {f:'sub',p:100},\n    '%':    {f:'mod',p:140},\n    'MOD':  {f:'mod',p:140},\n    '\\\\':   {f:'idiv',p:150},\n    '*':    {f:'mul',p:200},\n    '/':    {f:'div',p:200},\n    '^':    {f:'pow',p:300},\n    '**':   {f:'pow',p:300},\n};\n\nfunction getOperator(op: string) {\n    return OPERATORS[op];\n}\n\nfunction getPrecedence(tok: Token): number {\n    switch (tok.type) {\n        case TokenType.Operator:\n        case TokenType.DoubleStar:\n        case TokenType.Relational:\n        case TokenType.Ident:\n            let op = getOperator(tok.str);\n            if (op) return op.p;\n    }\n    return -1;\n}\n\n// is token an end of statement marker? (\":\" or end of line)\nfunction isEOS(tok: Token) {\n    return tok.type == TokenType.EOL || tok.type == TokenType.Remark\n        || tok.str == ':' || tok.str == 'ELSE'; // TODO: only ELSE if ifElse==true\n}\n\nfunction stripQuotes(s: string) {\n    // TODO: assert\n    return s.substr(1, s.length-2);\n}\n\nfunction isLiteral(arg: Expr): arg is Literal {\n    return (arg as any).value != null;\n}\nfunction isLookup(arg: Expr): arg is IndOp {\n    return (arg as any).name != null;\n}\nfunction isBinOp(arg: Expr): arg is BinOp {\n    return (arg as any).op != null && (arg as any).left != null && (arg as any).right != null;\n}\nfunction isUnOp(arg: Expr): arg is UnOp {\n    return (arg as any).op != null && (arg as any).expr != null;\n}\n\nfunction mergeLocs(a: SourceLocation, b: SourceLocation) : SourceLocation {\n    return {\n        line:Math.min(a.line, b.line),\n        start:Math.min(a.start, b.start),\n        end:Math.max(a.end, b.end),\n        label:a.label || b.label,\n        path:a.path || b.path,\n    }\n}\n\n///// BASIC PARSER\n\nexport class BASICParser {\n    opts : BASICOptions = DIALECTS['DEFAULT'];\n    optionCount : number; // how many OPTION stmts so far?\n    maxlinelen : number = 255; // maximum line length (some like HP use 72 chars)\n    stmts : Statement[];\n    errors: WorkerError[];\n    listings: CodeListingMap;\n    labels: { [label: string]: number }; // label -> PC\n    targets: { [targetlabel: string]: SourceLocation }; // targets of GOTOs etc\n    vardefs: { [name: string]: IndOp }; // LET or DIM\n    varrefs: { [name: string]: SourceLocation }; // variable references\n    fnrefs: { [name: string]: string[] }; // DEF FN call graph\n    scopestack: number[];\n    elseifcount: number;\n\n    path : string;\n    lineno : number;\n    tokens: Token[];\n    eol: Token;\n    curlabel: string;\n    lasttoken: Token;\n\n    constructor() {\n        this.optionCount = 0;\n        this.lineno = 0;\n        this.curlabel = null;\n        this.stmts = [];\n        this.labels = {};\n        this.targets = {};\n        this.errors = [];\n        this.listings = {};\n        this.vardefs = {};\n        this.varrefs = {};\n        this.fnrefs = {};\n        this.scopestack = [];\n        this.elseifcount = 0;\n    }\n    addError(msg: string, loc?: SourceLocation) {\n        var tok = this.lasttoken || this.peekToken();\n        if (!loc) loc = tok.$loc;\n        this.errors.push({path:loc.path, line:loc.line, label:this.curlabel, start:loc.start, end:loc.end, msg:msg});\n    }\n    compileError(msg: string, loc?: SourceLocation, loc2?: SourceLocation) {\n        this.addError(msg, loc);\n        //if (loc2 != null) this.addError(`...`, loc2);\n        throw new CompileError(msg, loc);\n    }\n    dialectError(what: string, loc?: SourceLocation) {\n        this.compileError(`${what} in this dialect of BASIC (${this.opts.dialectName}).`, loc);\n    }\n    dialectErrorNoSupport(what: string, loc?: SourceLocation) {\n        this.compileError(`You can't use ${what} in this dialect of BASIC (${this.opts.dialectName}).`, loc); // TODO\n    }\n    consumeToken(): Token {\n        var tok = this.lasttoken = (this.tokens.shift() || this.eol);\n        return tok;\n    }\n    expectToken(str: string, msg?: string) : Token {\n        var tok = this.consumeToken();\n        var tokstr = tok.str;\n        if (str != tokstr) {\n            this.compileError(msg || `There should be a \"${str}\" here.`);\n        }\n        return tok;\n    }\n    expectTokens(strlist: string[], msg?: string) : Token {\n        var tok = this.consumeToken();\n        var tokstr = tok.str;\n        if (strlist.indexOf(tokstr) < 0) {\n            this.compileError(msg || `There should be a ${strlist.map((s) => `\"${s}\"`).join(' or ')} here.`);\n        }\n        return tok;\n    }\n    peekToken(lookahead?: number): Token {\n        var tok = this.tokens[lookahead || 0];\n        return tok ? tok : this.eol;\n    }\n    pushbackToken(tok: Token) {\n        this.tokens.unshift(tok);\n    }\n    // this parses either a line number or \"label:\" -- or adds a default label to a line\n    parseOptLabel() {\n        let tok = this.consumeToken();\n        switch (tok.type) {\n            case TokenType.Ident:\n                if (this.opts.optionalLabels || tok.str == 'OPTION') {\n                    // is it a \"label :\" and not a keyword like \"PRINT : \"\n                    if (this.peekToken().str == ':' && !this.supportsCommand(tok.str)) { \n                        this.consumeToken(); // eat the \":\"\n                        // fall through to the next case\n                    } else {\n                        this.pushbackToken(tok); // nope\n                        break;\n                    }\n                } else\n                    this.dialectError(`Each line must begin with a line number`);\n            case TokenType.Int:\n                this.addLabel(tok.str);\n                return;\n            // label added, return from function... other cases add default label\n            case TokenType.HexOctalInt:\n            case TokenType.Float:\n                this.compileError(`Line numbers must be positive integers.`);\n                break;\n            case TokenType.Operator:\n                if (this.supportsCommand(tok.str) && this.validKeyword(tok.str)) {\n                    this.pushbackToken(tok);\n                    break; // \"?\" is allowed\n                }\n            default:\n                if (this.opts.optionalLabels)\n                    this.compileError(`A line must start with a line number, command, or label.`);\n                else\n                    this.compileError(`A line must start with a line number.`);\n            case TokenType.Remark:\n                break;\n        }\n        // add default label\n        this.addLabel('#'+this.lineno);\n    }\n    getPC() : number {\n        return this.stmts.length;\n    }\n    addStatement(stmt: Statement, cmdtok: Token, endtok?: Token) {\n        // set location for statement, adding offset (PC) field\n        if (endtok == null) endtok = this.peekToken();\n        stmt.$loc = { path: cmdtok.$loc.path, line: cmdtok.$loc.line, start: cmdtok.$loc.start, end: endtok.$loc.start,\n            label: this.curlabel,\n            offset: this.stmts.length };\n        // check IF/THEN WHILE/WEND FOR/NEXT etc\n        this.modifyScope(stmt);\n        // add to list\n        this.stmts.push(stmt);\n    }\n    addLabel(str: string, offset?: number) {\n        if (this.labels[str] != null) this.compileError(`There's a duplicated label named \"${str}\".`);\n        this.labels[str] = this.getPC() + (offset || 0);\n        this.curlabel = str;\n        this.tokens.forEach((tok) => tok.$loc.label = str);\n    }\n    parseFile(file: string, path: string) : BASICProgram {\n        this.path = path;\n        var txtlines = file.split(/\\n|\\r\\n?/);\n        txtlines.forEach((line) => this.parseLine(line));\n        var program = { opts: this.opts, stmts: this.stmts, labels: this.labels };\n        this.checkAll(program);\n        this.listings[path] = this.generateListing(file, program);\n        return program;\n    }\n    parseLine(line: string) : void {\n        try {\n            this.tokenize(line);\n            this.parse();\n        } catch (e) {\n            if (!(e instanceof CompileError)) throw e; // ignore compile errors since errors[] list captures them\n        }\n    }\n    _tokenize(line: string) : void {\n        // split identifier regex (if token-crunching enabled)\n        let splitre = this.opts.optionalWhitespace && new RegExp('('+this.opts.validKeywords.map(s => `${s}`).join('|')+')');\n        // iterate over each token via re_toks regex\n        var lastTokType = TokenType.CatchAll;\n        var m : RegExpMatchArray;\n        while (m = re_toks.exec(line)) {\n            for (var i = 1; i <= lastTokType; i++) {\n                let s : string = m[i];\n                if (s != null) {\n                    let loc = { path: this.path, line: this.lineno, start: m.index, end: m.index+s.length };\n                    // maybe we don't support unicode in 1975?\n                    if (this.opts.asciiOnly && !/^[\\x00-\\x7F]*$/.test(s))\n                        this.dialectErrorNoSupport(`non-ASCII characters`);\n                    // uppercase all identifiers, and maybe more\n                    if (i == TokenType.Ident || i == TokenType.HexOctalInt || this.opts.uppercaseOnly) {\n                        s = s.toUpperCase();\n                        // DATA statement captures whitespace too\n                        if (s == 'DATA') lastTokType = TokenType.Whitespace;\n                        // certain keywords shouldn't split for rest of line\n                        if (s == 'DATA') splitre = null;\n                        if (s == 'OPTION') splitre = null;\n                        // REM means ignore rest of statement\n                        if (lastTokType == TokenType.CatchAll && s.startsWith('REM')) {\n                            s = 'REM';\n                            lastTokType = TokenType.EOL;\n                        }\n                    }\n                    // convert brackets\n                    if (s == '[' || s == ']') {\n                        if (!this.opts.squareBrackets) this.dialectErrorNoSupport(`square brackets`);\n                        if (s == '[') s = '(';\n                        if (s == ']') s = ')';\n                    }\n                    // un-crunch tokens?\n                    if (splitre && i == TokenType.Ident) {\n                        var splittoks = s.split(splitre).filter((s) => s != ''); // only non-empties\n                        if (splittoks.length > 1) {\n                            splittoks.forEach((ss) => {\n                                // check to see if leftover might be integer, or identifier\n                                if (/^[0-9]+$/.test(ss)) i = TokenType.Int;\n                                else if (/^[A-Z_]\\w*[$]?$/.test(ss)) i = TokenType.Ident;\n                                else this.compileError(`Try adding whitespace before \"${ss}\".`);\n                                this.tokens.push({str: ss, type: i, $loc:loc});\n                            });\n                            s = null;\n                        }\n                    }\n                    // add token to list\n                    if (s) this.tokens.push({str: s, type: i, $loc:loc});\n                    break;\n                }\n            }\n        }\n    }\n    tokenize(line: string) : void {\n        this.lineno++;\n        this.tokens = []; // can't have errors until this is set\n        this.eol = { type: TokenType.EOL, str: \"\", $loc: { path: this.path, line: this.lineno, start: line.length } };\n        if (line.length > this.maxlinelen) this.compileError(`A line should be no more than ${this.maxlinelen} characters long.`);\n        this._tokenize(line);\n    }\n    parse() : void {\n        // not empty line?\n        if (this.tokens.length) {\n            this.parseOptLabel();\n            if (this.tokens.length) {\n                this.parseCompoundStatement();\n            }\n            var next = this.peekToken();\n            if (!isEOS(next)) this.compileError(`Expected end of line or ':'`, next.$loc);\n            this.curlabel = null;\n        }\n    }\n    parseCompoundStatement() : void {\n        if (this.opts.multipleStmtsPerLine) {\n            this.parseList(this.parseStatement, ':');\n        } else {\n            this.parseList(this.parseStatement, '\\0');\n            if (this.peekToken().str == ':') this.dialectErrorNoSupport(`multiple statements on a line`);\n        }\n    }\n    validKeyword(keyword: string) : string {\n        return (this.opts.validKeywords && this.opts.validKeywords.indexOf(keyword) < 0) ? null : keyword;\n    }\n    validFunction(funcname: string) : string {\n        return (this.opts.validFunctions && this.opts.validFunctions.indexOf(funcname) < 0) ? null : funcname;\n    }\n    supportsCommand(cmd: string) : () => Statement {\n        if (cmd == '?') return this.stmt__PRINT;\n        else return this['stmt__' + cmd];\n    }\n    parseStatement(): Statement | null {\n        // eat extra \":\" (should have separate property for this)\n        if (this.opts.optionalWhitespace && this.peekToken().str == ':') return null;\n        // get the command word\n        var cmdtok = this.consumeToken();\n        var cmd = cmdtok.str;\n        var stmt : Statement;\n        switch (cmdtok.type) {\n            case TokenType.Remark:\n                if (cmdtok.str.startsWith(\"'\") && !this.opts.tickComments)\n                    this.dialectErrorNoSupport(`tick comments`);\n                return null;\n            case TokenType.Operator:\n                // \"?\" is alias for \"PRINT\" on some platforms\n                if (cmd == this.validKeyword('?')) cmd = 'PRINT';\n            case TokenType.Ident:\n                // ignore remarks\n                if (cmd == 'REM') return null;\n                // look for \"GO TO\" and \"GO SUB\"\n                if (cmd == 'GO' && this.peekToken().str == 'TO') {\n                    this.consumeToken();\n                    cmd = 'GOTO';\n                } else if (cmd == 'GO' && this.peekToken().str == 'SUB') {\n                    this.consumeToken();\n                    cmd = 'GOSUB';\n                }\n                // lookup JS function for command\n                var fn = this.supportsCommand(cmd);\n                if (fn) {\n                    if (this.validKeyword(cmd) == null)\n                        this.dialectErrorNoSupport(`the ${cmd} statement`);\n                    stmt = fn.bind(this)();\n                    break;\n                } else if (this.peekToken().str == '=' || this.peekToken().str == '(') {\n                    if (!this.opts.optionalLet)\n                        this.dialectError(`Assignments must have a preceding LET`);\n                    // 'A = expr' or 'A(X) = expr'\n                    this.pushbackToken(cmdtok);\n                    stmt = this.stmt__LET();\n                    break;\n                } else {\n                    this.compileError(`I don't understand the command \"${cmd}\".`);\n                }\n            case TokenType.EOL:\n                if (this.opts.optionalWhitespace) return null;\n            default:\n                this.compileError(`There should be a command here.`);\n                return null;\n        }\n        // add statement to list\n        if (stmt != null) this.addStatement(stmt, cmdtok);\n        return stmt;\n    }\n    // check scope stuff (if compiledBlocks is true)\n    modifyScope(stmt: Statement) {\n        if (this.opts.compiledBlocks) {\n            var cmd = stmt.command;\n            if (cmd == 'FOR' || cmd == 'WHILE' || cmd == 'SUB') {\n                this.scopestack.push(this.getPC()); // has to be before adding statment to list\n            } else if (cmd == 'NEXT') {\n                this.popScope(stmt as NEXT_Statement, 'FOR');\n            } else if (cmd == 'WEND') {\n                this.popScope(stmt as WEND_Statement, 'WHILE');\n            }\n        }\n    }\n    popScope(close: WEND_Statement|NEXT_Statement|END_Statement, open: string) {\n        var popidx = this.scopestack.pop();\n        var popstmt : ScopeStartStatement = popidx != null ? this.stmts[popidx] : null;\n        if (popstmt == null)\n            this.compileError(`There's a ${close.command} without a matching ${open}.`, close.$loc);\n        else if (popstmt.command != open)\n            this.compileError(`There's a ${close.command} paired with ${popstmt.command}, but it should be paired with ${open}.`, close.$loc, popstmt.$loc);\n        else if (close.command == 'NEXT' && !this.opts.optionalNextVar \n            && close.lexpr.name != (popstmt as FOR_Statement).lexpr.name)\n            this.compileError(`This NEXT statement is matched with the wrong FOR variable (${close.lexpr.name}).`, close.$loc, popstmt.$loc);\n        // set start + end locations\n        close.startpc = popidx;\n        popstmt.endpc = this.getPC(); // has to be before adding statment to list\n    }\n    popIfThenScope(nextpc?: number) {\n        var popidx = this.scopestack.pop();\n        var popstmt : ScopeStartStatement = popidx != null ? this.stmts[popidx] : null;\n        if (popstmt == null)\n            this.compileError(`There's an END IF without a matching IF or ELSE.`);\n        if (popstmt.command == 'ELSE') {\n            popstmt.endpc = this.getPC();\n            this.popIfThenScope(popidx + 1); // IF goes to ELSE+1\n        } else if (popstmt.command == 'IF') {\n            popstmt.endpc = nextpc != null ? nextpc : this.getPC();\n        } else {\n            this.compileError(`There's an END IF paired with a ${popstmt.command}, not IF or ELSE.`, this.lasttoken.$loc, popstmt.$loc);\n        }\n    }\n    parseVarSubscriptOrFunc(): IndOp {\n        var tok = this.consumeToken();\n        switch (tok.type) {\n            case TokenType.Ident:\n                let args = null;\n                if (this.peekToken().str == '(') {\n                    this.expectToken('(');\n                    args = this.parseExprList();\n                    this.expectToken(')', `There should be another expression or a \")\" here.`);\n                }\n                var loc = mergeLocs(tok.$loc, this.lasttoken.$loc);\n                var valtype = this.exprTypeForSubscript(tok.str, args, loc);\n                return { valtype: valtype, name: tok.str, args: args, $loc:loc };\n            default:\n                this.compileError(`There should be a variable name here.`);\n                break;\n        }\n    }\n    parseLexpr(): IndOp {\n        var lexpr = this.parseVarSubscriptOrFunc();\n        this.vardefs[lexpr.name] = lexpr;\n        this.validateVarName(lexpr);\n        return lexpr;\n    }\n    parseForNextLexpr() : IndOp {\n        var lexpr = this.parseLexpr();\n        if (lexpr.args || lexpr.name.endsWith('$'))\n            this.compileError(`A FOR ... NEXT loop can only use numeric variables.`, lexpr.$loc);\n        return lexpr;\n    }\n    parseList<T>(parseFunc:()=>T, delim:string): T[] {\n        var sep;\n        var list = [];\n        do {\n            var el = parseFunc.bind(this)(); // call parse function\n            if (el != null) list.push(el); // add parsed element to list\n            sep = this.consumeToken(); // consume seperator token\n        } while (sep.str == delim);\n        this.pushbackToken(sep);\n        return list;\n    }\n    parseLexprList(): IndOp[] {\n        return this.parseList(this.parseLexpr, ',');\n    }\n    parseExprList(): Expr[] {\n        return this.parseList(this.parseExpr, ',');\n    }\n    parseLabelList(): Expr[] {\n        return this.parseList(this.parseLabel, ',');\n    }\n    parseLabel() : Expr {\n        // parse full expr?\n        if (this.opts.computedGoto) {\n            // parse expression, but still add to list of label targets if constant\n            var expr = this.parseExpr();\n            if (isLiteral(expr)) this.targets[expr.value] = this.lasttoken.$loc;\n            return expr;\n        } else {\n            // parse a single number or ident label\n            var tok = this.consumeToken();\n            switch (tok.type) {\n                case TokenType.Ident:\n                    if (!this.opts.optionalLabels)\n                        this.dialectError(`All labels must be line numbers`)\n                case TokenType.Int:\n                    var label = tok.str;\n                    this.targets[label] = tok.$loc;\n                    return {valtype:'label', value:label};\n                default:\n                    var what = this.opts.optionalLabels ? \"label or line number\" : \"line number\";\n                    this.compileError(`There should be a ${what} here.`);\n            }\n        }\n    }\n    parseDatumList(): Literal[] {\n        return this.parseList(this.parseDatum, ',');\n    }\n    parseDatum(): Literal {\n        var tok = this.consumeToken();\n        // get rid of leading whitespace\n        while (tok.type == TokenType.Whitespace)\n            tok = this.consumeToken();\n        if (isEOS(tok)) this.compileError(`There should be a datum here.`);\n        // parse constants\n        if (tok.type <= TokenType.HexOctalInt) {\n            return this.parseValue(tok);\n        }\n        if (tok.str == '-' && this.peekToken().type <= TokenType.HexOctalInt) {\n            tok = this.consumeToken();\n            return { valtype:'number', value: -this.parseValue(tok).value };\n        }\n        if (tok.str == '+' && this.peekToken().type <= TokenType.HexOctalInt) {\n            tok = this.consumeToken();\n            return this.parseValue(tok);\n        }\n        // concat all stuff including whitespace\n        // TODO: should trim whitespace only if not quoted string\n        var s = '';\n        while (!isEOS(tok) && tok.str != ',') {\n            s += this.parseValue(tok).value;\n            tok = this.consumeToken();\n        }\n        this.pushbackToken(tok);\n        return { valtype:'string', value: s }; // trim leading and trailing whitespace\n    }\n    parseValue(tok: Token): Literal {\n        switch (tok.type) {\n            case TokenType.HexOctalInt:\n                if (!this.opts.hexOctalConsts)\n                    this.dialectErrorNoSupport(`hex/octal constants`);\n                let base = tok.str.startsWith('H') ? 16 : 8;\n                return { valtype:'number', value: parseInt(tok.str.substr(1), base) };\n            case TokenType.Int:\n            case TokenType.Float:\n                return { valtype:'number', value: this.parseNumber(tok.str) };\n            case TokenType.String:\n                return { valtype:'string', value: stripQuotes(tok.str) };\n            default:\n                return { valtype:'string', value: tok.str }; // only used in DATA statement\n        }\n    }\n    parsePrimary(): Expr {\n        let tok = this.consumeToken();\n        switch (tok.type) {\n            case TokenType.HexOctalInt:\n            case TokenType.Int:\n            case TokenType.Float:\n            case TokenType.String:\n                return this.parseValue(tok);\n            case TokenType.Ident:\n                if (tok.str == 'NOT') {\n                    let expr = this.parsePrimary();\n                    return { valtype:'number', op: this.opts.bitwiseLogic ? 'bnot' : 'lnot', expr: expr };\n                } else {\n                    this.pushbackToken(tok);\n                    return this.parseVarSubscriptOrFunc();\n                }\n            case TokenType.Operator:\n                if (tok.str == '(') {\n                    let expr = this.parseExpr();\n                    this.expectToken(')', `There should be another expression or a \")\" here.`);\n                    return expr;\n                } else if (tok.str == '-') {\n                    let expr = this.parsePrimary(); // TODO: -2^2=-4 and -2-2=-4\n                    return { valtype:'number', op: 'neg', expr: expr };\n                } else if (tok.str == '+') {\n                    return this.parsePrimary(); // ignore unary +\n                }\n            default:\n                this.compileError(`The expression is incomplete.`);\n                return;\n        }\n    }\n    parseNumber(str: string) : number {\n        var n = parseFloat(str);\n        if (isNaN(n))\n            this.compileError(`The number ${str} is not a valid floating-point number.`);\n        if (this.opts.checkOverflow && !isFinite(n))\n            this.compileError(`The number ${str} is too big to fit into a floating-point value.`);\n        return n;\n    }\n    parseExpr1(left: Expr, minPred: number): Expr {\n        let look = this.peekToken();\n        while (getPrecedence(look) >= minPred) {\n            let op = this.consumeToken();\n            if (this.opts.validOperators && this.opts.validOperators.indexOf(op.str) < 0)\n                this.dialectErrorNoSupport(`the \"${op.str}\" operator`);\n            let right: Expr = this.parsePrimary();\n            look = this.peekToken();\n            while (getPrecedence(look) > getPrecedence(op)) {\n                right = this.parseExpr1(right, getPrecedence(look));\n                look = this.peekToken();\n            }\n            var opfn = getOperator(op.str).f;\n            // use logical operators instead of bitwise?\n            if (!this.opts.bitwiseLogic && op.str == 'AND') opfn = 'land';\n            if (!this.opts.bitwiseLogic && op.str == 'OR') opfn = 'lor';\n            var valtype = this.exprTypeForOp(opfn, left, right, op);\n            left = { valtype:valtype, op:opfn, left: left, right: right };\n        }\n        return left;\n    }\n    parseExpr(): Expr {\n        var startloc = this.peekToken().$loc;\n        var expr = this.parseExpr1(this.parsePrimary(), 0);\n        var endloc = this.lasttoken.$loc;\n        expr.$loc = mergeLocs(startloc, endloc);\n        return expr;\n    }\n    parseExprWithType(expecttype: ValueType): Expr {\n        var expr = this.parseExpr();\n        if (expr.valtype != expecttype)\n            this.compileError(`There should be a ${expecttype} here, but this expression evaluates to a ${expr.valtype}.`, expr.$loc);\n        return expr;\n    }\n    validateVarName(lexpr: IndOp) {\n        switch (this.opts.varNaming) {\n            case 'A': // TINY BASIC, no strings\n                if (!/^[A-Z]$/i.test(lexpr.name))\n                    this.dialectErrorNoSupport(`variable names other than a single letter`);\n                break;\n            case 'A1':\n                if (lexpr.args == null && !/^[A-Z][0-9]?[$]?$/i.test(lexpr.name))\n                    this.dialectErrorNoSupport(`variable names other than a letter followed by an optional digit`);\n                if (lexpr.args != null && !/^[A-Z]?[$]?$/i.test(lexpr.name))\n                    this.dialectErrorNoSupport(`array names other than a single letter`);\n                break;\n            case 'A1$':\n                if (!/^[A-Z][0-9]?[$]?$/i.test(lexpr.name))\n                    this.dialectErrorNoSupport(`variable names other than a letter followed by an optional digit`);\n                break;\n            case 'AA':\n                if (lexpr.args == null && !/^[A-Z][A-Z0-9]?[$]?$/i.test(lexpr.name))\n                    this.dialectErrorNoSupport(`variable names other than a letter followed by an optional letter or digit`);\n                break;\n            case '*':\n                break;\n        }\n    }\n    visitExpr(expr: Expr, callback: (expr:Expr) => void) {\n        if (isBinOp(expr)) {\n            this.visitExpr(expr.left, callback);\n            this.visitExpr(expr.right, callback);\n        }\n        if (isUnOp(expr)) {\n            this.visitExpr(expr.expr, callback);\n        }\n        if (isLookup(expr) && expr.args != null) {\n            for (var arg of expr.args)\n                this.visitExpr(arg, callback);\n        }\n        callback(expr);\n    }\n    // type-checking\n    exprTypeForOp(fnname: string, left: Expr, right: Expr, optok: Token) : ValueType {\n        if (left.valtype == 'string' || right.valtype == 'string') {\n            if (fnname == 'add') {\n                if (this.opts.stringConcat) return 'string' // concat strings\n                else this.dialectErrorNoSupport(`the \"+\" operator to concatenate strings`, optok.$loc);\n            } else if (fnname.length != 2) // only relops are 2 chars long!\n                this.compileError(`You can't do math on strings until they're converted to numbers.`, optok.$loc);\n        }\n        return 'number';\n    }\n    exprTypeForSubscript(fnname: string, args: Expr[], loc: SourceLocation) : ValueType {\n        args = args || [];\n        // first check the built-in functions\n        var defs = BUILTIN_MAP[fnname];\n        if (defs != null) {\n            if (!this.validFunction(fnname)) this.dialectErrorNoSupport(`the ${fnname} function`, loc);\n            for (var def of defs) {\n                if (args.length == def.args.length)\n                    return def.result; // TODO: check arg types\n            }\n            // TODO: check func arg types\n            this.compileError(`The ${fnname} function takes ${def.args.length} arguments, but ${args.length} are given.`, loc);\n        }\n        // no function found, assume it's an array ref\n        // TODO: validateVarName() later?\n        this.varrefs[fnname] = loc;\n        return fnname.endsWith('$') ? 'string' : 'number';\n    }\n\n    //// STATEMENTS\n\n    stmt__LET(): LET_Statement {\n        var lexprs = [ this.parseLexpr() ];\n        this.expectToken(\"=\");\n        // look for A=B=expr (TODO: doesn't work on arrays)\n        while (this.opts.chainAssignments && this.peekToken().type == TokenType.Ident && this.peekToken(1).str == '=') {\n            lexprs.push(this.parseLexpr());\n            this.expectToken(\"=\");\n        }\n        var right = this.parseExprWithType(lexprs[0].valtype);\n        return { command: \"LET\", lexprs: lexprs, right: right };\n    }\n    stmt__PRINT(): PRINT_Statement {\n        var sep, lastsep;\n        var list = [];\n        do {\n            sep = this.peekToken();\n            if (isEOS(sep)) {\n                break;\n            } else if (sep.str == ';') {\n                this.consumeToken();\n                lastsep = sep;\n            } else if (sep.str == ',') {\n                this.consumeToken();\n                list.push({value:'\\t'});\n                lastsep = sep;\n            } else {\n                list.push(this.parseExpr());\n                lastsep = null;\n            }\n        } while (true);\n        if (!(lastsep && (lastsep.str == ';' || sep.str != ','))) {\n            list.push({value:'\\n'});\n        }\n        return { command: \"PRINT\", args: list };\n    }\n    stmt__GOTO(): GOTO_Statement | GOSUB_Statement | ONGO_Statement {\n        return this.__GO(\"GOTO\");\n    }\n    stmt__GOSUB(): GOTO_Statement | GOSUB_Statement | ONGO_Statement {\n        return this.__GO(\"GOSUB\");\n    }\n    __GO(cmd: \"GOTO\"|\"GOSUB\"): GOTO_Statement | GOSUB_Statement | ONGO_Statement {\n        var expr = this.parseLabel();\n        // GOTO (expr) OF (labels...)\n        if (this.peekToken().str == this.validKeyword('OF')) {\n            this.expectToken('OF');\n            let newcmd : 'ONGOTO'|'ONGOSUB' = (cmd == 'GOTO') ? 'ONGOTO' : 'ONGOSUB';\n            return { command: newcmd, expr: expr, labels: this.parseLabelList() };\n        } else {\n            // regular GOTO or GOSUB\n            return { command: cmd, label: expr };\n        }\n    }\n    stmt__IF(): void {\n        var cmdtok = this.lasttoken;\n        var cond = this.parseExprWithType(\"number\");\n        var ifstmt : IF_Statement = { command: \"IF\", cond: cond };\n        this.addStatement(ifstmt, cmdtok);\n        // we accept GOTO or THEN if line number provided (DEC accepts GO TO)\n        var thengoto = this.expectTokens(['THEN','GOTO','GO']);\n        if (thengoto.str == 'GO') this.expectToken('TO');\n        // multiline IF .. THEN? push it to scope stack\n        if (this.opts.multilineIfThen && isEOS(this.peekToken())) {\n            this.scopestack.push(this.getPC() - 1); // we already added stmt to list, so - 1\n        } else {\n            // parse line number or statement clause\n            this.parseGotoOrStatements();\n            // is the next statement an ELSE?\n            // gotta parse it now because it's an end-of-statement token\n            if (this.peekToken().str == 'ELSE') {\n                this.expectToken('ELSE');\n                ifstmt.endpc = this.getPC() + 1;\n                this.stmt__ELSE();\n            } else {\n                ifstmt.endpc = this.getPC();\n            }\n        }\n    }\n    stmt__ELSE(): void {\n        var elsestmt : ELSE_Statement = { command: \"ELSE\" };\n        this.addStatement(elsestmt, this.lasttoken);\n        // multiline ELSE? or ELSE IF?\n        var nexttok = this.peekToken();\n        if (this.opts.multilineIfThen && isEOS(nexttok)) {\n            this.scopestack.push(this.getPC() - 1); // we already added stmt to list, so - 1\n        } else if (this.opts.multilineIfThen && nexttok.str == 'IF') {\n            this.scopestack.push(this.getPC() - 1); // we already added stmt to list, so - 1\n            this.parseGotoOrStatements();\n            this.elseifcount++;\n        } else {\n            // parse line number or statement clause\n            this.parseGotoOrStatements();\n            elsestmt.endpc = this.getPC();\n        }\n    }\n    parseGotoOrStatements() {\n        var lineno = this.peekToken();\n        // assume GOTO if number given after THEN\n        if (lineno.type == TokenType.Int) {\n            this.parseLabel();\n            var gotostmt : GOTO_Statement = { command:'GOTO', label: {valtype:'label', value:lineno.str} }\n            this.addStatement(gotostmt, lineno);\n        } else {\n            // parse rest of IF clause\n            this.parseCompoundStatement();\n        }\n    }\n    stmt__FOR() : FOR_Statement {\n        var lexpr = this.parseForNextLexpr();\n        this.expectToken('=');\n        var init = this.parseExprWithType(\"number\");\n        this.expectToken('TO');\n        var targ = this.parseExprWithType(\"number\");\n        if (this.peekToken().str == 'STEP') {\n            this.consumeToken();\n            var step = this.parseExprWithType(\"number\");\n        }\n        return { command:'FOR', lexpr:lexpr, initial:init, target:targ, step:step };\n    }\n    stmt__NEXT() : NEXT_Statement {\n        var lexpr = null;\n        // NEXT var might be optional\n        if (!this.opts.optionalNextVar || !isEOS(this.peekToken())) {\n            lexpr = this.parseForNextLexpr();\n            // convert ',' to ':' 'NEXT'\n            if (this.opts.multipleNextVars && this.peekToken().str == ',') {\n                this.consumeToken(); // consume ','\n                this.tokens.unshift({type:TokenType.Ident, str:'NEXT', $loc:this.peekToken().$loc});\n                this.tokens.unshift({type:TokenType.Operator, str:':', $loc:this.peekToken().$loc});\n            }\n        }\n        return { command:'NEXT', lexpr:lexpr };\n    }\n    stmt__WHILE(): WHILE_Statement {\n        var cond = this.parseExprWithType(\"number\");\n        return { command:'WHILE', cond:cond };\n    }\n    stmt__WEND(): WEND_Statement {\n        return { command:'WEND' };\n    }\n    stmt__DIM() : DIM_Statement {\n        var lexprs = this.parseLexprList();\n        lexprs.forEach((arr) => {\n            if (arr.args == null || arr.args.length == 0) \n                this.compileError(`An array defined by DIM must have at least one dimension.`)\n            else if (arr.args.length > this.opts.maxDimensions) \n                this.dialectErrorNoSupport(`arrays with more than ${this.opts.maxDimensions} dimensionals`);\n            for (var arrdim of arr.args) {\n                if (arrdim.valtype != 'number')\n                    this.compileError(`Array dimensions must be numeric.`, arrdim.$loc);\n                if (isLiteral(arrdim) && arrdim.value < this.opts.defaultArrayBase)\n                    this.compileError(`An array dimension cannot be less than ${this.opts.defaultArrayBase}.`, arrdim.$loc);\n            }\n        });\n        return { command:'DIM', args:lexprs };\n    }\n    stmt__INPUT() : INPUT_Statement {\n        var prompt = this.consumeToken();\n        var promptstr;\n        if (prompt.type == TokenType.String) {\n            this.expectTokens([';', ',']);\n            promptstr = stripQuotes(prompt.str);\n        } else {\n            this.pushbackToken(prompt);\n            promptstr = \"\";\n        }\n        return { command:'INPUT', prompt:{ valtype:'string', value: promptstr }, args:this.parseLexprList() };\n    }\n    /* for HP BASIC only */\n    stmt__ENTER() : INPUT_Statement {\n        var timeout = this.parseExpr();\n        this.expectToken(',');\n        var elapsed = this.parseLexpr(); // TODO: this has to go somewheres\n        this.expectToken(',');\n        return { command:'INPUT', prompt:null, args:this.parseLexprList(), timeout:timeout, elapsed:elapsed };\n    }\n    // TODO: DATA statement doesn't read unquoted strings\n    stmt__DATA() : DATA_Statement {\n        return { command:'DATA', datums:this.parseDatumList() };\n    }\n    stmt__READ() : READ_Statement {\n        return { command:'READ', args:this.parseLexprList() };\n    }\n    stmt__RESTORE() : RESTORE_Statement {\n        var label = null;\n        if (this.opts.restoreWithLabel && !isEOS(this.peekToken()))\n            label = this.parseLabel();\n        return { command:'RESTORE', label:label };\n    }\n    stmt__RETURN() {\n        return { command:'RETURN' };\n    }\n    stmt__STOP() {\n        return { command:'STOP' };\n    }\n    stmt__END() {\n        if (this.opts.multilineIfThen && this.scopestack.length) {\n            let endtok = this.expectTokens(['IF','SUB']);\n            if (endtok.str == 'IF') {\n                this.popIfThenScope();\n                while (this.elseifcount--) this.popIfThenScope(); // pop additional ELSE IF blocks?\n                this.elseifcount = 0;\n            } else if (endtok.str == 'SUB') {\n                this.addStatement( { command: 'RETURN' }, endtok );\n                this.popScope( { command: 'END' }, 'SUB'); // fake command to avoid null\n            }\n        } else {\n            return { command:'END' };\n        }\n    }\n    stmt__ON() : ONGO_Statement {\n        var expr = this.parseExprWithType(\"number\");\n        var gotok = this.consumeToken();\n        var cmd = {GOTO:'ONGOTO', THEN:'ONGOTO', GOSUB:'ONGOSUB'}[gotok.str]; // THEN only for DEC basic?\n        if (!cmd) this.compileError(`There should be a GOTO or GOSUB here.`);\n        var labels = this.parseLabelList();\n        return { command:cmd as any, expr:expr, labels:labels };\n    }\n    stmt__DEF() : DEF_Statement {\n        var lexpr = this.parseVarSubscriptOrFunc(); // TODO: only allow parameter names, not exprs\n        if (lexpr.args && lexpr.args.length > this.opts.maxDefArgs)\n            this.compileError(`There can be no more than ${this.opts.maxDefArgs} arguments to a function or subscript.`, lexpr.$loc);\n        if (!lexpr.name.startsWith('FN')) this.compileError(`Functions defined with DEF must begin with the letters \"FN\".`, lexpr.$loc)\n        this.markVarDefs(lexpr); // local variables need to be marked as referenced (TODO: only for this scope)\n        this.expectToken(\"=\");\n        var func = this.parseExpr();\n        // build call graph to detect cycles\n        this.visitExpr(func, (expr:Expr) => {\n            if (isLookup(expr) && expr.name.startsWith('FN')) {\n                if (!this.fnrefs[lexpr.name])\n                    this.fnrefs[lexpr.name] = [];\n                this.fnrefs[lexpr.name].push(expr.name);\n            }\n        });\n        this.checkCallGraph(lexpr.name, new Set());\n        return { command:'DEF', lexpr:lexpr, def:func };\n    }\n    stmt__SUB() : SUB_Statement {\n        var lexpr = this.parseVarSubscriptOrFunc(); // TODO: only allow parameter names, not exprs\n        this.markVarDefs(lexpr); // local variables need to be marked as referenced (TODO: only for this scope)\n        this.addLabel(lexpr.name, 1); // offset +1 to skip SUB command\n        return { command:'SUB', lexpr:lexpr };\n    }\n    stmt__CALL() : CALL_Statement {\n        return { command:'CALL', call:this.parseVarSubscriptOrFunc() };\n    }\n    markVarDefs(lexpr: IndOp) {\n        this.vardefs[lexpr.name] = lexpr;\n        if (lexpr.args != null)\n            for (let arg of lexpr.args) {\n                if (isLookup(arg) && arg.args == null)\n                    this.vardefs[arg.name] = arg;\n                else\n                    this.compileError(`A definition can only define symbols, not expressions.`);\n            }\n    }\n    // detect cycles in call graph starting at function 'name'\n    checkCallGraph(name: string, visited: Set<string>) {\n        if (visited.has(name)) this.compileError(`There was a cycle in the function definition graph for ${name}.`);\n        visited.add(name);\n        var refs = this.fnrefs[name] || [];\n        for (var ref of refs)\n            this.checkCallGraph(ref, visited); // recurse\n        visited.delete(name);\n    }\n    stmt__POP() : NoArgStatement {\n        return { command:'POP' };\n    }\n    stmt__GET() : GET_Statement {\n        var lexpr = this.parseLexpr();\n        return { command:'GET', lexpr:lexpr };\n    }\n    stmt__CLEAR() : NoArgStatement {\n        return { command:'CLEAR' };\n    }\n    stmt__RANDOMIZE() : NoArgStatement {\n        return { command:'RANDOMIZE' };\n    }\n    stmt__CHANGE() : CHANGE_Statement {\n        var src = this.parseExpr();\n        this.expectToken('TO');\n        var dest = this.parseLexpr();\n        if (dest.valtype == src.valtype)\n            this.compileError(`CHANGE can only convert strings to numeric arrays, or vice-versa.`, mergeLocs(src.$loc, dest.$loc));\n        return { command:'CHANGE', src:src, dest:dest };\n    }\n    stmt__CONVERT() : CONVERT_Statement {\n        var src = this.parseExpr();\n        this.expectToken('TO');\n        var dest = this.parseLexpr();\n        if (dest.valtype == src.valtype)\n            this.compileError(`CONVERT can only convert strings to numbers, or vice-versa.`, mergeLocs(src.$loc, dest.$loc));\n        return { command:'CONVERT', src:src, dest:dest };\n    }\n    // TODO: CHANGE A TO A$ (4th edition, A(0) is len and A(1..) are chars)\n    stmt__OPTION() : OPTION_Statement {\n        this.optionCount++;\n        var tokname = this.consumeToken();\n        var optname = tokname.str.toUpperCase();\n        if (tokname.type != TokenType.Ident) this.compileError(`There must be a name after the OPTION statement.`)\n        var tokarg = this.consumeToken();\n        var arg = tokarg.str.toUpperCase();\n        switch (optname) {\n            case 'DIALECT':\n                if (this.optionCount > 1) this.compileError(`OPTION DIALECT must be the first OPTION statement in the file.`, tokname.$loc);\n                let dname = arg || \"\";\n                if (dname == \"\") this.compileError(`OPTION DIALECT requires a dialect name.`, tokname.$loc);\n                let dialect = DIALECTS[dname.toUpperCase()];\n                if (dialect) this.opts = dialect;\n                else this.compileError(`${dname} is not a valid dialect.`);\n                break;\n            case 'BASE':\n                let base = parseInt(arg);\n                if (base == 0 || base == 1) this.opts.defaultArrayBase = base;\n                else this.compileError(\"OPTION BASE can only be 0 or 1.\");\n                break;\n            case 'CPUSPEED':\n                if (!(this.opts.commandsPerSec = Math.min(1e7, arg=='MAX' ? Infinity : parseFloat(arg))))\n                    this.compileError(`OPTION CPUSPEED takes a positive number or MAX.`);\n                break;\n            default:\n                // maybe it's one of the options?\n                let propname = Object.getOwnPropertyNames(this.opts).find((n) => n.toUpperCase() == optname);\n                if (propname == null) this.compileError(`${optname} is not a valid option.`, tokname.$loc);\n                if (arg == null) this.compileError(`OPTION ${optname} requires a parameter.`);\n                switch (typeof this.opts[propname]) {\n                    case 'boolean' : this.opts[propname] = arg.toUpperCase().startsWith(\"T\") || (arg as any)>0; return;\n                    case 'number' : this.opts[propname] = parseFloat(arg); return;\n                    case 'string' : this.opts[propname] = arg; return;\n                    case 'object' :\n                        if (Array.isArray(this.opts[propname]) && arg == 'ALL') {\n                            this.opts[propname] = null;\n                            return;\n                        }\n                        this.compileError(`OPTION ${optname} ALL is the only option supported.`);\n                }\n                break;\n        }\n        return { command:'OPTION', optname:optname, optargs:[arg]}\n    }\n    \n    // for workermain\n    generateListing(file: string, program: BASICProgram) {\n        var srclines = [];\n        var laststmt : Statement;\n        program.stmts.forEach((stmt, idx) => {\n            laststmt = stmt;\n            srclines.push(stmt.$loc);\n        });\n        if (this.opts.endStmtRequired && (laststmt == null || laststmt.command != 'END'))\n            this.dialectError(`All programs must have a final END statement`);\n        return { lines: srclines };\n    }\n    getListings() : CodeListingMap {\n        return this.listings;\n    }\n\n    // LINT STUFF\n    checkAll(program : BASICProgram) {\n        this.checkLabels();\n        this.checkScopes();\n        this.checkVarRefs();\n    }\n    checkLabels() {\n        for (let targ in this.targets) {\n            if (this.labels[targ] == null) {\n                var what = this.opts.optionalLabels && isNaN(parseInt(targ)) ? \"label named\" : \"line number\";\n                this.addError(`There isn't a ${what} ${targ}.`, this.targets[targ]);\n            }\n        }\n    }\n    checkScopes() {\n        if (this.opts.compiledBlocks && this.scopestack.length) {\n            var open = this.stmts[this.scopestack.pop()];\n            var close = {FOR:\"NEXT\", WHILE:\"WEND\", IF:\"END IF\", SUB:\"END SUB\"};\n            this.compileError(`Don't forget to add a matching ${close[open.command]} statement.`, open.$loc);\n        }\n    }\n    checkVarRefs() {\n        if (!this.opts.defaultValues) {\n            for (var varname in this.varrefs) {\n                if (this.vardefs[varname] == null)\n                    this.compileError(`The variable ${varname} isn't defined anywhere in the program.`, this.varrefs[varname]);\n            }\n        }\n    }\n}\n\n///// BASIC DIALECTS\n\nexport const ECMA55_MINIMAL : BASICOptions = {\n    dialectName: \"ECMA55\",\n    asciiOnly : true,\n    uppercaseOnly : true,\n    optionalLabels : false,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : false,\n    varNaming : \"A1\",\n    staticArrays : true,\n    sharedArrayNamespace : true,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : false,\n    stringConcat : false,\n    maxDimensions : 2,\n    maxDefArgs : 255,\n    maxStringLength : 255,\n    tickComments : false,\n    hexOctalConsts : false,\n    validKeywords : [\n        'BASE','DATA','DEF','DIM','END',\n        'FOR','GO','GOSUB','GOTO','IF','INPUT','LET','NEXT','ON','OPTION','PRINT',\n        'RANDOMIZE','READ','REM','RESTORE','RETURN','STEP','STOP','THEN','TO' // 'SUB'\n    ],\n    validFunctions : [\n        'ABS','ATN','COS','EXP','INT','LOG','RND','SGN','SIN','SQR','TAB','TAN'\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^'\n    ],\n    printZoneLength : 15,\n    numericPadding : true,\n    checkOverflow : true,\n    testInitialFor : true,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : true,\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : true,\n    chainAssignments : false,\n    optionalLet : false,\n    compiledBlocks : true,\n}\n\nexport const DARTMOUTH_4TH_EDITION : BASICOptions = {\n    dialectName: \"DARTMOUTH4\",\n    asciiOnly : true,\n    uppercaseOnly : true,\n    optionalLabels : false,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : false,\n    varNaming : \"A1\",\n    staticArrays : true,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : false,\n    stringConcat : false,\n    maxDimensions : 2,\n    maxDefArgs : 255,\n    maxStringLength : 255,\n    tickComments : true,\n    hexOctalConsts : false,\n    validKeywords : [\n        'BASE','DATA','DEF','DIM','END',\n        'FOR','GO','GOSUB','GOTO','IF','INPUT','LET','NEXT','ON','OPTION','PRINT',\n        'RANDOMIZE','READ','REM','RESTORE','RETURN','STEP','STOP','THEN','TO', //'SUB',\n        'CHANGE','MAT','RANDOM','RESTORE$','RESTORE*',\n    ],\n    validFunctions : [\n        'ABS','ATN','COS','EXP','INT','LOG','RND','SGN','SIN','SQR','TAB','TAN',\n        'TRN','INV','DET','NUM','ZER', // NUM = # of strings input for MAT INPUT\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^'\n    ],\n    printZoneLength : 15,\n    numericPadding : true,\n    checkOverflow : true,\n    testInitialFor : true,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : true,\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : true,\n    chainAssignments : true,\n    optionalLet : false,\n    compiledBlocks : true,\n}\n\n// TODO: only integers supported\nexport const TINY_BASIC : BASICOptions = {\n    dialectName: \"TINY\",\n    asciiOnly : true,\n    uppercaseOnly : true,\n    optionalLabels : false,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : false,\n    varNaming : \"A\",\n    staticArrays : false,\n    sharedArrayNamespace : true,\n    defaultArrayBase : 0,\n    defaultArraySize : 0,\n    defaultValues : true,\n    stringConcat : false,\n    maxDimensions : 0,\n    maxDefArgs : 255,\n    maxStringLength : 255,\n    tickComments : false,\n    hexOctalConsts : false,\n    validKeywords : [\n        'OPTION',\n        'PRINT','IF','THEN','GOTO','INPUT','LET','GOSUB','RETURN','CLEAR','END'\n    ],\n    validFunctions : [\n    ],\n    validOperators : [\n        '=', '<>', '><', '<', '>', '<=', '>=', '+', '-', '*', '/',\n    ],\n    printZoneLength : 1,\n    numericPadding : false,\n    checkOverflow : false,\n    testInitialFor : false,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : false,\n    computedGoto : true,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false,\n    optionalLet : false,\n    compiledBlocks : false,\n}\n\nexport const HP_TIMESHARED_BASIC : BASICOptions = {\n    dialectName: \"HP2000\",\n    asciiOnly : true,\n    uppercaseOnly : true, // the terminal is usually uppercase\n    optionalLabels : false,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : true,\n    varNaming : \"A1$\",\n    staticArrays : true,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 1,\n    defaultArraySize : 11,\n    defaultValues : false,\n    stringConcat : false,\n    maxDimensions : 2,\n    maxDefArgs : 255,\n    maxStringLength : 255, // 72 for literals\n    tickComments : false, // TODO: HP BASIC has 'hh char constants\n    hexOctalConsts : false,\n    validKeywords : [\n        'BASE','DATA','DEF','DIM','END',\n        'FOR','GO','GOSUB','GOTO','IF','INPUT','LET','NEXT','OPTION','PRINT',\n        'RANDOMIZE','READ','REM','RESTORE','RETURN','STEP','STOP','THEN','TO', //'SUB',\n        'ENTER','MAT','CONVERT','OF','IMAGE','USING'\n    ],\n    validFunctions : [\n        'ABS','ATN','BRK','COS','CTL','EXP','INT','LEN','LIN','LOG','NUM',\n        'POS','RND','SGN','SIN','SPA','SQR','TAB','TAN','TIM','TYP','UPS$', // TODO: POS,\n        'NFORMAT$', // non-standard, substitute for PRINT USING\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^',\n        '**', '#', 'NOT', 'AND', 'OR', 'MIN', 'MAX',\n    ],\n    printZoneLength : 15,\n    numericPadding : true,\n    checkOverflow : false,\n    testInitialFor : true,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : false,\n    computedGoto : true, // not really, but we do parse expressions for GOTO ... OF \n    restoreWithLabel : true,\n    squareBrackets : true,\n    arraysContainChars : true,\n    endStmtRequired : true,\n    chainAssignments : true,\n    optionalLet : true,\n    compiledBlocks : true,\n    maxArrayElements : 5000,\n    // TODO: max line number\n}\n\nexport const DEC_BASIC_11 : BASICOptions = {\n    dialectName: \"DEC11\",\n    asciiOnly : true,\n    uppercaseOnly : true, // translates all lower to upper\n    optionalLabels : false,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : false, // actually \"\\\"\n    varNaming : \"A1\",\n    staticArrays : true,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : true,\n    stringConcat : true, // can also use &\n    maxDimensions : 2,\n    maxDefArgs : 255, // ?\n    maxStringLength : 255,\n    tickComments : false,\n    hexOctalConsts : false,\n    validKeywords : [\n        'OPTION',\n        'DATA','DEF','DIM','END','FOR','STEP','GOSUB','GOTO','GO','TO',\n        'IF','THEN','INPUT','LET','NEXT','ON','PRINT','RANDOMIZE',\n        'READ','REM','RESET','RESTORE','RETURN','STOP',\n    ],\n    validFunctions : [\n        'ABS','ATN','COS','EXP','INT','LOG','LOG10','PI','RND','SGN','SIN','SQR','TAB',\n        'ASC','BIN','CHR$','CLK$','DAT$','LEN','OCT','POS','SEG$','STR$','TRM$','VAL',\n        'NFORMAT$', // non-standard, substitute for PRINT USING\n    ],\n    validOperators : [\n        '=', '<>', '><', '<', '>', '<=', '>=', '+', '-', '*', '/', '^',\n    ],\n    printZoneLength : 14,\n    numericPadding : true,\n    checkOverflow : true, // non-fatal; subst 0 and continue\n    testInitialFor : true,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : true, // might continue\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false,\n    optionalLet : true,\n    compiledBlocks : true,\n    // TODO: max line number 32767\n    // TODO: \\ separator, % int vars and constants, 'single' quoted\n    // TODO: can't compare strings and numbers\n}\n\nexport const DEC_BASIC_PLUS : BASICOptions = {\n    dialectName: \"DECPLUS\",\n    asciiOnly : true,\n    uppercaseOnly : false,\n    optionalLabels : false,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : true,\n    varNaming : \"A1\",\n    staticArrays : true,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : true,\n    stringConcat : true, // can also use \"&\"\n    maxDimensions : 2,\n    maxDefArgs : 255, // ?\n    maxStringLength : 255,\n    tickComments : true, // actually use \"!\"\n    hexOctalConsts : false,\n    validKeywords : [\n        'OPTION',\n        'REM','LET','DIM','RANDOM','RANDOMIZE','IF','THEN','ELSE',\n        'FOR','TO','STEP','WHILE','UNTIL','NEXT','DEF','ON','GOTO','GOSUB',\n        'RETURN','CHANGE','READ','DATA','RESTORE','PRINT','USING',\n        'INPUT','LINE','NAME','AS','ERROR','RESUME','CHAIN','STOP','END',\n        'MAT','UNLESS','SLEEP','WAIT',\n    ],\n    validFunctions : [\n        'ABS','ATN','COS','EXP','INT','LOG','LOG10','PI','RND','SGN','SIN','SQR','TAB','TAN',\n        'POS','TAB','ASCII','CHR$','CVT%$','CVTF$','CVT$%','CVT$F',\n        'LEFT$','RIGHT$','MID$','LEN','INSTR','SPACE$','NUM$','VAL','XLATE',\n        'DATE$','TIME$','TIME','ERR','ERL','SWAP%','RAD$',\n        'NFORMAT$', // non-standard, substitute for PRINT USING\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^',\n        '**', '==',\n        'NOT', 'AND', 'OR', 'XOR', 'IMP', 'EQV',\n    ],\n    printZoneLength : 14,\n    numericPadding : true,\n    checkOverflow : true, // non-fatal; subst 0 and continue\n    testInitialFor : true,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : true, // might continue\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false, // TODO: can chain with \",\" not \"=\"\n    optionalLet : true,\n    compiledBlocks : true,\n    // TODO: max line number 32767\n    // TODO: \\ separator, % int vars and constants, 'single' quoted\n    // TODO: can't compare strings and numbers\n    // TODO: WHILE/UNTIL/FOR extra statements, etc\n}\n\nexport const BASICODE : BASICOptions = {\n    dialectName: \"BASICODE\",\n    asciiOnly : true,\n    uppercaseOnly : false,\n    optionalLabels : false,\n    optionalWhitespace : true,\n    multipleStmtsPerLine : true,\n    varNaming : \"AA\",\n    staticArrays : true,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : false,\n    stringConcat : true,\n    maxDimensions : 2,\n    maxDefArgs : 255,\n    maxStringLength : 255,\n    tickComments : false,\n    hexOctalConsts : false,\n    validKeywords : [\n        'BASE','DATA','DEF','DIM','END',\n        'FOR','GO','GOSUB','GOTO','IF','INPUT','LET','NEXT','ON','OPTION','PRINT',\n        'READ','REM','RESTORE','RETURN','STEP','STOP','THEN','TO', // 'SUB',\n        'AND', 'NOT', 'OR'\n    ],\n    validFunctions : [\n        'ABS','ASC','ATN','CHR$','COS','EXP','INT','LEFT$','LEN','LOG',    \n        'MID$','RIGHT$','SGN','SIN','SQR','TAB','TAN','VAL'\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^', 'AND', 'NOT', 'OR'\n    ],\n    printZoneLength : 15,\n    numericPadding : true,\n    checkOverflow : true,\n    testInitialFor : true,\n    optionalNextVar : false,\n    multipleNextVars : false,\n    bitwiseLogic : false,\n    checkOnGotoIndex : true,\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false,\n    optionalLet : true,\n    compiledBlocks : false,\n}\n\nexport const ALTAIR_BASIC41 : BASICOptions = {\n    dialectName: \"ALTAIR41\",\n    asciiOnly : true,\n    uppercaseOnly : true,\n    optionalLabels : false,\n    optionalWhitespace : true,\n    multipleStmtsPerLine : true,\n    varNaming : \"*\", // or AA\n    staticArrays : false,\n    sharedArrayNamespace : true,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : true,\n    stringConcat : true,\n    maxDimensions : 128, // \"as many as will fit on a single line\" ... ?\n    maxDefArgs : 255,\n    maxStringLength : 255,\n    tickComments : false,\n    hexOctalConsts : false,\n    validKeywords : [\n        'OPTION',\n        'CONSOLE','DATA','DEF','DEFUSR','DIM','END','ERASE','ERROR',\n        'FOR','GOTO','GOSUB','IF','THEN','ELSE','INPUT','LET','LINE',\n        'PRINT','LPRINT','USING','NEXT','ON','OUT','POKE',\n        'READ','REM','RESTORE','RESUME','RETURN','STOP','SWAP',\n        'TROFF','TRON','WAIT',\n        'TO','STEP',\n        'AND', 'NOT', 'OR', 'XOR', 'IMP', 'EQV', 'MOD',\n        'RANDOMIZE' // not in Altair BASIC, but we add it anyway\n    ],\n    validFunctions : [\n        'ABS','ASC','ATN','CDBL','CHR$','CINT','COS','ERL','ERR',\n        'EXP','FIX','FRE','HEX$','INP','INSTR','INT',\n        'LEFT$','LEN','LOG','LPOS','MID$',\n        'OCT$','POS','RIGHT$','RND','SGN','SIN','SPACE$','SPC',\n        'SQR','STR$','STRING$','TAB','TAN','USR','VAL','VARPTR'\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^', '\\\\',\n        'AND', 'NOT', 'OR', 'XOR', 'IMP', 'EQV', 'MOD'\n    ],\n    printZoneLength : 15,\n    numericPadding : true,\n    checkOverflow : true,\n    testInitialFor : false,\n    optionalNextVar : true,\n    multipleNextVars : true,\n    bitwiseLogic : true,\n    checkOnGotoIndex : false,\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false,\n    optionalLet : true,\n    compiledBlocks : false,\n}\n\nexport const APPLESOFT_BASIC : BASICOptions = {\n    dialectName: \"APPLESOFT\",\n    asciiOnly : true,\n    uppercaseOnly : false,\n    optionalLabels : false,\n    optionalWhitespace : true,\n    multipleStmtsPerLine : true,\n    varNaming : \"*\", // or AA\n    staticArrays : false,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : true,\n    stringConcat : true,\n    maxDimensions : 88,\n    maxDefArgs : 1, // TODO: no string FNs\n    maxStringLength : 255,\n    tickComments : false,\n    hexOctalConsts : false,\n    validKeywords : [\n        'OPTION',\n        'CLEAR','LET','DIM','DEF','GOTO','GOSUB','RETURN','ON','POP',\n        'FOR','NEXT','IF','THEN','END','STOP','ONERR','RESUME',\n        'PRINT','INPUT','GET','HOME','HTAB','VTAB',\n        'INVERSE','FLASH','NORMAL','TEXT',\n        'GR','COLOR','PLOT','HLIN','VLIN',\n        'HGR','HGR2','HPLOT','HCOLOR','AT',\n        'DATA','READ','RESTORE',\n        'REM','TRACE','NOTRACE',\n        'TO','STEP',\n        'AND', 'NOT', 'OR'\n    ],\n    validFunctions : [\n        'ABS','ATN','COS','EXP','INT','LOG','RND','SGN','SIN','SQR','TAN',\n        'LEN','LEFT$','MID$','RIGHT$','STR$','VAL','CHR$','ASC',\n        'FRE','SCRN','PDL','PEEK','POS'\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^',\n        'AND', 'NOT', 'OR'\n    ],\n    printZoneLength : 16,\n    numericPadding : false,\n    checkOverflow : true,\n    testInitialFor : false,\n    optionalNextVar : true,\n    multipleNextVars : true,\n    bitwiseLogic : false,\n    checkOnGotoIndex : false,\n    computedGoto : false,\n    restoreWithLabel : false,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false,\n    optionalLet : true,\n    compiledBlocks : false,\n}\n\nexport const BASIC80 : BASICOptions = {\n    dialectName: \"BASIC80\",\n    asciiOnly : true,\n    uppercaseOnly : false,\n    optionalLabels : false,\n    optionalWhitespace : true,\n    multipleStmtsPerLine : true,\n    varNaming : \"*\",\n    staticArrays : false,\n    sharedArrayNamespace : true,\n    defaultArrayBase : 0,\n    defaultArraySize : 11,\n    defaultValues : true,\n    stringConcat : true,\n    maxDimensions : 255,\n    maxDefArgs : 255,\n    maxStringLength : 255,\n    //maxElements : 32767, // TODO\n    tickComments : true,\n    hexOctalConsts : true,\n    validKeywords : [\n        'OPTION',\n        'CONSOLE','DATA','DEF','DEFUSR','DIM','END','ERASE','ERROR',\n        'FOR','GOTO','GOSUB','IF','THEN','ELSE','INPUT','LET','LINE',\n        'PRINT','LPRINT','USING','NEXT','ON','OUT','POKE',\n        'READ','REM','RESTORE','RESUME','RETURN','STOP','SWAP',\n        'TROFF','TRON','WAIT',\n        'CALL','CHAIN','COMMON','WHILE','WEND','WRITE','RANDOMIZE',\n        'TO','STEP',\n        'AND', 'NOT', 'OR', 'XOR', 'IMP', 'EQV', 'MOD'\n    ],\n    validFunctions : [\n        'ABS','ASC','ATN','CDBL','CHR$','CINT','COS','CSNG','CVI','CVS','CVD',\n        'EOF','EXP','FIX','FRE','HEX$','INP','INPUT$','INSTR','INT',\n        'LEFT$','LEN','LOC','LOG','LPOS','MID$','MKI$','MKS$','MKD$',\n        'OCT$','PEEK','POS','RIGHT$','RND','SGN','SIN','SPACE$','SPC',\n        'SQR','STR$','STRING$','TAB','TAN','USR','VAL','VARPTR'\n    ],\n    validOperators : [\n        '=', '<>', '<', '>', '<=', '>=', '+', '-', '*', '/', '^', '\\\\',\n        'AND', 'NOT', 'OR', 'XOR', 'IMP', 'EQV', 'MOD'\n    ],\n    printZoneLength : 14,\n    numericPadding : true,\n    checkOverflow : false, // TODO: message displayed when overflow, division by zero = ok\n    testInitialFor : true,\n    optionalNextVar : true,\n    multipleNextVars : true,\n    bitwiseLogic : true,\n    checkOnGotoIndex : false,\n    computedGoto : false,\n    restoreWithLabel : true,\n    squareBrackets : false,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : false,\n    optionalLet : true,\n    compiledBlocks : false,\n}\n\nexport const MODERN_BASIC : BASICOptions = {\n    dialectName: \"MODERN\",\n    asciiOnly : false,\n    uppercaseOnly : false,\n    optionalLabels : true,\n    optionalWhitespace : false,\n    multipleStmtsPerLine : true,\n    varNaming : \"*\",\n    staticArrays : false,\n    sharedArrayNamespace : false,\n    defaultArrayBase : 0,\n    defaultArraySize : 0, // DIM required\n    defaultValues : false,\n    stringConcat : true,\n    maxDimensions : 255,\n    maxDefArgs : 255,\n    maxStringLength : 2048, // TODO?\n    tickComments : true,\n    hexOctalConsts : true,\n    validKeywords : null, // all\n    validFunctions : null, // all\n    validOperators : null, // all\n    printZoneLength : 16,\n    numericPadding : false,\n    checkOverflow : true,\n    testInitialFor : true,\n    optionalNextVar : true,\n    multipleNextVars : true,\n    bitwiseLogic : true,\n    checkOnGotoIndex : true,\n    computedGoto : false,\n    restoreWithLabel : true,\n    squareBrackets : true,\n    arraysContainChars : false,\n    endStmtRequired : false,\n    chainAssignments : true,\n    optionalLet : true,\n    compiledBlocks : true,\n    multilineIfThen : true,\n}\n\n// TODO: integer vars\n// TODO: DEFINT/DEFSTR\n// TODO: excess INPUT ignored, error msg\n// TODO: out of order line numbers\n\ntype BuiltinFunctionDef = [string, ValueType[], ValueType];\n\nconst BUILTIN_DEFS : BuiltinFunctionDef[] = [\n    ['ABS', ['number'], 'number' ],\n    ['ASC', ['string'], 'number' ],\n    ['ATN', ['number'], 'number' ],\n    ['CHR$', ['number'], 'string' ],\n    ['CINT', ['number'], 'number' ],\n    ['COS', ['number'], 'number' ],\n    ['COT', ['number'], 'number' ],\n    ['CTL', ['number'], 'string' ],\n    ['EXP', ['number'], 'number' ],\n    ['FIX', ['number'], 'number' ],\n    ['HEX$', ['number'], 'string' ],\n    ['INSTR', ['number', 'string', 'string'], 'number' ],\n    ['INSTR', ['string', 'string'], 'number' ],\n    ['INT', ['number'], 'number' ],\n    ['LEFT$', ['string', 'number'], 'string' ],\n    ['LEN', ['string'], 'number' ],\n    ['LIN', ['number'], 'string' ],\n    ['LOG', ['number'], 'number' ],\n    ['LOG10', ['number'], 'number' ],\n    ['MID$', ['string', 'number'], 'string'],\n    ['MID$', ['string', 'number', 'number'], 'string'],\n    ['OCT$', ['number'], 'string' ],\n    ['PI', [], 'number'],\n    ['POS', ['number'], 'number' ], // arg ignored\n    ['POS', ['string','string'], 'number' ], // HP POS\n    ['RIGHT$', ['string', 'number'], 'string' ],\n    ['RND', [], 'number' ],\n    ['RND', ['number'], 'number' ],\n    ['ROUND', ['number'], 'number' ],\n    ['SGN', ['number'], 'number' ],\n    ['SIN', ['number'], 'number' ],\n    ['SPACE$', ['number'], 'string' ],\n    ['SPC', ['number'], 'string' ],\n    ['SQR', ['number'], 'number' ],\n    ['STR$', ['number'], 'string' ],\n    ['STRING$', ['number', 'number'], 'string'],\n    ['STRING$', ['number', 'string'], 'string'],\n    ['TAB', ['number'], 'string' ],\n    ['TAN', ['number'], 'number' ],\n    ['TIM', ['number'], 'number' ], // only HP BASIC?\n    ['TIMER', [], 'number' ],\n    ['UPS$', ['string'], 'string' ],\n    ['VAL', ['string'], 'number' ],\n    ['LPAD$', ['string', 'number'], 'string' ],\n    ['RPAD$', ['string', 'number'], 'string' ],\n    ['NFORMAT$', ['number', 'number'], 'string' ],\n];\n\nvar BUILTIN_MAP : { [name:string] : {args:ValueType[], result:ValueType}[] } = {};\nBUILTIN_DEFS.forEach( (def, idx) => {\n    let [name, args, result] = def;\n    if (!BUILTIN_MAP[name]) BUILTIN_MAP[name] = [];\n    BUILTIN_MAP[name].push({args: args, result: result});\n});\n\nexport const DIALECTS = {\n    \"DEFAULT\":      MODERN_BASIC,\n    \"DARTMOUTH\":    DARTMOUTH_4TH_EDITION,\n    \"DARTMOUTH4\":   DARTMOUTH_4TH_EDITION,\n    \"ALTAIR\":       ALTAIR_BASIC41,\n    \"ALTAIR4\":      ALTAIR_BASIC41,\n    \"ALTAIR41\":     ALTAIR_BASIC41,\n    \"TINY\":         TINY_BASIC,\n    \"ECMA55\":       ECMA55_MINIMAL,\n    \"MINIMAL\":      ECMA55_MINIMAL,\n    \"HP\":           HP_TIMESHARED_BASIC,\n    \"HPB\":          HP_TIMESHARED_BASIC,\n    \"HPTSB\":        HP_TIMESHARED_BASIC,\n    \"HP2000\":       HP_TIMESHARED_BASIC,\n    \"HPBASIC\":      HP_TIMESHARED_BASIC,\n    \"HPACCESS\":     HP_TIMESHARED_BASIC,\n    \"DEC11\":        DEC_BASIC_11,\n    \"DEC\":          DEC_BASIC_PLUS,\n    \"DECPLUS\":      DEC_BASIC_PLUS,\n    \"BASICPLUS\":    DEC_BASIC_PLUS,\n    \"BASICODE\":     BASICODE,\n    \"APPLESOFT\":    APPLESOFT_BASIC,\n    \"BASIC80\":      BASIC80,\n    \"MODERN\":       MODERN_BASIC,\n};\n", "import { Segment, CodeListingMap, WorkerResult, WorkerError } from \"../../common/workertypes\";\nimport { BuildStep, BuildStepResult, setupRequireFunction, load, emglobal, getWorkFileAsString, loadNative, gatherFiles, staleFiles, msvcErrorMatcher, moduleInstFn, setupFS, populateFiles, execMain, putWorkFile, anyTargetChanged, parseListing, print_fn, makeErrorMatcher, populateExtraFiles } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\"\nimport * as basic_compiler from '../../common/basic/compiler';\nimport { parseXMLPoorly } from \"../../common/util\";\n\nexport function translateShowdown(step: BuildStep): BuildStepResult {\n    setupRequireFunction();\n    load(\"showdown.min\");\n    var showdown = emglobal['showdown'];\n    var converter = new showdown.Converter({\n        tables: 'true',\n        smoothLivePreview: 'true',\n        requireSpaceBeforeHeadingText: 'true',\n        emoji: 'true',\n    });\n    var code = getWorkFileAsString(step.path);\n    var html = converter.makeHtml(code);\n    delete emglobal['require'];\n    return {\n        output: html\n    };\n}\n\nexport function compileInform6(step: BuildStep): BuildStepResult {\n    loadNative(\"inform\");\n    var errors = [];\n    gatherFiles(step, { mainFilePath: \"main.inf\" });\n    var objpath = step.prefix + \".z5\";\n    if (staleFiles(step, [objpath])) {\n        var errorMatcher = msvcErrorMatcher(errors);\n        var lstout = \"\";\n        var match_fn = (s: string) => {\n            if (s.indexOf(\"Error:\") >= 0) {\n                errorMatcher(s);\n            } else {\n                lstout += s;\n                lstout += \"\\n\";\n            }\n        }\n        // TODO: step.path must end in '.inf' or error\n        var args = ['-afjnops', '-v5', '-Cu', '-E1', '-k', '+/share/lib', step.path];\n        var inform: EmscriptenModule = emglobal.inform({\n            instantiateWasm: moduleInstFn('inform'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: match_fn,\n            printErr: match_fn,\n        });\n        var FS = inform.FS;\n        setupFS(FS, 'inform');\n        populateFiles(step, FS);\n        //fixParamsWithDefines(step.path, step.params);\n        execMain(step, inform, args);\n        if (errors.length)\n            return { errors: errors };\n        var objout = FS.readFile(objpath, { encoding: 'binary' });\n        putWorkFile(objpath, objout);\n        if (!anyTargetChanged(step, [objpath]))\n            return;\n\n        // parse debug XML\n        var symbolmap = {};\n        var segments: Segment[] = [];\n        var entitymap = {\n            // number -> string\n            'object': {}, 'property': {}, 'attribute': {}, 'constant': {}, 'global-variable': {}, 'routine': {},\n        };\n        var dbgout = FS.readFile(\"gameinfo.dbg\", { encoding: 'utf8' });\n        var xmlroot = parseXMLPoorly(dbgout);\n        //console.log(xmlroot);\n        var segtype = \"ram\";\n        xmlroot.children.forEach((node) => {\n            switch (node.type) {\n                case 'global-variable':\n                case 'routine':\n                    var ident = node.children.find((c, v) => c.type == 'identifier').text;\n                    var address = parseInt(node.children.find((c, v) => c.type == 'address').text);\n                    symbolmap[ident] = address;\n                    entitymap[node.type][address] = ident;\n                    break;\n                case 'object':\n                case 'property':\n                case 'attribute':\n                    var ident = node.children.find((c, v) => c.type == 'identifier').text;\n                    var value = parseInt(node.children.find((c, v) => c.type == 'value').text);\n                    //entitymap[node.type][ident] = value;\n                    entitymap[node.type][value] = ident;\n                    //symbolmap[ident] = address | 0x1000000;\n                    break;\n                case 'story-file-section':\n                    var name = node.children.find((c, v) => c.type == 'type').text;\n                    var address = parseInt(node.children.find((c, v) => c.type == 'address').text);\n                    var endAddress = parseInt(node.children.find((c, v) => c.type == 'end-address').text);\n                    if (name == \"grammar table\") segtype = \"rom\";\n                    segments.push({ name: name, start: address, size: endAddress - address, type: segtype });\n            }\n        });\n        // parse listing\n        var listings: CodeListingMap = {};\n        //    35  +00015 <*> call_vs      long_19 location long_424 -> sp \n        var lines = parseListing(lstout, /\\s*(\\d+)\\s+[+]([0-9a-f]+)\\s+([<*>]*)\\s*(\\w+)\\s+(.+)/i, -1, 2, 4);\n        var lstpath = step.prefix + '.lst';\n        listings[lstpath] = { lines: [], asmlines: lines, text: lstout };\n        return {\n            output: objout, //.slice(0),\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments,\n            debuginfo: entitymap,\n        };\n    }\n}\n\nexport function compileBASIC(step: BuildStep): WorkerResult {\n    var jsonpath = step.path + \".json\";\n    gatherFiles(step);\n    if (staleFiles(step, [jsonpath])) {\n        var parser = new basic_compiler.BASICParser();\n        var code = getWorkFileAsString(step.path);\n        try {\n            var ast = parser.parseFile(code, step.path);\n        } catch (e) {\n            console.log(e);\n            if (parser.errors.length == 0) throw e;\n        }\n        if (parser.errors.length) {\n            return { errors: parser.errors };\n        }\n        // put AST into JSON (sans source locations) to see if it has changed\n        var json = JSON.stringify(ast, (key, value) => { return (key == '$loc' ? undefined : value) });\n        putWorkFile(jsonpath, json);\n        if (anyTargetChanged(step, [jsonpath])) return {\n            output: ast,\n            listings: parser.getListings(),\n        };\n    }\n}\n\nexport function compileWiz(step: BuildStep): WorkerResult {\n    loadNative(\"wiz\");\n    var params = step.params;\n    gatherFiles(step, { mainFilePath: \"main.wiz\" });\n    var destpath = step.prefix + (params.wiz_rom_ext || \".bin\");\n    var errors: WorkerError[] = [];\n    if (staleFiles(step, [destpath])) {\n        var wiz: EmscriptenModule = emglobal.wiz({\n            instantiateWasm: moduleInstFn('wiz'),\n            noInitialRun: true,\n            print: print_fn,\n            //test.wiz:2: error: expected statement, but got identifier `test`\n            printErr: makeErrorMatcher(errors, /(.+?):(\\d+):\\s*(.+)/, 2, 3, step.path, 1),\n        });\n        var FS = wiz.FS;\n        setupFS(FS, 'wiz');\n        populateFiles(step, FS);\n        populateExtraFiles(step, FS, params.extra_compile_files);\n        const FWDIR = '/share/common';\n        var args = [\n            '-o', destpath,\n            '-I', FWDIR + '/' + (params.wiz_inc_dir || step.platform),\n            '-s', 'wla',\n            '--color=none',\n            step.path];\n        args.push('--system', params.wiz_sys_type || params.arch);\n        execMain(step, wiz, args);\n        if (errors.length)\n            return { errors: errors };\n        var binout = FS.readFile(destpath, { encoding: 'binary' });\n        putWorkFile(destpath, binout);\n        var dbgout = FS.readFile(step.prefix + '.sym', { encoding: 'utf8' });\n        var symbolmap = {};\n        for (var s of dbgout.split(\"\\n\")) {\n            var toks = s.split(/ /);\n            // 00:4008 header.basic_start\n            if (toks && toks.length >= 2) {\n                var tokrange = toks[0].split(':');\n                var start = parseInt(tokrange[1], 16);\n                var sym = toks[1];\n                symbolmap[sym] = start;\n            }\n        }\n        return {\n            output: binout, //.slice(0),\n            errors: errors,\n            symbolmap: symbolmap,\n        };\n    }\n}\n\n", "\nimport { getRootBasePlatform } from \"../../common/util\";\nimport { CodeListingMap, WorkerError } from \"../../common/workertypes\";\nimport { re_crlf, BuildStepResult, anyTargetChanged, execMain, gatherFiles, msvcErrorMatcher, populateEntry, populateExtraFiles, populateFiles, print_fn, putWorkFile, setupFS, staleFiles, BuildStep, emglobal, loadNative, moduleInstFn, fixParamsWithDefines, store, makeErrorMatcher } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\"\n\n\n/*\n000000r 1               .segment        \"CODE\"\n000000r 1               .proc\t_rasterWait: near\n000000r 1               ; int main() { return mul2(2); }\n000000r 1                       .dbg    line, \"main.c\", 3\n000014r 1                      \t.dbg\t  func, \"main\", \"00\", extern, \"_main\"\n000000r 1  A2 00                ldx     #$00\n00B700  1               BOOT2:\n00B700  1  A2 01         ldx #1 ;track\n00B725  1  00           IBLASTDRVN: .byte 0\n00B726  1  xx xx        IBSECSZ: .res 2\n00BA2F  1  2A 2B E8 2C   HEX \"2A2BE82C2D2E2F303132F0F133343536\"\n*/\nfunction parseCA65Listing(code: string, symbols, params, dbg: boolean) {\n    var segofs = 0;\n    var offset = 0;\n    var dbgLineMatch = /^([0-9A-F]+)([r]?)\\s+(\\d+)\\s+[.]dbg\\s+(\\w+), \"([^\"]+)\", (.+)/;\n    var funcLineMatch = /\"(\\w+)\", (\\w+), \"(\\w+)\"/;\n    var insnLineMatch = /^([0-9A-F]+)([r]?)\\s{1,2}(\\d+)\\s{1,2}([0-9A-Frx ]{11})\\s+(.*)/;\n    var segMatch = /[.]segment\\s+\"(\\w+)\"/i;\n    var lines = [];\n    var linenum = 0;\n    // TODO: only does .c functions, not all .s files\n    for (var line of code.split(re_crlf)) {\n        var dbgm = dbgLineMatch.exec(line);\n        if (dbgm && dbgm[1]) {\n            var dbgtype = dbgm[4];\n            offset = parseInt(dbgm[1], 16);\n            if (dbgtype == 'func') {\n                var funcm = funcLineMatch.exec(dbgm[6]);\n                if (funcm) {\n                    var funcofs = symbols[funcm[3]];\n                    if (typeof funcofs === 'number') {\n                        segofs = funcofs - offset;\n                        //console.log(funcm[3], funcofs, '-', offset);\n                    }\n                }\n            }\n        }\n        if (dbg && dbgm && dbgtype == 'line') {\n            //console.log(dbgm[6], offset, segofs);\n            lines.push({\n                // TODO: sourcefile\n                line: parseInt(dbgm[6]),\n                offset: offset + segofs,\n                insns: null\n            });\n        }\n        var linem = insnLineMatch.exec(line);\n        var topfile = linem && linem[3] == '1';\n        if (topfile) linenum++;\n        if (topfile && linem[1]) {\n            var offset = parseInt(linem[1], 16);\n            var insns = linem[4].trim();\n            if (insns.length) {\n                // take back one to honor the long .byte line\n                if (linem[5].length == 0) {\n                    linenum--;\n                } else if (!dbg) {\n                    lines.push({\n                        line: linenum,\n                        offset: offset + segofs,\n                        insns: insns,\n                        iscode: true // TODO: can't really tell unless we parse it\n                    });\n                }\n            } else {\n                var sym = linem[5];\n                var segm = sym && segMatch.exec(sym);\n                if (segm && segm[1]) {\n                    var symofs = symbols['__' + segm[1] + '_RUN__'];\n                    if (typeof symofs === 'number') {\n                        segofs = symofs;\n                        //console.log(sym, segofs, symofs, '-', offset);\n                    }\n                } else if (sym.endsWith(':') && !sym.startsWith('@')) {\n                    var symofs = symbols[sym.substring(0, sym.length - 1)];\n                    if (typeof symofs === 'number') {\n                        segofs = symofs - offset;\n                        //console.log(sym, segofs, symofs, '-', offset);\n                    }\n                }\n            }\n        }\n    }\n    return lines;\n}\n\nexport function assembleCA65(step: BuildStep): BuildStepResult {\n    loadNative(\"ca65\");\n    var errors = [];\n    gatherFiles(step, { mainFilePath: \"main.s\" });\n    var objpath = step.prefix + \".o\";\n    var lstpath = step.prefix + \".lst\";\n    if (staleFiles(step, [objpath, lstpath])) {\n        var objout, lstout;\n        var CA65: EmscriptenModule = emglobal.ca65({\n            instantiateWasm: moduleInstFn('ca65'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: print_fn,\n            printErr: makeErrorMatcher(errors, /(.+?):(\\d+): (.+)/, 2, 3, step.path, 1),\n        });\n        var FS = CA65.FS;\n        setupFS(FS, '65-' + getRootBasePlatform(step.platform));\n        populateFiles(step, FS);\n        fixParamsWithDefines(step.path, step.params);\n        var args = ['-v', '-g', '-I', '/share/asminc', '-o', objpath, '-l', lstpath, step.path];\n        args.unshift.apply(args, [\"-D\", \"__8BITWORKSHOP__=1\"]);\n        if (step.mainfile) {\n            args.unshift.apply(args, [\"-D\", \"__MAIN__=1\"]);\n        }\n        execMain(step, CA65, args);\n        if (errors.length)\n            return { errors: errors };\n        objout = FS.readFile(objpath, { encoding: 'binary' });\n        lstout = FS.readFile(lstpath, { encoding: 'utf8' });\n        putWorkFile(objpath, objout);\n        putWorkFile(lstpath, lstout);\n    }\n    return {\n        linktool: \"ld65\",\n        files: [objpath, lstpath],\n        args: [objpath]\n    };\n}\n\nexport function linkLD65(step: BuildStep): BuildStepResult {\n    loadNative(\"ld65\");\n    var params = step.params;\n    gatherFiles(step);\n    var binpath = \"main\";\n    if (staleFiles(step, [binpath])) {\n        var errors = [];\n        var LD65: EmscriptenModule = emglobal.ld65({\n            instantiateWasm: moduleInstFn('ld65'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: print_fn,\n            printErr: function (s) { errors.push({ msg: s, line: 0 }); }\n        });\n        var FS = LD65.FS;\n        setupFS(FS, '65-' + getRootBasePlatform(step.platform));\n        populateFiles(step, FS);\n        populateExtraFiles(step, FS, params.extra_link_files);\n        // populate .cfg file, if it is a custom one\n        if (store.hasFile(params.cfgfile)) {\n            populateEntry(FS, params.cfgfile, store.getFileEntry(params.cfgfile), null);\n        }\n        var libargs = params.libargs || [];\n        var cfgfile = params.cfgfile;\n        var args = ['--cfg-path', '/share/cfg',\n            '--lib-path', '/share/lib',\n            '-C', cfgfile,\n            '-Ln', 'main.vice',\n            //'--dbgfile', 'main.dbg', // TODO: get proper line numbers\n            '-o', 'main', '-m', 'main.map'].concat(step.args, libargs);\n        //console.log(args);\n        execMain(step, LD65, args);\n        if (errors.length)\n            return { errors: errors };\n        var aout = FS.readFile(\"main\", { encoding: 'binary' });\n        var mapout = FS.readFile(\"main.map\", { encoding: 'utf8' });\n        var viceout = FS.readFile(\"main.vice\", { encoding: 'utf8' });\n        //var dbgout = FS.readFile(\"main.dbg\", {encoding:'utf8'});\n        putWorkFile(\"main\", aout);\n        putWorkFile(\"main.map\", mapout);\n        putWorkFile(\"main.vice\", viceout);\n        // return unchanged if no files changed\n        if (!anyTargetChanged(step, [\"main\", \"main.map\", \"main.vice\"]))\n            return;\n        // parse symbol map (TODO: omit segments, constants)\n        var symbolmap = {};\n        for (var s of viceout.split(\"\\n\")) {\n            var toks = s.split(\" \");\n            if (toks[0] == 'al') {\n                let ident = toks[2].substr(1);\n                if (ident.length != 5 || !ident.startsWith('L')) { // no line numbers\n                    let ofs = parseInt(toks[1], 16);\n                    symbolmap[ident] = ofs;\n                }\n            }\n        }\n        // build segment map\n        var seg_re = /^__(\\w+)_SIZE__$/;\n        // TODO: move to Platform class\n        var segments = [];\n        segments.push({ name: 'CPU Stack', start: 0x100, size: 0x100, type: 'ram' });\n        segments.push({ name: 'CPU Vectors', start: 0xfffa, size: 0x6, type: 'rom' });\n        // TODO: CHR, banks, etc\n        for (let ident in symbolmap) {\n            let m = seg_re.exec(ident);\n            if (m) {\n                let seg = m[1];\n                let segstart = symbolmap['__' + seg + '_RUN__'] || symbolmap['__' + seg + '_START__'];\n                let segsize = symbolmap['__' + seg + '_SIZE__'];\n                let seglast = symbolmap['__' + seg + '_LAST__'];\n                if (segstart >= 0 && segsize > 0 && !seg.startsWith('PRG') && seg != 'RAM') { // TODO\n                    var type = null;\n                    if (seg.startsWith('CODE') || seg == 'STARTUP' || seg == 'RODATA' || seg.endsWith('ROM')) type = 'rom';\n                    else if (seg == 'ZP' || seg == 'DATA' || seg == 'BSS' || seg.endsWith('RAM')) type = 'ram';\n                    segments.push({ name: seg, start: segstart, size: segsize, last: seglast, type: type });\n                }\n            }\n        }\n        // build listings\n        var listings: CodeListingMap = {};\n        for (var fn of step.files) {\n            if (fn.endsWith('.lst')) {\n                var lstout = FS.readFile(fn, { encoding: 'utf8' });\n                lstout = lstout.split('\\n\\n')[1] || lstout; // remove header\n                var asmlines = parseCA65Listing(lstout, symbolmap, params, false);\n                var srclines = parseCA65Listing(lstout, symbolmap, params, true);\n                putWorkFile(fn, lstout);\n                // TODO: you have to get rid of all source lines to get asm listing\n                listings[fn] = {\n                    asmlines: srclines.length ? asmlines : null,\n                    lines: srclines.length ? srclines : asmlines,\n                    text: lstout\n                };\n            }\n        }\n        return {\n            output: aout, //.slice(0),\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\nexport function compileCC65(step: BuildStep): BuildStepResult {\n    loadNative(\"cc65\");\n    var params = step.params;\n    // stderr\n    var re_err1 = /(.*?):(\\d+): (.+)/;\n    var errors: WorkerError[] = [];\n    var errline = 0;\n    function match_fn(s) {\n        console.log(s);\n        var matches = re_err1.exec(s);\n        if (matches) {\n            errline = parseInt(matches[2]);\n            errors.push({\n                line: errline,\n                msg: matches[3],\n                path: matches[1]\n            });\n        }\n    }\n    gatherFiles(step, { mainFilePath: \"main.c\" });\n    var destpath = step.prefix + '.s';\n    if (staleFiles(step, [destpath])) {\n        var CC65: EmscriptenModule = emglobal.cc65({\n            instantiateWasm: moduleInstFn('cc65'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: print_fn,\n            printErr: match_fn,\n        });\n        var FS = CC65.FS;\n        setupFS(FS, '65-' + getRootBasePlatform(step.platform));\n        populateFiles(step, FS);\n        fixParamsWithDefines(step.path, params);\n        var args = [\n            '-I', '/share/include',\n            '-I', '.',\n            \"-D\", \"__8BITWORKSHOP__\",\n        ];\n        if (params.define) {\n            params.define.forEach((x) => args.push('-D' + x));\n        }\n        if (step.mainfile) {\n            args.unshift.apply(args, [\"-D\", \"__MAIN__\"]);\n        }\n        var customArgs = params.extra_compiler_args || ['-T', '-g', '-Oirs', '-Cl', '-W', '-pointer-sign,-no-effect'];\n        args = args.concat(customArgs, args);\n        args.push(step.path);\n        //console.log(args);\n        execMain(step, CC65, args);\n        if (errors.length)\n            return { errors: errors };\n        var asmout = FS.readFile(destpath, { encoding: 'utf8' });\n        putWorkFile(destpath, asmout);\n    }\n    return {\n        nexttool: \"ca65\",\n        path: destpath,\n        args: [destpath],\n        files: [destpath],\n    };\n}\n\n", "import { CodeListingMap, WorkerError } from \"../../common/workertypes\";\nimport { re_crlf, BuildStep, BuildStepResult, load, msvcErrorMatcher, emglobal, populateFiles, execMain, putWorkFile, anyTargetChanged, re_msvc, gatherFiles, getWorkFileAsString, print_fn, setupFS, setupStdin, staleFiles } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\"\n\nfunction parseDASMListing(lstpath: string, lsttext: string, listings: CodeListingMap, errors: WorkerError[], unresolved: {}) {\n    // TODO: this gets very slow\n    // TODO: macros that are on adjacent lines don't get offset addresses\n    //        4  08ee\t\t       a9 00\t   start      lda\t#01workermain.js:23:5\n    let lineMatch = /\\s*(\\d+)\\s+(\\S+)\\s+([0-9a-f]+)\\s+([?0-9a-f][?0-9a-f ]+)?\\s+(.+)?/i;\n    let equMatch = /\\bequ\\b/i;\n    let macroMatch = /\\bMAC\\s+(\\S+)?/i;\n    let lastline = 0;\n    let macros = {};\n    let lstline = 0;\n    let lstlist = listings[lstpath];\n    for (let line of lsttext.split(re_crlf)) {\n        lstline++;\n        let linem = lineMatch.exec(line + \"    \");\n        if (linem && linem[1] != null) {\n            let linenum = parseInt(linem[1]);\n            let filename = linem[2];\n            let offset = parseInt(linem[3], 16);\n            let insns = linem[4];\n            let restline = linem[5];\n            if (insns && insns.startsWith('?')) insns = null;\n            // don't use listing yet\n            if (lstlist && lstlist.lines) {\n                lstlist.lines.push({\n                    line: lstline,\n                    offset: offset,\n                    insns: insns,\n                    iscode: true,\n                });\n            }\n            // inside of a file?\n            let lst = listings[filename];\n            if (lst) {\n                var lines = lst.lines;\n                // look for MAC statement\n                let macmatch = macroMatch.exec(restline);\n                if (macmatch) {\n                    macros[macmatch[1]] = { line: parseInt(linem[1]), file: linem[2].toLowerCase() };\n                }\n                else if (insns && restline && !restline.match(equMatch)) {\n                    lines.push({\n                        line: linenum,\n                        offset: offset,\n                        insns: insns,\n                        iscode: restline[0] != '.'\n                    });\n                }\n                lastline = linenum;\n            } else {\n                // inside of macro?\n                let mac = macros[filename.toLowerCase()];\n                // macro invocation in main file\n                if (mac && linenum == 0) {\n                    lines.push({\n                        line: lastline + 1,\n                        offset: offset,\n                        insns: insns,\n                        iscode: true\n                    });\n                }\n                if (insns && mac) {\n                    let maclst = listings[mac.file];\n                    if (maclst && maclst.lines) {\n                        maclst.lines.push({\n                            path: mac.file,\n                            line: mac.line + linenum,\n                            offset: offset,\n                            insns: insns,\n                            iscode: true\n                        });\n                    }\n                    // TODO: a listing file can't include other files\n                } else {\n                    // inside of macro or include file\n                    if (insns && linem[3] && lastline > 0) {\n                        lines.push({\n                            line: lastline + 1,\n                            offset: offset,\n                            insns: null\n                        });\n                    }\n                }\n            }\n            // TODO: better symbol test (word boundaries)\n            // TODO: ignore IFCONST and IFNCONST usage\n            for (let key in unresolved) {\n                let l = restline || line;\n                // find the identifier substring\n                let pos = l.indexOf(key);\n                if (pos >= 0) {\n                    // strip the comment, if any\n                    let cmt = l.indexOf(';');\n                    if (cmt < 0 || cmt > pos) {\n                        // make sure identifier is flanked by non-word chars\n                        if (new RegExp(\"\\\\b\" + key + \"\\\\b\").exec(l)) {\n                            errors.push({\n                                path: filename,\n                                line: linenum,\n                                msg: \"Unresolved symbol '\" + key + \"'\"\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        let errm = re_msvc.exec(line);\n        if (errm) {\n            errors.push({\n                path: errm[1],\n                line: parseInt(errm[2]),\n                msg: errm[4]\n            })\n        }\n    }\n}\n\nexport function assembleDASM(step: BuildStep): BuildStepResult {\n    load(\"dasm\");\n    var re_usl = /(\\w+)\\s+0000\\s+[?][?][?][?]/;\n    var unresolved = {};\n    var errors = [];\n    var errorMatcher = msvcErrorMatcher(errors);\n    function match_fn(s: string) {\n        // TODO: what if s is not string? (startsWith is not a function)\n        var matches = re_usl.exec(s);\n        if (matches) {\n            var key = matches[1];\n            if (key != 'NO_ILLEGAL_OPCODES') { // TODO\n                unresolved[matches[1]] = 0;\n            }\n        } else if (s.startsWith(\"Warning:\")) {\n            errors.push({ line: 0, msg: s.substr(9) });\n        } else if (s.startsWith(\"unable \")) {\n            errors.push({ line: 0, msg: s });\n        } else if (s.startsWith(\"segment: \")) {\n            errors.push({ line: 0, msg: \"Segment overflow: \" + s.substring(9) });\n        } else if (s.toLowerCase().indexOf('error:') >= 0) {\n            errors.push({ line: 0, msg: s.trim() });\n        } else {\n            errorMatcher(s);\n        }\n    }\n    var Module: EmscriptenModule = emglobal.DASM({\n        noInitialRun: true,\n        print: match_fn\n    });\n    var FS = Module.FS;\n    populateFiles(step, FS, {\n        mainFilePath: 'main.a'\n    });\n    var binpath = step.prefix + '.bin';\n    var lstpath = step.prefix + '.lst';\n    var sympath = step.prefix + '.sym';\n    execMain(step, Module, [step.path, '-f3',\n    \"-l\" + lstpath,\n    \"-o\" + binpath,\n    \"-s\" + sympath]);\n    var alst = FS.readFile(lstpath, { 'encoding': 'utf8' });\n    // parse main listing, get errors and listings for each file\n    var listings: CodeListingMap = {};\n    //listings[lstpath] = {lines:[], text:alst};\n    for (let path of step.files) {\n        listings[path] = { lines: [] };\n    }\n    parseDASMListing(lstpath, alst, listings, errors, unresolved);\n    if (errors.length) {\n        return { errors: errors };\n    }\n    // read binary rom output and symbols\n    var aout, asym;\n    aout = FS.readFile(binpath);\n    try {\n        asym = FS.readFile(sympath, { 'encoding': 'utf8' });\n    } catch (e) {\n        console.log(e);\n        errors.push({ line: 0, msg: \"No symbol table generated, maybe segment overflow?\" });\n        return { errors: errors }\n    }\n    putWorkFile(binpath, aout);\n    putWorkFile(lstpath, alst);\n    putWorkFile(sympath, asym);\n    // return unchanged if no files changed\n    // TODO: what if listing or symbols change?\n    if (!anyTargetChanged(step, [binpath/*, lstpath, sympath*/]))\n        return;\n    var symbolmap = {};\n    for (var s of asym.split(\"\\n\")) {\n        var toks = s.split(/\\s+/);\n        if (toks && toks.length >= 2 && !toks[0].startsWith('-')) {\n            symbolmap[toks[0]] = parseInt(toks[1], 16);\n        }\n    }\n    // for bataribasic (TODO)\n    if (step['bblines']) {\n        let lst = listings[step.path];\n        if (lst) {\n            lst.asmlines = lst.lines;\n            lst.text = alst;\n            lst.lines = [];\n        }\n    }\n    return {\n        output: aout,\n        listings: listings,\n        errors: errors,\n        symbolmap: symbolmap,\n    };\n}\n\n\nfunction preprocessBatariBasic(code: string): string {\n    load(\"bbpreprocess\");\n    var bbout = \"\";\n    function addbbout_fn(s) {\n        bbout += s;\n        bbout += \"\\n\";\n    }\n    var BBPRE: EmscriptenModule = emglobal.preprocess({\n        noInitialRun: true,\n        //logReadFiles:true,\n        print: addbbout_fn,\n        printErr: print_fn,\n        noFSInit: true,\n    });\n    var FS = BBPRE.FS;\n    setupStdin(FS, code);\n    BBPRE.callMain([]);\n    console.log(\"preprocess \" + code.length + \" -> \" + bbout.length + \" bytes\");\n    return bbout;\n}\n\nexport function compileBatariBasic(step: BuildStep): BuildStepResult {\n    load(\"bb2600basic\");\n    var params = step.params;\n    // stdout\n    var asmout = \"\";\n    function addasmout_fn(s) {\n        asmout += s;\n        asmout += \"\\n\";\n    }\n    // stderr\n    var re_err1 = /[(](\\d+)[)]:?\\s*(.+)/;\n    var errors = [];\n    var errline = 0;\n    function match_fn(s) {\n        console.log(s);\n        var matches = re_err1.exec(s);\n        if (matches) {\n            errline = parseInt(matches[1]);\n            errors.push({\n                line: errline,\n                msg: matches[2]\n            });\n        }\n    }\n    gatherFiles(step, { mainFilePath: \"main.bas\" });\n    var destpath = step.prefix + '.asm';\n    if (staleFiles(step, [destpath])) {\n        var BB: EmscriptenModule = emglobal.bb2600basic({\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: addasmout_fn,\n            printErr: match_fn,\n            noFSInit: true,\n            TOTAL_MEMORY: 64 * 1024 * 1024,\n        });\n        var FS = BB.FS;\n        populateFiles(step, FS);\n        // preprocess, pipe file to stdin\n        var code = getWorkFileAsString(step.path);\n        code = preprocessBatariBasic(code);\n        setupStdin(FS, code);\n        setupFS(FS, '2600basic');\n        execMain(step, BB, [\"-i\", \"/share\", step.path]);\n        if (errors.length)\n            return { errors: errors };\n        // build final assembly output from include file list\n        var includesout = FS.readFile(\"includes.bB\", { encoding: 'utf8' });\n        var redefsout = FS.readFile(\"2600basic_variable_redefs.h\", { encoding: 'utf8' });\n        var includes = includesout.trim().split(\"\\n\");\n        var combinedasm = \"\";\n        var splitasm = asmout.split(\"bB.asm file is split here\");\n        for (var incfile of includes) {\n            var inctext;\n            if (incfile == \"bB.asm\")\n                inctext = splitasm[0];\n            else if (incfile == \"bB2.asm\")\n                inctext = splitasm[1];\n            else\n                inctext = FS.readFile(\"/share/includes/\" + incfile, { encoding: 'utf8' });\n            console.log(incfile, inctext.length);\n            combinedasm += \"\\n\\n;;;\" + incfile + \"\\n\\n\";\n            combinedasm += inctext;\n        }\n        // TODO: ; bB.asm file is split here\n        putWorkFile(destpath, combinedasm);\n        putWorkFile(\"2600basic.h\", FS.readFile(\"/share/includes/2600basic.h\"));\n        putWorkFile(\"2600basic_variable_redefs.h\", redefsout);\n    }\n    return {\n        nexttool: \"dasm\",\n        path: destpath,\n        args: [destpath],\n        files: [destpath, \"2600basic.h\", \"2600basic_variable_redefs.h\"],\n        bblines: true,\n    };\n}", "import { CodeListingMap } from \"../../common/workertypes\";\nimport { BuildStep, BuildStepResult, loadNative, gatherFiles, staleFiles, emglobal, moduleInstFn, populateFiles, execMain, putWorkFile, setupFS, populateExtraFiles, anyTargetChanged, parseListing, print_fn, msvcErrorMatcher, getWorkFileAsString, setupStdin, preprocessMCPP, parseSourceLines } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\"\n\nfunction hexToArray(s, ofs) {\n    var buf = new ArrayBuffer(s.length / 2);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = parseInt(s.slice(i * 2 + ofs, i * 2 + ofs + 2), 16);\n    }\n    return arr;\n}\n\nfunction parseIHX(ihx, rom_start, rom_size, errors) {\n    var output = new Uint8Array(new ArrayBuffer(rom_size));\n    var high_size = 0;\n    for (var s of ihx.split(\"\\n\")) {\n        if (s[0] == ':') {\n            var arr = hexToArray(s, 1);\n            var count = arr[0];\n            var address = (arr[1] << 8) + arr[2] - rom_start;\n            var rectype = arr[3];\n            //console.log(rectype,address.toString(16),count,arr);\n            if (rectype == 0) {\n                for (var i = 0; i < count; i++) {\n                    var b = arr[4 + i];\n                    output[i + address] = b;\n                }\n                if (i + address > high_size) high_size = i + address;\n            } else if (rectype == 1) {\n                break;\n            } else {\n                console.log(s); // unknown record type\n            }\n        }\n    }\n    // TODO: return ROM anyway?\n    if (high_size > rom_size) {\n        //errors.push({line:0, msg:\"ROM size too large: 0x\" + high_size.toString(16) + \" > 0x\" + rom_size.toString(16)});\n    }\n    return output;\n}\n\nexport function assembleSDASZ80(step: BuildStep): BuildStepResult {\n    loadNative(\"sdasz80\");\n    var objout, lstout, symout;\n    var errors = [];\n    gatherFiles(step, { mainFilePath: \"main.asm\" });\n    var objpath = step.prefix + \".rel\";\n    var lstpath = step.prefix + \".lst\";\n    if (staleFiles(step, [objpath, lstpath])) {\n        //?ASxxxx-Error-<o> in line 1 of main.asm null\n        //              <o> .org in REL area or directive / mnemonic error\n        // ?ASxxxx-Error-<q> in line 1627 of cosmic.asm\n        //    <q> missing or improper operators, terminators, or delimiters\n        var match_asm_re1 = / in line (\\d+) of (\\S+)/; // TODO\n        var match_asm_re2 = / <\\w> (.+)/; // TODO\n        var errline = 0;\n        var errpath = step.path;\n        var match_asm_fn = (s: string) => {\n            var m = match_asm_re1.exec(s);\n            if (m) {\n                errline = parseInt(m[1]);\n                errpath = m[2];\n            } else {\n                m = match_asm_re2.exec(s);\n                if (m) {\n                    errors.push({\n                        line: errline,\n                        path: errpath,\n                        msg: m[1]\n                    });\n                }\n            }\n        }\n        var ASZ80: EmscriptenModule = emglobal.sdasz80({\n            instantiateWasm: moduleInstFn('sdasz80'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: match_asm_fn,\n            printErr: match_asm_fn,\n        });\n        var FS = ASZ80.FS;\n        populateFiles(step, FS);\n        execMain(step, ASZ80, ['-plosgffwy', step.path]);\n        if (errors.length) {\n            return { errors: errors };\n        }\n        objout = FS.readFile(objpath, { encoding: 'utf8' });\n        lstout = FS.readFile(lstpath, { encoding: 'utf8' });\n        putWorkFile(objpath, objout);\n        putWorkFile(lstpath, lstout);\n    }\n    return {\n        linktool: \"sdldz80\",\n        files: [objpath, lstpath],\n        args: [objpath]\n    };\n    //symout = FS.readFile(\"main.sym\", {encoding:'utf8'});\n}\n\nexport function linkSDLDZ80(step: BuildStep) {\n    loadNative(\"sdldz80\");\n    var errors = [];\n    gatherFiles(step);\n    var binpath = \"main.ihx\";\n    if (staleFiles(step, [binpath])) {\n        //?ASlink-Warning-Undefined Global '__divsint' referenced by module 'main'\n        var match_aslink_re = /\\?ASlink-(\\w+)-(.+)/;\n        var match_aslink_fn = (s: string) => {\n            var matches = match_aslink_re.exec(s);\n            if (matches) {\n                errors.push({\n                    line: 0,\n                    msg: matches[2]\n                });\n            }\n        }\n        var params = step.params;\n        var LDZ80: EmscriptenModule = emglobal.sdldz80({\n            instantiateWasm: moduleInstFn('sdldz80'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: match_aslink_fn,\n            printErr: match_aslink_fn,\n        });\n        var FS = LDZ80.FS;\n        setupFS(FS, 'sdcc');\n        populateFiles(step, FS);\n        populateExtraFiles(step, FS, params.extra_link_files);\n        // TODO: coleco hack so that -u flag works\n        if (step.platform.startsWith(\"coleco\")) {\n            FS.writeFile('crt0.rel', FS.readFile('/share/lib/coleco/crt0.rel', { encoding: 'utf8' }));\n            FS.writeFile('crt0.lst', '\\n'); // TODO: needed so -u flag works\n        }\n        var args = ['-mjwxyu',\n            '-i', 'main.ihx', // TODO: main?\n            '-b', '_CODE=0x' + params.code_start.toString(16),\n            '-b', '_DATA=0x' + params.data_start.toString(16),\n            '-k', '/share/lib/z80',\n            '-l', 'z80'];\n        if (params.extra_link_args)\n            args.push.apply(args, params.extra_link_args);\n        args.push.apply(args, step.args);\n        //console.log(args);\n        execMain(step, LDZ80, args);\n        var hexout = FS.readFile(\"main.ihx\", { encoding: 'utf8' });\n        var noiout = FS.readFile(\"main.noi\", { encoding: 'utf8' });\n        putWorkFile(\"main.ihx\", hexout);\n        putWorkFile(\"main.noi\", noiout);\n        // return unchanged if no files changed\n        if (!anyTargetChanged(step, [\"main.ihx\", \"main.noi\"]))\n            return;\n        // parse binary file\n        var binout = parseIHX(hexout, params.rom_start !== undefined ? params.rom_start : params.code_start, params.rom_size, errors);\n        if (errors.length) {\n            return { errors: errors };\n        }\n        // parse listings\n        var listings: CodeListingMap = {};\n        for (var fn of step.files) {\n            if (fn.endsWith('.lst')) {\n                var rstout = FS.readFile(fn.replace('.lst', '.rst'), { encoding: 'utf8' });\n                //   0000 21 02 00      [10]   52 \tld\thl, #2\n                var asmlines = parseListing(rstout, /^\\s*([0-9A-F]{4})\\s+([0-9A-F][0-9A-F r]*[0-9A-F])\\s+\\[([0-9 ]+)\\]?\\s+(\\d+) (.*)/i, 4, 1, 2, 3);\n                var srclines = parseSourceLines(rstout, /^\\s+\\d+ ;<stdin>:(\\d+):/i, /^\\s*([0-9A-F]{4})/i);\n                putWorkFile(fn, rstout);\n                // TODO: you have to get rid of all source lines to get asm listing\n                listings[fn] = {\n                    asmlines: srclines.length ? asmlines : null,\n                    lines: srclines.length ? srclines : asmlines,\n                    text: rstout\n                };\n            }\n        }\n        // parse symbol map\n        var symbolmap = {};\n        for (var s of noiout.split(\"\\n\")) {\n            var toks = s.split(\" \");\n            if (toks[0] == 'DEF' && !toks[1].startsWith(\"A$\")) {\n                symbolmap[toks[1]] = parseInt(toks[2], 16);\n            }\n        }\n        // build segment map\n        var seg_re = /^s__(\\w+)$/;\n        var segments = [];\n        // TODO: use stack params for stack segment\n        for (let ident in symbolmap) {\n            let m = seg_re.exec(ident);\n            if (m) {\n                let seg = m[1];\n                let segstart = symbolmap[ident]; // s__SEG\n                let segsize = symbolmap['l__' + seg]; // l__SEG\n                if (segstart >= 0 && segsize > 0) {\n                    var type = null;\n                    if (['INITIALIZER', 'GSINIT', 'GSFINAL'].includes(seg)) type = 'rom';\n                    else if (seg.startsWith('CODE')) type = 'rom';\n                    else if (['DATA', 'INITIALIZED'].includes(seg)) type = 'ram';\n                    if (type == 'rom' || segstart > 0) // ignore HEADER0, CABS0, etc (TODO?)\n                        segments.push({ name: seg, start: segstart, size: segsize, type: type });\n                }\n            }\n        }\n        return {\n            output: binout,\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\nexport function compileSDCC(step: BuildStep): BuildStepResult {\n\n    gatherFiles(step, {\n        mainFilePath: \"main.c\" // not used\n    });\n    var outpath = step.prefix + \".asm\";\n    if (staleFiles(step, [outpath])) {\n        var errors = [];\n        var params = step.params;\n        loadNative('sdcc');\n        var SDCC: EmscriptenModule = emglobal.sdcc({\n            instantiateWasm: moduleInstFn('sdcc'),\n            noInitialRun: true,\n            noFSInit: true,\n            print: print_fn,\n            printErr: msvcErrorMatcher(errors),\n            //TOTAL_MEMORY:256*1024*1024,\n        });\n        var FS = SDCC.FS;\n        populateFiles(step, FS);\n        // load source file and preprocess\n        var code = getWorkFileAsString(step.path);\n        var preproc = preprocessMCPP(step, 'sdcc');\n        if (preproc.errors) {\n            return { errors: preproc.errors };\n        }\n        else code = preproc.code;\n        // pipe file to stdin\n        setupStdin(FS, code);\n        setupFS(FS, 'sdcc');\n        var args = ['--vc', '--std-sdcc99', '-mz80', //'-Wall',\n            '--c1mode',\n            //'--debug',\n            //'-S', 'main.c',\n            //'--asm=sdasz80',\n            //'--reserve-regs-iy',\n            '--less-pedantic',\n            ///'--fomit-frame-pointer',\n            //'--opt-code-speed',\n            //'--max-allocs-per-node', '1000',\n            //'--cyclomatic',\n            //'--nooverlay',\n            //'--nogcse',\n            //'--nolabelopt',\n            //'--noinvariant',\n            //'--noinduction',\n            //'--nojtbound',\n            //'--noloopreverse',\n            '-o', outpath];\n        // if \"#pragma opt_code\" found do not disable optimziations\n        if (!/^\\s*#pragma\\s+opt_code/m.exec(code)) {\n            args.push.apply(args, [\n                '--oldralloc',\n                '--no-peep',\n                '--nolospre'\n            ]);\n        }\n        if (params.extra_compile_args) {\n            args.push.apply(args, params.extra_compile_args);\n        }\n        execMain(step, SDCC, args);\n        // TODO: preprocessor errors w/ correct file\n        if (errors.length /* && nwarnings < msvc_errors.length*/) {\n            return { errors: errors };\n        }\n        // massage the asm output\n        var asmout = FS.readFile(outpath, { encoding: 'utf8' });\n        asmout = \" .area _HOME\\n .area _CODE\\n .area _INITIALIZER\\n .area _DATA\\n .area _INITIALIZED\\n .area _BSEG\\n .area _BSS\\n .area _HEAP\\n\" + asmout;\n        putWorkFile(outpath, asmout);\n    }\n    return {\n        nexttool: \"sdasz80\",\n        path: outpath,\n        args: [outpath],\n        files: [outpath],\n    };\n}\n", "\ntype Endian = 'big' | 'little';\n\ntype Symbol = {\n  value: number\n}\n\ntype AssemblerVar = {\n  bits : number,\n  toks : string[],\n  endian? : Endian,\n  iprel? : boolean,\n  ipofs? : number,\n  ipmul? : number,\n}\n\ntype AssemblerRuleSlice = {\n  a : number; // argument index\n  b : number; // bit index\n  n : number; // # of bits\n}\n\ntype AssemblerRule = {\n  fmt : string,\n  bits : (string | number | AssemblerRuleSlice)[],\n  // added at runtime\n  re? : RegExp,\n  prefix? : string,\n  varlist? : string[]\n}\n\ntype AssemblerVarList = {[name:string] : AssemblerVar};\n\ntype AssemblerLine = {line:number, offset:number, nbits:number, insns?:string};\n\ntype AssemblerFixup = {\n  sym:string,\n  ofs:number,\n  size:number;\n  srcofs:number,\n  dstofs:number,\n  dstlen:number,\n  line:number,\n  iprel:boolean,\n  ipofs:number,\n  ipmul:number,\n  endian:Endian\n};\n\ntype AssemblerSpec = {\n  name : string,\n  width : number,\n  vars : AssemblerVarList,\n  rules : AssemblerRule[]\n}\n\ntype AssemblerInstruction = {opcode:number, nbits : number};\ntype AssemblerErrorResult = {error:string};\ntype AssemblerLineResult = AssemblerErrorResult | AssemblerInstruction;\n\ntype AssemblerError = {msg:string, line:number};\n\ntype AssemblerState = {\n  ip: number,\n  line: number,\n  origin: number,\n  codelen: number,\n  intermediate: any,\n  output: number[],\n  lines: AssemblerLine[],\n  errors: AssemblerError[],\n  fixups: AssemblerFixup[]\n}\n\nconst isError = (o: AssemblerLineResult): o is AssemblerErrorResult => (<AssemblerErrorResult>o).error !== undefined\n\nfunction hex(v:number, nd:number) {\n  try {\n    if (!nd) nd = 2;\n    if (nd == 8) {\n      return hex((v>>16)&0xffff,4) + hex(v&0xffff,4);\n    }\n    var s = v.toString(16).toUpperCase();\n    while (s.length < nd)\n      s = \"0\" + s;\n    return s;\n  } catch (e) {\n    return v+\"\";\n  }\n}\n\nfunction stringToData(s:string) : number[] {\n  var data = [];\n  for (var i=0; i<s.length; i++) {\n    data[i] = s.charCodeAt(i);\n  }\n  return data;\n}\n\n\nexport class Assembler {\n  spec : AssemblerSpec;\n  ip = 0;\n  origin = 0;\n  linenum = 0;\n  symbols : {[name:string] : Symbol} = {};\n  errors : AssemblerError[] = [];\n  outwords : number[] = [];\n  asmlines : AssemblerLine[] = [];\n  fixups : AssemblerFixup[] = [];\n  width = 8;\n  codelen = 0;\n  aborted = false;\n  \n  constructor(spec? : AssemblerSpec) {\n    this.spec = spec;\n    if (spec) {\n      this.preprocessRules();\n    }\n  }\n\n  rule2regex(rule : AssemblerRule, vars : AssemblerVarList) {\n    var s = rule.fmt;\n    if (!s || !(typeof s === 'string'))\n      throw Error('Each rule must have a \"fmt\" string field');\n    if (!rule.bits || !(rule.bits instanceof Array))\n      throw Error('Each rule must have a \"bits\" array field');\n    var varlist = [];\n    rule.prefix = s.split(/\\s+/)[0];\n    s = s.replace(/\\+/g, '\\\\+');\n    s = s.replace(/\\*/g, '\\\\*');\n    s = s.replace(/\\s+/g, '\\\\s+');\n    s = s.replace(/\\[/g, '\\\\[');\n    s = s.replace(/\\]/g, '\\\\]');\n    s = s.replace(/\\(/g, '\\\\(');\n    s = s.replace(/\\)/g, '\\\\)');\n    s = s.replace(/\\./g, '\\\\.');\n    // TODO: more escapes?\n    s = s.replace(/~\\w+/g, (varname:string) => {\n      varname = varname.substr(1);\n      var v = vars[varname];\n      varlist.push(varname);\n      if (!v)\n        throw Error('Could not find variable definition for \"~' + varname + '\"');\n      else if (v.toks)\n        return '(\\\\w+)';\n      else\n        return '([0-9]+|[$][0-9a-f]+|\\\\w+)';\n    });\n    try {\n      rule.re = new RegExp('^'+s+'$', 'i');\n    } catch (e) {\n      throw Error(\"Bad regex for rule \\\"\" + rule.fmt + \"\\\": /\" + s + \"/ -- \" + e);\n    }\n    rule.varlist = varlist;\n    // TODO: check rule constraints\n    return rule;\n  }\n\n  preprocessRules() {\n    if (this.spec.width) {\n      this.width = this.spec.width || 8;\n    }\n    for (var rule of this.spec.rules) {\n      this.rule2regex(rule, this.spec.vars);\n    }\n  }\n  warning(msg:string, line?:number) {\n    this.errors.push({msg:msg, line:line?line:this.linenum});\n  }\n  fatal(msg:string, line?:number) {\n    this.warning(msg, line);\n    this.aborted = true;\n  }\n  fatalIf(msg?:string, line?:number) {\n    if (msg) this.fatal(msg, line);\n  }\n  addBytes(result:AssemblerInstruction) {\n    this.asmlines.push({\n      line:this.linenum,\n      offset:this.ip,\n      nbits:result.nbits\n    });\n    var op = result.opcode;\n    var nb = result.nbits/this.width;\n    for (var i=0; i<nb; i++) {\n      if (this.width < 32)\n        this.outwords[this.ip++ - this.origin] = (op >> (nb-1-i)*this.width) & ((1<<this.width)-1);\n      else\n        this.outwords[this.ip++ - this.origin] = op;\n    }\n  }\n  addWords(data:number[]) {\n    this.asmlines.push({\n      line:this.linenum,\n      offset:this.ip,\n      nbits:this.width*data.length\n    });\n    for (var i=0; i<data.length; i++) {\n      if (this.width < 32)\n        this.outwords[this.ip++ - this.origin] = data[i] & ((1<<this.width)-1);\n      else\n        this.outwords[this.ip++ - this.origin] = data[i];\n    }\n  }\n\n  parseData(toks:string[]) : number[] {\n    var data = [];\n    for (var i=0; i<toks.length; i++) {\n      data[i] = this.parseConst(toks[i]);\n    }\n    return data;\n  }\n\n  alignIP(align) {\n    if (align < 1 || align > this.codelen)\n      this.fatal(\"Invalid alignment value\");\n    else\n      this.ip = Math.floor((this.ip+align-1)/align)*align;\n  }\n\n  parseConst(s:string, nbits?:number) : number {\n    // TODO: check bit length\n    if (s && s[0] == '$')\n      return parseInt(s.substr(1), 16);\n    else\n      return parseInt(s);\n  }\n\n  swapEndian(x: number, nbits: number) {\n    var y = 0;\n    while (nbits > 0) {\n      var n = Math.min(nbits, this.width);\n      var mask = (1 << n) - 1;\n      y <<= n;\n      y |= (x & mask);\n      x >>>= n;\n      nbits -= n;\n    }\n    return y;\n  }\n\n  buildInstruction(rule:AssemblerRule, m:string[]) : AssemblerLineResult {\n    var opcode = 0;\n    var oplen = 0;\n    // iterate over each component of the rule output (\"bits\")\n    for (let b of rule.bits) {\n      let n,x;\n      // is a string? then it's a bit constant\n      // TODO\n      if (typeof b === \"string\") {\n        n = b.length;\n        x = parseInt(b,2);\n      } else {\n        // is it a slice {a,b,n} or just a number?\n        var index = typeof b === \"number\" ? b : b.a;\n        // it's an indexed variable, look up its variable\n        var id = m[index+1];\n        var v = this.spec.vars[rule.varlist[index]];\n        if (!v) {\n          return {error:`Could not find matching identifier for '${m[0]}' index ${index}`};\n        }\n        n = v.bits;\n        var shift = 0;\n        if (typeof b !== \"number\") {\n          n = b.n;\n          shift = b.b;\n        }\n        // is it an enumerated type? look up the index of its keyword\n        if (v.toks) {\n          x = v.toks.indexOf(id);\n          if (x < 0)\n            return {error:\"Can't use '\" + id + \"' here, only one of: \" + v.toks.join(', ')};\n        } else {\n          // otherwise, parse it as a constant\n          x = this.parseConst(id, n);\n          // is it a label? add fixup\n          if (isNaN(x)) {\n            this.fixups.push({\n              sym:id, ofs:this.ip, size:v.bits, line:this.linenum,\n              dstlen:n, dstofs:oplen, srcofs:shift,\n              endian:v.endian,\n              iprel:!!v.iprel, ipofs:(v.ipofs+0), ipmul:v.ipmul||1\n            });\n            x = 0;\n          } else {\n            var mask = (1<<v.bits)-1;\n            if ((x&mask) != x)\n              return {error:\"Value \" + x + \" does not fit in \" + v.bits + \" bits\"};\n          }\n        }\n        // if little endian, we need to swap ordering\n        if (v.endian == 'little') x = this.swapEndian(x, v.bits);\n        // is it an array slice? slice the bits\n        if (typeof b !== \"number\") {\n          x = (x >>> shift) & ((1 << b.n)-1);\n        }\n      }\n      opcode = (opcode << n) | x;\n      oplen += n;\n    }\n    if (oplen == 0)\n      this.warning(\"Opcode had zero length\");\n    else if (oplen > 32)\n      this.warning(\"Opcodes > 32 bits not supported\");\n    else if ((oplen % this.width) != 0)\n      this.warning(\"Opcode was not word-aligned (\" + oplen + \" bits)\");\n    return {opcode:opcode, nbits:oplen};\n  }\n\n  loadArch(arch:string) : string {\n    if (this.loadJSON) {\n      var json = this.loadJSON(arch + \".json\");\n      if (json && json.vars && json.rules) {\n        this.spec = json;\n        this.preprocessRules();\n      } else {\n        return (\"Could not load arch file '\" + arch + \".json'\");\n      }\n    }\n  }\n\n  parseDirective(tokens) {\n    var cmd = tokens[0].toLowerCase();\n    if (cmd == '.define')\n      this.symbols[tokens[1].toLowerCase()] = {value:tokens[2]};\n    else if (cmd == '.org')\n      this.ip = this.origin = parseInt(tokens[1]);\n    else if (cmd == '.len')\n      this.codelen = parseInt(tokens[1]);\n    else if (cmd == '.width')\n      this.width = parseInt(tokens[1]);\n    else if (cmd == '.arch')\n      this.fatalIf(this.loadArch(tokens[1]));\n    else if (cmd == '.include')\n      this.fatalIf(this.loadInclude(tokens[1]));\n    else if (cmd == '.module')\n      this.fatalIf(this.loadModule(tokens[1]));\n    else if (cmd == '.data')\n      this.addWords(this.parseData(tokens.slice(1)));\n    else if (cmd == '.string')\n      this.addWords(stringToData(tokens.slice(1).join(' ')));\n    else if (cmd == '.align')\n      this.alignIP(this.parseConst(tokens[1]));\n    else\n      this.warning(\"Unrecognized directive: \" + tokens);\n  }\n\n  assemble(line:string) : AssemblerInstruction {\n    this.linenum++;\n    // remove comments\n    line = line.replace(/[;].*/g, '').trim();\n    // is it a directive?\n    if (line[0] == '.') {\n      var tokens = line.split(/\\s+/);\n      this.parseDirective(tokens);\n      return;\n    }\n    // make it lowercase\n    line = line.toLowerCase();\n    // find labels\n    line = line.replace(/(\\w+):/, (_label, label) => {\n      this.symbols[label] = {value:this.ip};\n      return ''; // replace label with blank\n    });\n    line = line.trim();\n    if (line == '')\n      return; // empty line\n    // look at each rule in order\n    if (!this.spec) { this.fatal(\"Need to load .arch first\"); return; }\n    var lastError;\n    for (var rule of this.spec.rules) {\n      var m = rule.re.exec(line);\n      if (m) {\n        var result = this.buildInstruction(rule, m);\n        if (!isError(result)) {\n          this.addBytes(result);\n          return result;\n        } else {\n          lastError = result.error;\n        }\n      }\n    }\n    this.warning(lastError ? lastError : (\"Could not decode instruction: \" + line));\n  }\n\n  applyFixup(fix: AssemblerFixup, sym: Symbol) {\n    var ofs = fix.ofs + Math.floor(fix.dstofs/this.width);\n    var mask = ((1<<fix.size)-1);\n    var value = this.parseConst(sym.value+\"\", fix.dstlen);\n    if (fix.iprel)\n      value = (value - fix.ofs) * fix.ipmul - fix.ipofs;\n    if (fix.srcofs == 0 && (value > mask || value < -mask))\n      this.warning(\"Symbol \" + fix.sym + \" (\" + value + \") does not fit in \" + fix.dstlen + \" bits\", fix.line);\n    //console.log(hex(value,8), fix.srcofs, fix.dstofs, fix.dstlen);\n    if (fix.srcofs > 0)\n      value >>>= fix.srcofs;\n    value &= (1 << fix.dstlen) - 1;\n    // TODO: make it work for all widths\n    if (this.width == 32) {\n      var shift = 32 - fix.dstofs - fix.dstlen;\n      value <<= shift;\n    }\n    // TODO: check range\n    if (fix.size <= this.width) {\n      this.outwords[ofs - this.origin] ^= value;\n    } else {\n      // swap if we want big endian (we'll apply in LSB first order)\n      if (fix.endian == 'big') value = this.swapEndian(value, fix.size);\n      // apply multi-byte fixup\n      while (value) {\n        if (value & this.outwords[ofs - this.origin]) {\n          this.warning(\"Instruction bits overlapped: \" + hex(this.outwords[ofs - this.origin],8), hex(value,8));\n        } else {\n          this.outwords[ofs - this.origin] ^= value & ((1<<this.width)-1);\n        }\n        value >>>= this.width;\n        ofs++;\n      }\n    }\n  }\n\n  finish() : AssemblerState {\n    // apply fixups\n    for (var i=0; i<this.fixups.length; i++) {\n      var fix = this.fixups[i];\n      var sym = this.symbols[fix.sym];\n      if (sym) {\n        this.applyFixup(fix, sym);\n      } else {\n        this.warning(\"Symbol '\" + fix.sym + \"' not found\");\n      }\n    }\n    // update asmlines\n    for (var i=0; i<this.asmlines.length; i++) {\n      var al = this.asmlines[i];\n      al.insns = '';\n      for (var j=0; j<al.nbits/this.width; j++) {\n        var word = this.outwords[al.offset + j - this.origin];\n        if (j>0) al.insns += ' ';\n        al.insns += hex(word,this.width/4);\n      }\n    }\n    while (this.outwords.length < this.codelen) {\n      this.outwords.push(0);\n    }\n    this.fixups = [];\n    return this.state();\n  }\n\n  assembleFile(text) : AssemblerState {\n    var lines = text.split(/\\n/g);\n    for (var i=0; i<lines.length && !this.aborted; i++) {\n      try {\n        this.assemble(lines[i]);\n      } catch (e) {\n        console.log(e);\n        this.fatal(\"Exception during assembly: \" + e);\n      }\n    }\n    return this.finish();\n  }\n\n  state() : AssemblerState {\n    return {ip:this.ip, line:this.linenum, origin:this.origin, codelen:this.codelen,\n      intermediate:{}, // TODO: listing, symbols?\n      output:this.outwords,\n      lines:this.asmlines,\n      errors:this.errors,\n      fixups:this.fixups};\n  }\n  \n  // methods to implement in subclass\n  \n  loadJSON : (path : string) => any;\n  loadInclude : (path : string) => string;\n  loadModule : (path : string) => string;\n}\n\n", "import { SourceLocation } from \"../workertypes\";\n\nexport interface HDLModuleRunner {\n    state: any; // live state or proxy object\n    eval() : void;\n    tick() : void;\n    tick2(iters: number) : void;\n    powercycle() : void;\n    isFinished() : boolean;\n    isStopped() : boolean;\n    getGlobals() : {};\n    saveState() : {};\n    loadState(state: {}) : void;\n    dispose() : void;\n    getFileData : (filename : string) => string|Uint8Array;\n}\n\nexport interface HDLModuleTrace extends HDLModuleRunner {\n    trace: any;\n    resetTrace() : void;\n    nextTrace() : void;\n}\n\n///\n\nexport interface HDLLogicType extends HDLSourceObject {\n    left: number;\n    right: number;\n    signed: boolean;\n}\n\nexport interface HDLUnpackArray extends HDLSourceObject {\n    subtype: HDLDataType;\n    low: HDLConstant;\n    high: HDLConstant;\n}\n\nexport interface HDLNativeType extends HDLSourceObject {\n    jstype: string;\n}\n\nexport type HDLDataType = HDLLogicType | HDLUnpackArray | HDLNativeType;\n\nexport function isLogicType(arg:any): arg is HDLLogicType {\n    return typeof arg.left === 'number' && typeof arg.right === 'number';\n}\n\nexport function isArrayType(arg:any): arg is HDLUnpackArray {\n    return arg.subtype != null && arg.low != null && arg.high != null\n      && typeof arg.low.cvalue === 'number' && typeof arg.high.cvalue === 'number';\n}\n\nexport class HDLFile {\n    id: string;\n    filename: string;\n    isModule: boolean;\n}\n\nexport interface HDLSourceLocation extends SourceLocation {\n    hdlfile: HDLFile;\n    end_line?: number;\n}\n\nexport interface HDLSourceObject {\n    $loc?: HDLSourceLocation;\n}\n\nexport interface HDLDataTypeObject extends HDLSourceObject {\n    dtype: HDLDataType;\n}\n\nexport function hasDataType(arg: any) : arg is HDLDataTypeObject {\n    return typeof arg.dtype === 'object';\n}\n\nexport interface HDLModuleDef extends HDLSourceObject {\n    name: string;\n    origName: string;\n    blocks: HDLBlock[];\n    instances: HDLInstanceDef[];\n    vardefs: { [id:string] : HDLVariableDef };\n}\n\nexport interface HDLVariableDef extends HDLDataTypeObject {\n    name: string;\n    origName: string;\n    isInput: boolean;\n    isOutput: boolean;\n    isParam: boolean;\n    constValue?: HDLConstant;\n    initValue?: HDLBlock;\n}\n\nexport function isVarDecl(arg:any): arg is HDLVariableDef {\n    return typeof arg.isParam !== 'undefined';\n}\n\nexport interface HDLConstant extends HDLDataTypeObject {\n    cvalue: number;\n    bigvalue: bigint;\n}\n\nexport function isConstExpr(arg:any): arg is HDLConstant {\n    return typeof arg.cvalue === 'number';\n}\n\nexport function isBigConstExpr(arg:any): arg is HDLConstant {\n    return typeof arg.bigvalue === 'bigint';\n}\n\nexport interface HDLHierarchyDef extends HDLSourceObject {\n    name: string;\n    module: HDLModuleDef;\n    parent: HDLHierarchyDef;\n    children: HDLHierarchyDef[];\n}\n\nexport interface HDLInstanceDef extends HDLSourceObject {\n    name: string;\n    origName: string;\n    module: HDLModuleDef;\n    ports: HDLPort[];\n}\n\nexport interface HDLVarRef extends HDLDataTypeObject {\n    refname: string;\n    //TODO? vardef: HDLVariableDef;\n}\n\nexport function isVarRef(arg:any): arg is HDLVarRef {\n    return arg.refname != null;\n}\n\nexport interface HDLUnop extends HDLDataTypeObject {\n    op: string;\n    left: HDLExpr;\n}\n\nexport interface HDLExtendop extends HDLUnop {\n    width: number;\n    widthminv: number;\n}\n\nexport function isUnop(arg:any): arg is HDLUnop {\n    return arg.op != null && arg.left != null && arg.right == null;\n}\n\nexport interface HDLBinop extends HDLUnop {\n    right: HDLExpr;\n}\n\nexport function isBinop(arg:any): arg is HDLBinop {\n    return arg.op != null && arg.left != null && arg.right != null && arg.cond == null;\n}\n\nexport interface HDLTriop extends HDLBinop {\n    cond: HDLExpr;\n}\n\nexport function isTriop(arg:any): arg is HDLTriop {\n    return arg.op != null && arg.cond != null;\n}\n\nexport interface HDLWhileOp extends HDLDataTypeObject {\n    op: 'while';\n    precond: HDLExpr;\n    loopcond: HDLExpr;\n    body: HDLExpr;\n    inc: HDLExpr;\n}\n\nexport function isWhileop(arg:any): arg is HDLWhileOp {\n    return arg.op === 'while' && arg.loopcond != null;\n}\n\nexport interface HDLBlock extends HDLSourceObject {\n    blocktype: string;\n    name: string;\n    exprs: HDLExpr[];\n}\n\nexport function isBlock(arg:any): arg is HDLBlock {\n    return arg.blocktype != null;\n}\n\nexport interface HDLAlwaysBlock extends HDLBlock {\n    senlist: HDLSensItem[];\n}\n\nexport interface HDLSensItem extends HDLSourceObject {\n    edgeType : \"POS\" | \"NEG\";\n    expr: HDLExpr;\n}\n\nexport interface HDLPort extends HDLSourceObject {\n    name: string;\n    expr: HDLExpr;\n}\n\nexport interface HDLFuncCall extends HDLDataTypeObject {\n    funcname: string;\n    args: HDLExpr[];\n}\n\nexport function isFuncCall(arg:any): arg is HDLFuncCall {\n    return typeof arg.funcname === 'string';\n}\n\nexport interface HDLArrayItem {\n    index: number;\n    expr: HDLExpr;\n}\n\nexport function isArrayItem(arg:any): arg is HDLArrayItem {\n    return typeof arg.index === 'number' && arg.expr != null;\n}\n\nexport type HDLExpr = HDLVarRef | HDLUnop | HDLBinop | HDLTriop | HDLBlock | HDLVariableDef | HDLFuncCall | HDLConstant;\n\nexport interface HDLUnit {\n    files: { [id: string]: HDLFile };\n    dtypes: { [id: string]: HDLDataType };\n    modules: { [id: string]: HDLModuleDef };\n    hierarchies: { [id: string]: HDLHierarchyDef };\n}\n\nexport type HDLValue = number | bigint | Uint8Array | Uint16Array | Uint32Array | HDLValue[];\n\n", "\nimport { parseXMLPoorly, XMLNode } from \"../util\";\nimport { HDLAlwaysBlock, HDLArrayItem, HDLBinop, HDLBlock, HDLConstant, HDLDataType, HDLDataTypeObject, HDLExpr, HDLExtendop, HDLFile, HDLFuncCall, HDLHierarchyDef, HDLInstanceDef, HDLLogicType, HDLModuleDef, HDLNativeType, HDLPort, HDLSensItem, HDLSourceLocation, HDLSourceObject, HDLTriop, HDLUnit, HDLUnop, HDLUnpackArray, HDLValue, HDLVariableDef, HDLVarRef, HDLWhileOp, isArrayType, isBinop, isBlock, isConstExpr, isFuncCall, isLogicType, isTriop, isUnop, isVarDecl, isVarRef } from \"./hdltypes\";\n\n/**\n * Whaa?\n * \n * Each hierarchy takes (uint32[] -> uint32[])\n * - convert to/from js object\n * - JS or WASM\n * - Fixed-size packets\n * - state is another uint32[]\n * Find optimal packing of bits\n * Find clocks\n * Find pivots (reset, state) concat them together\n * Dependency cycles\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n */\n\n export class CompileError extends Error implements HDLSourceObject {\n    $loc: HDLSourceLocation;\n    constructor($loc: HDLSourceLocation, msg: string) {\n        super(msg);\n        this.$loc = $loc;\n        Object.setPrototypeOf(this, CompileError.prototype);\n    }\n}\n\nexport class VerilogXMLParser implements HDLUnit {\n\n    files: { [id: string]: HDLFile } = {};\n    dtypes: { [id: string]: HDLDataType } = {};\n    modules: { [id: string]: HDLModuleDef } = {};\n    hierarchies: { [id: string]: HDLHierarchyDef } = {};\n\n    cur_node : XMLNode;\n    cur_module : HDLModuleDef;\n    cur_loc : HDLSourceLocation;\n    cur_loc_str : string;\n    cur_deferred = [];\n\n    constructor() {\n        // TODO: other types?\n        this.dtypes['QData'] = {left:63, right:0, signed:false};\n        this.dtypes['IData'] = {left:31, right:0, signed:false};\n        this.dtypes['SData'] = {left:15, right:0, signed:false};\n        this.dtypes['CData'] = {left:7, right:0, signed:false};\n        this.dtypes['byte'] = {left:7, right:0, signed:true};\n        this.dtypes['shortint'] = {left:15, right:0, signed:true};\n        this.dtypes['int'] = {left:31, right:0, signed:true};\n        this.dtypes['integer'] = {left:31, right:0, signed:true};\n        this.dtypes['longint'] = {left:63, right:0, signed:true};\n        this.dtypes['time'] = {left:63, right:0, signed:false};\n    }\n\n    defer(fn: () => void) {\n        this.cur_deferred.unshift(fn);\n    }\n\n    defer2(fn: () => void) {\n        this.cur_deferred.push(fn);\n    }\n\n    run_deferred() {\n        this.cur_deferred.forEach((fn) => fn());\n        this.cur_deferred = [];\n    }\n\n    name2js(s: string) {\n        if (s == null) throw new CompileError(this.cur_loc, `no name`);\n        return s.replace(/[^a-z0-9_]/gi, '$');\n    }\n\n    findChildren(node: XMLNode, type: string, required: boolean) : XMLNode[] {\n        var arr = node.children.filter((n) => n.type == type);\n        if (arr.length == 0 && required) throw new CompileError(this.cur_loc, `no child of type ${type}`);\n        return arr;\n    }\n\n    parseSourceLocation(node: XMLNode): HDLSourceLocation {\n        var loc = node.attrs['loc'];\n        if (loc) {\n            if (loc == this.cur_loc_str) {\n                return this.cur_loc; // cache last parsed $loc object\n            } else {\n                var [fileid, line, col, end_line, end_col] = loc.split(',');\n                var $loc = {\n                    hdlfile: this.files[fileid],\n                    path: this.files[fileid].filename,\n                    line: parseInt(line),\n                    start: parseInt(col)-1,\n                    end_line: parseInt(end_line),\n                    end: parseInt(end_col)-1,\n                }\n                this.cur_loc = $loc;\n                this.cur_loc_str = loc;\n                return $loc;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    open_module(node: XMLNode) {\n        var module: HDLModuleDef = {\n            $loc: this.parseSourceLocation(node),\n            name: node.attrs['name'],\n            origName: node.attrs['origName'],\n            blocks: [],\n            instances: [],\n            vardefs: {},\n        }\n        if (this.cur_module) throw new CompileError(this.cur_loc, `nested modules not supported`);\n        this.cur_module = module;\n        return module;\n    }\n\n    deferDataType(node: XMLNode, def: HDLDataTypeObject) {\n        var dtype_id = node.attrs['dtype_id'];\n        if (dtype_id != null) {\n            this.defer(() => {\n                def.dtype = this.dtypes[dtype_id];\n                if (!def.dtype) {\n                    throw new CompileError(this.cur_loc, `Unknown data type ${dtype_id} for ${node.type}`);\n                }\n            })\n        }\n    }\n\n    parseConstValue(s: string) : number | bigint {\n        const re_const = /(\\d+)'([s]?)h([0-9a-f]+)/i;\n        var m = re_const.exec(s);\n        if (m) {\n            var numstr = m[3];\n            if (numstr.length <= 8)\n                return parseInt(numstr, 16);\n            else\n                return BigInt('0x' + numstr);\n        } else {\n            throw new CompileError(this.cur_loc, `could not parse constant \"${s}\"`);\n        }\n    }\n    \n    resolveVar(s: string, mod: HDLModuleDef) : HDLVariableDef {\n        var def = mod.vardefs[s];\n        if (def == null) throw new CompileError(this.cur_loc, `could not resolve variable \"${s}\"`);\n        return def;\n    }\n\n    resolveModule(s: string) : HDLModuleDef {\n        var mod = this.modules[s];\n        if (mod == null) throw new CompileError(this.cur_loc, `could not resolve module \"${s}\"`);\n        return mod;\n    }\n\n    //\n\n    visit_verilator_xml(node: XMLNode) {\n    }\n\n    visit_package(node: XMLNode) { // TODO?\n    }\n\n    visit_module(node: XMLNode) {\n        this.findChildren(node, 'var', false).forEach((n) => {\n            if (isVarDecl(n.obj)) {\n                this.cur_module.vardefs[n.obj.name] = n.obj;\n            }\n        })\n        this.modules[this.cur_module.name] = this.cur_module;\n        this.cur_module = null;\n    }\n\n    visit_var(node: XMLNode) : HDLVariableDef {\n        var name = node.attrs['name'];\n        name = this.name2js(name);\n        var vardef: HDLVariableDef = {\n            $loc: this.parseSourceLocation(node),\n            name: name,\n            origName: node.attrs['origName'],\n            isInput: node.attrs['dir'] == 'input',\n            isOutput: node.attrs['dir'] == 'output',\n            isParam: node.attrs['param'] == 'true',\n            dtype: null,\n        }\n        this.deferDataType(node, vardef);\n        var const_nodes = this.findChildren(node, 'const', false);\n        if (const_nodes.length) {\n            vardef.constValue = const_nodes[0].obj;\n        }\n        var init_nodes = this.findChildren(node, 'initarray', false);\n        if (init_nodes.length) {\n            vardef.initValue = init_nodes[0].obj;\n        }\n        return vardef;\n    }\n\n    visit_const(node: XMLNode) : HDLConstant {\n        var name = node.attrs['name'];\n        var cvalue = this.parseConstValue(name); \n        var constdef: HDLConstant = {\n            $loc: this.parseSourceLocation(node),\n            dtype: null,\n            cvalue: typeof cvalue === 'number' ? cvalue : null,\n            bigvalue: typeof cvalue === 'bigint' ? cvalue : null,\n        }\n        this.deferDataType(node, constdef);\n        return constdef;\n    }\n\n    visit_varref(node: XMLNode) : HDLVarRef {\n        var name = node.attrs['name'];\n        name = this.name2js(name);\n        var varref: HDLVarRef = {\n            $loc: this.parseSourceLocation(node),\n            dtype: null,\n            refname: name\n        }\n        this.deferDataType(node, varref);\n        var mod = this.cur_module;\n        /*\n        this.defer2(() => {\n            varref.vardef = this.resolveVar(name, mod);\n        });\n        */\n        return varref;\n    }\n\n    visit_sentree(node: XMLNode) {\n        // TODO\n    }\n\n    visit_always(node: XMLNode) : HDLAlwaysBlock {\n        // TODO\n        var sentree : HDLSensItem[];\n        var expr : HDLExpr;\n        if (node.children.length == 2) {\n            sentree = node.children[0].obj as HDLSensItem[];\n            expr = node.children[1].obj as HDLExpr;\n            // TODO: check sentree\n        } else {\n            sentree = null;\n            expr = node.children[0].obj as HDLExpr;\n        }\n        var always: HDLAlwaysBlock = {\n            $loc: this.parseSourceLocation(node),\n            blocktype: node.type,\n            name: null,\n            senlist: sentree,\n            exprs: [expr],\n        };\n        this.cur_module.blocks.push(always);\n        return always;\n    }\n\n    visit_begin(node: XMLNode) : HDLBlock {\n        var exprs = [];\n        node.children.forEach((n) => exprs.push(n.obj));\n        return {\n            $loc: this.parseSourceLocation(node),\n            blocktype: node.type,\n            name: node.attrs['name'],\n            exprs: exprs,\n        }\n    }\n\n    visit_initarray(node: XMLNode) : HDLBlock {\n        return this.visit_begin(node);\n    }\n\n    visit_inititem(node: XMLNode) : HDLArrayItem {\n        this.expectChildren(node, 1, 1);\n        return {\n            index: parseInt(node.attrs['index']),\n            expr: node.children[0].obj\n        }\n    }\n\n    visit_cfunc(node: XMLNode) : HDLBlock {\n        if (this.cur_module == null) { // TODO?\n            //console.log('no module open, skipping', node);\n            return;\n        }\n        var block = this.visit_begin(node);\n        block.exprs = [];\n        node.children.forEach((n) => block.exprs.push(n.obj));\n        this.cur_module.blocks.push(block);\n        return block;\n    }\n\n    visit_cuse(node: XMLNode) { // TODO?\n    }\n\n    visit_instance(node: XMLNode) : HDLInstanceDef {\n        var instance : HDLInstanceDef = {\n            $loc: this.parseSourceLocation(node),\n            name: node.attrs['name'],\n            origName: node.attrs['origName'],\n            ports: [],\n            module: null,\n        }\n        node.children.forEach((child) => {\n            instance.ports.push(child.obj);\n        })\n        this.cur_module.instances.push(instance);\n        this.defer(() => {\n            instance.module = this.resolveModule(node.attrs['defName']);\n        })\n        return instance;\n    }\n\n    visit_iface(node: XMLNode) {\n        throw new CompileError(this.cur_loc, `interfaces not supported`);\n    }\n\n    visit_intfref(node: XMLNode) {\n        throw new CompileError(this.cur_loc, `interfaces not supported`);\n    }\n\n    visit_port(node: XMLNode) : HDLPort {\n        this.expectChildren(node, 1, 1);\n        var varref: HDLPort = {\n            $loc: this.parseSourceLocation(node),\n            name: node.attrs['name'],\n            expr: node.children[0].obj\n        }\n        return varref;\n    }\n\n    visit_netlist(node: XMLNode) {\n    }\n\n    visit_files(node: XMLNode) {\n    }\n\n    visit_module_files(node: XMLNode) {\n        node.children.forEach((n) => {\n            if (n.obj) {\n                var file = this.files[(n.obj as HDLFile).id];\n                if (file) file.isModule = true;\n            }\n        });\n    }\n\n    visit_file(node: XMLNode) {\n        return this.visit_file_or_module(node, false);\n    }\n\n    // TODO\n    visit_scope(node: XMLNode) {\n    }\n\n    visit_topscope(node: XMLNode) {\n    }\n\n    visit_file_or_module(node: XMLNode, isModule: boolean) : HDLFile {\n        var file : HDLFile = {\n            id: node.attrs['id'],\n            filename: node.attrs['filename'],\n            isModule: isModule,\n        }\n        this.files[file.id] = file;\n        return file;\n    }\n\n    visit_cells(node: XMLNode) {\n        this.expectChildren(node, 1, 9999);\n        var hier = node.children[0].obj as HDLHierarchyDef;\n        if (hier != null) {\n            var hiername = hier.name;\n            this.hierarchies[hiername] = hier;\n        }\n    }\n\n    visit_cell(node: XMLNode) : HDLHierarchyDef {\n        var hier = {\n            $loc: this.parseSourceLocation(node),\n            name: node.attrs['name'],\n            module: null,\n            parent: null,\n            children: node.children.map((n) => n.obj),\n        }\n        if (node.children.length > 0)\n            throw new CompileError(this.cur_loc, `multiple non-flattened modules not yet supported`);\n        node.children.forEach((n) => (n.obj as HDLHierarchyDef).parent = hier);\n        this.defer(() => {\n            hier.module = this.resolveModule(node.attrs['submodname']);\n        })\n        return hier;\n    }\n\n    visit_basicdtype(node: XMLNode): HDLDataType {\n        let id = node.attrs['id'];\n        var dtype: HDLDataType;\n        var dtypename = node.attrs['name'];\n        switch (dtypename) {\n            case 'logic':\n            case 'integer': // TODO?\n            case 'bit':\n                let dlogic: HDLLogicType = {\n                    $loc: this.parseSourceLocation(node),\n                    left: parseInt(node.attrs['left'] || \"0\"),\n                    right: parseInt(node.attrs['right'] || \"0\"),\n                    signed: node.attrs['signed'] == 'true'\n                }\n                dtype = dlogic;\n                break;\n            case 'string':\n                let dstring: HDLNativeType = {\n                    $loc: this.parseSourceLocation(node),\n                    jstype: 'string'\n                }\n                dtype = dstring;\n                break;\n            default:\n                dtype = this.dtypes[dtypename];\n                if (dtype == null) {\n                    throw new CompileError(this.cur_loc, `unknown data type ${dtypename}`);\n                }\n        }\n        this.dtypes[id] = dtype;\n        return dtype;\n    }\n\n    visit_refdtype(node: XMLNode) {\n    }\n\n    visit_enumdtype(node: XMLNode) {\n    }\n\n    visit_enumitem(node: XMLNode) {\n    }\n\n    visit_packarraydtype(node: XMLNode): HDLDataType {\n        // TODO: packed?\n        return this.visit_unpackarraydtype(node);\n    }\n\n    visit_memberdtype(node: XMLNode) {\n        throw new CompileError(null, `structs not supported`);\n    }\n\n    visit_constdtype(node: XMLNode) {\n        // TODO? throw new CompileError(null, `constant data types not supported`);\n    }\n\n    visit_paramtypedtype(node: XMLNode) {\n        // TODO? throw new CompileError(null, `constant data types not supported`);\n    }\n\n    visit_unpackarraydtype(node: XMLNode): HDLDataType {\n        let id = node.attrs['id'];\n        let sub_dtype_id = node.attrs['sub_dtype_id'];\n        let range = node.children[0].obj as HDLBinop;\n        if (isConstExpr(range.left) && isConstExpr(range.right)) {\n            var dtype: HDLUnpackArray = {\n                $loc: this.parseSourceLocation(node),\n                subtype: null,\n                low: range.left,\n                high: range.right,\n            }\n            this.dtypes[id] = dtype;\n            this.defer(() => {\n                dtype.subtype = this.dtypes[sub_dtype_id];\n                if (!dtype.subtype) throw new CompileError(this.cur_loc, `Unknown data type ${sub_dtype_id} for array`);\n            })\n            return dtype;\n        } else {\n            throw new CompileError(this.cur_loc, `could not parse constant exprs in array`)\n        }\n    }\n\n    visit_senitem(node: XMLNode) : HDLSensItem {\n        var edgeType = node.attrs['edgeType'];\n        if (edgeType != \"POS\" && edgeType != \"NEG\")\n            throw new CompileError(this.cur_loc, \"POS/NEG required\")\n        return {\n            $loc: this.parseSourceLocation(node),\n            edgeType: edgeType,\n            expr: node.obj\n        }\n    }\n\n    visit_text(node: XMLNode) {\n    }\n\n    visit_cstmt(node: XMLNode) {\n    }\n\n    visit_cfile(node: XMLNode) {\n    }\n\n    visit_typetable(node: XMLNode) {\n    }\n\n    visit_constpool(node: XMLNode) {\n    }\n\n    visit_comment(node: XMLNode) {\n    }\n\n    expectChildren(node: XMLNode, low: number, high: number) {\n        if (node.children.length < low || node.children.length > high)\n            throw new CompileError(this.cur_loc, `expected between ${low} and ${high} children`);\n    }\n\n    __visit_unop(node: XMLNode) : HDLUnop {\n        this.expectChildren(node, 1, 1);\n        var expr: HDLUnop = {\n            $loc: this.parseSourceLocation(node),\n            op: node.type,\n            dtype: null,\n            left: node.children[0].obj as HDLExpr,\n        }\n        this.deferDataType(node, expr);\n        return expr;\n    }\n\n    visit_extend(node: XMLNode) : HDLUnop {\n        var unop = this.__visit_unop(node) as HDLExtendop;\n        unop.width = parseInt(node.attrs['width']);\n        unop.widthminv = parseInt(node.attrs['widthminv']);\n        if (unop.width != 32) throw new CompileError(this.cur_loc, `extends width ${unop.width} != 32`)\n        return unop;\n    }\n\n    visit_extends(node: XMLNode) : HDLUnop {\n        return this.visit_extend(node);\n    }\n\n    __visit_binop(node: XMLNode) : HDLBinop {\n        this.expectChildren(node, 2, 2);\n        var expr: HDLBinop = {\n            $loc: this.parseSourceLocation(node),\n            op: node.type,\n            dtype: null,\n            left: node.children[0].obj as HDLExpr,\n            right: node.children[1].obj as HDLExpr,\n        }\n        this.deferDataType(node, expr);\n        return expr;\n    }\n\n    visit_if(node: XMLNode) : HDLTriop {\n        this.expectChildren(node, 2, 3);\n        var expr: HDLTriop = {\n            $loc: this.parseSourceLocation(node),\n            op: 'if',\n            dtype: null,\n            cond: node.children[0].obj as HDLExpr,\n            left: node.children[1].obj as HDLExpr,\n            right: node.children[2] && node.children[2].obj as HDLExpr,\n        }\n        return expr;\n    }\n\n    // while and for loops\n    visit_while(node: XMLNode) : HDLWhileOp {\n        this.expectChildren(node, 2, 4);\n        var expr: HDLWhileOp = {\n            $loc: this.parseSourceLocation(node),\n            op: 'while',\n            dtype: null,\n            precond: node.children[0].obj as HDLExpr,\n            loopcond: node.children[1].obj as HDLExpr,\n            body: node.children[2] && node.children[2].obj as HDLExpr,\n            inc: node.children[3] && node.children[3].obj as HDLExpr,\n        }\n        return expr;\n    }\n\n    __visit_triop(node: XMLNode) : HDLBinop {\n        this.expectChildren(node, 3, 3);\n        var expr: HDLTriop = {\n            $loc: this.parseSourceLocation(node),\n            op: node.type,\n            dtype: null,\n            cond: node.children[0].obj as HDLExpr,\n            left: node.children[1].obj as HDLExpr,\n            right: node.children[2].obj as HDLExpr,\n        }\n        this.deferDataType(node, expr);\n        return expr;\n    }\n\n    __visit_func(node: XMLNode) : HDLFuncCall {\n        var expr = {\n            $loc: this.parseSourceLocation(node),\n            dtype: null,\n            funcname: node.attrs['func'] || ('$' + node.type),\n            args: node.children.map(n => n.obj as HDLExpr)\n        }\n        this.deferDataType(node, expr);\n        return expr;\n    }\n\n    visit_not(node: XMLNode) { return this.__visit_unop(node); }\n    visit_negate(node: XMLNode) { return this.__visit_unop(node); }\n    visit_redand(node: XMLNode) { return this.__visit_unop(node); }\n    visit_redor(node: XMLNode) { return this.__visit_unop(node); }\n    visit_redxor(node: XMLNode) { return this.__visit_unop(node); }\n    visit_initial(node: XMLNode) { return this.__visit_unop(node); }\n    visit_ccast(node: XMLNode) { return this.__visit_unop(node); }\n    visit_creset(node: XMLNode) { return this.__visit_unop(node); }\n    visit_creturn(node: XMLNode) { return this.__visit_unop(node); }\n\n    visit_contassign(node: XMLNode) { return this.__visit_binop(node); }\n    visit_assigndly(node: XMLNode) { return this.__visit_binop(node); }\n    visit_assignpre(node: XMLNode) { return this.__visit_binop(node); }\n    visit_assignpost(node: XMLNode) { return this.__visit_binop(node); }\n    visit_assign(node: XMLNode) { return this.__visit_binop(node); }\n    visit_arraysel(node: XMLNode) { return this.__visit_binop(node); }\n    visit_wordsel(node: XMLNode) { return this.__visit_binop(node); }\n\n    visit_eq(node: XMLNode) { return this.__visit_binop(node); }\n    visit_neq(node: XMLNode) { return this.__visit_binop(node); }\n    visit_lte(node: XMLNode) { return this.__visit_binop(node); }\n    visit_gte(node: XMLNode) { return this.__visit_binop(node); }\n    visit_lt(node: XMLNode) { return this.__visit_binop(node); }\n    visit_gt(node: XMLNode) { return this.__visit_binop(node); }\n    visit_and(node: XMLNode) { return this.__visit_binop(node); }\n    visit_or(node: XMLNode) { return this.__visit_binop(node); }\n    visit_xor(node: XMLNode) { return this.__visit_binop(node); }\n    visit_add(node: XMLNode) { return this.__visit_binop(node); }\n    visit_sub(node: XMLNode) { return this.__visit_binop(node); }\n    visit_concat(node: XMLNode) { return this.__visit_binop(node); } // TODO?\n    visit_shiftl(node: XMLNode) { return this.__visit_binop(node); }\n    visit_shiftr(node: XMLNode) { return this.__visit_binop(node); }\n    visit_shiftrs(node: XMLNode) { return this.__visit_binop(node); }\n\n    visit_mul(node: XMLNode) { return this.__visit_binop(node); }\n    visit_div(node: XMLNode) { return this.__visit_binop(node); }\n    visit_moddiv(node: XMLNode) { return this.__visit_binop(node); }\n    visit_muls(node: XMLNode) { return this.__visit_binop(node); }\n    visit_divs(node: XMLNode) { return this.__visit_binop(node); }\n    visit_moddivs(node: XMLNode) { return this.__visit_binop(node); }\n    visit_gts(node: XMLNode) { return this.__visit_binop(node); }\n    visit_lts(node: XMLNode) { return this.__visit_binop(node); }\n    visit_gtes(node: XMLNode) { return this.__visit_binop(node); }\n    visit_ltes(node: XMLNode) { return this.__visit_binop(node); }\n    // TODO: more?\n\n    visit_range(node: XMLNode) { return this.__visit_binop(node); }\n\n    visit_cond(node: XMLNode) { return this.__visit_triop(node); }\n    visit_condbound(node: XMLNode) { return this.__visit_triop(node); }\n    visit_sel(node: XMLNode) { return this.__visit_triop(node); }\n\n    visit_changedet(node: XMLNode) : HDLBinop {\n        if (node.children.length == 0)\n            return null; //{ op: \"changedet\", dtype:null, left:null, right:null }\n        else\n            return this.__visit_binop(node);\n    }\n\n    visit_ccall(node: XMLNode) { return this.__visit_func(node); }\n    visit_finish(node: XMLNode) { return this.__visit_func(node); }\n    visit_stop(node: XMLNode) { return this.__visit_func(node); }\n    visit_rand(node: XMLNode) { return this.__visit_func(node); }\n    visit_time(node: XMLNode) { return this.__visit_func(node); }\n\n    visit_display(node: XMLNode) { return null; }\n    visit_sformatf(node: XMLNode) { return null; }\n    visit_scopename(node: XMLNode) { return null; }\n\n    visit_readmem(node: XMLNode) { return this.__visit_func(node); }\n\n    //\n\n    xml_open(node: XMLNode) {\n        this.cur_node = node;\n        var method = this[`open_${node.type}`];\n        if (method) {\n            return method.bind(this)(node);\n        }\n    }\n    \n    xml_close(node: XMLNode) {\n        this.cur_node = node;\n        var method = this[`visit_${node.type}`];\n        if (method) {\n            return method.bind(this)(node);\n        } else {\n            throw new CompileError(this.cur_loc, `no visitor for ${node.type}`)\n        }\n    }\n\n    parse(xmls: string) {\n        parseXMLPoorly(xmls, this.xml_open.bind(this), this.xml_close.bind(this));\n        this.cur_node = null;\n        this.run_deferred();\n    }\n}\n\n", "\n// TODO: must be a better way to do all this\n\nimport { WorkerError, CodeListingMap, SourceLocation } from \"../../common/workertypes\";\nimport { Assembler } from \"../assembler\";\nimport * as vxmlparser from '../../common/hdl/vxmlparser';\nimport { getWorkFileAsString, BuildStep, BuildStepResult, gatherFiles, loadNative, staleFiles, makeErrorMatcher, emglobal, moduleInstFn, print_fn, populateFiles, execMain, putWorkFile, anyTargetChanged, endtime, getWASMMemory, starttime, populateExtraFiles, setupFS } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\"\n\nfunction detectModuleName(code: string) {\n    var m = /^\\s*module\\s+(\\w+_top)\\b/m.exec(code)\n        || /^\\s*module\\s+(top|t)\\b/m.exec(code)\n        || /^\\s*module\\s+(\\w+)\\b/m.exec(code);\n    return m ? m[1] : null;\n}\n\nfunction detectTopModuleName(code: string) {\n    var topmod = detectModuleName(code) || \"top\";\n    var m = /^\\s*module\\s+(\\w+?_top)/m.exec(code);\n    if (m && m[1]) topmod = m[1];\n    return topmod;\n}\n\n// cached stuff (TODO)\nvar jsasm_module_top;\nvar jsasm_module_output;\nvar jsasm_module_key;\n\nfunction compileJSASM(asmcode: string, platform, options, is_inline) {\n    var asm = new Assembler(null);\n    var includes = [];\n    asm.loadJSON = (filename: string) => {\n        var jsontext = getWorkFileAsString(filename);\n        if (!jsontext) throw Error(\"could not load \" + filename);\n        return JSON.parse(jsontext);\n    };\n    asm.loadInclude = (filename) => {\n        if (!filename.startsWith('\"') || !filename.endsWith('\"'))\n            return 'Expected filename in \"double quotes\"';\n        filename = filename.substr(1, filename.length - 2);\n        includes.push(filename);\n    };\n    var loaded_module = false;\n    asm.loadModule = (top_module: string) => {\n        // compile last file in list\n        loaded_module = true;\n        var key = top_module + '/' + includes;\n        if (jsasm_module_key != key) {\n            jsasm_module_key = key;\n            jsasm_module_output = null;\n        }\n        jsasm_module_top = top_module;\n        var main_filename = includes[includes.length - 1];\n        // TODO: take out .asm dependency\n        var voutput = compileVerilator({ platform: platform, files: includes, path: main_filename, tool: 'verilator' });\n        if (voutput)\n            jsasm_module_output = voutput;\n        return null; // no error\n    }\n    var result = asm.assembleFile(asmcode);\n    if (loaded_module && jsasm_module_output) {\n        // errors? return them\n        if (jsasm_module_output.errors && jsasm_module_output.errors.length)\n            return jsasm_module_output;\n        // return program ROM array\n        var asmout = result.output;\n        // TODO: unify\n        result.output = jsasm_module_output.output;\n        // TODO: typecheck this garbage\n        (result as any).output.program_rom = asmout;\n        // TODO: not cpu_platform__DOT__program_rom anymore, make const\n        (result as any).output.program_rom_variable = jsasm_module_top + \"$program_rom\";\n        (result as any).listings = {};\n        (result as any).listings[options.path] = { lines: result.lines };\n        return result;\n    } else {\n        return result;\n    }\n}\n\nexport function compileJSASMStep(step: BuildStep): BuildStepResult {\n    gatherFiles(step);\n    var code = getWorkFileAsString(step.path);\n    var platform = step.platform || 'verilog';\n    return compileJSASM(code, platform, step, false);\n}\n\nfunction compileInlineASM(code: string, platform, options, errors, asmlines) {\n    code = code.replace(/__asm\\b([\\s\\S]+?)\\b__endasm\\b/g, function (s, asmcode, index) {\n        var firstline = code.substr(0, index).match(/\\n/g).length;\n        var asmout = compileJSASM(asmcode, platform, options, true);\n        if (asmout.errors && asmout.errors.length) {\n            for (var i = 0; i < asmout.errors.length; i++) {\n                asmout.errors[i].line += firstline;\n                errors.push(asmout.errors[i]);\n            }\n            return \"\";\n        } else if (asmout.output) {\n            let s = \"\";\n            var out = asmout.output;\n            for (var i = 0; i < out.length; i++) {\n                if (i > 0) {\n                    s += \",\";\n                    if ((i & 0xff) == 0) s += \"\\n\";\n                }\n                s += 0 | out[i];\n            }\n            if (asmlines) {\n                var al = asmout.lines;\n                for (var i = 0; i < al.length; i++) {\n                    al[i].line += firstline;\n                    asmlines.push(al[i]);\n                }\n            }\n            return s;\n        }\n    });\n    return code;\n}\n\nexport function compileVerilator(step: BuildStep): BuildStepResult {\n    loadNative(\"verilator_bin\");\n    var platform = step.platform || 'verilog';\n    var errors: WorkerError[] = [];\n    gatherFiles(step);\n    // compile verilog if files are stale\n    if (staleFiles(step, [xmlPath])) {\n        // TODO: %Error: Specified --top-module 'ALU' isn't at the top level, it's under another cell 'cpu'\n        // TODO: ... Use \"/* verilator lint_off BLKSEQ */\" and lint_on around source to disable this message.\n        var match_fn = makeErrorMatcher(errors, /%(.+?): (.+?):(\\d+)?[:]?\\s*(.+)/i, 3, 4, step.path, 2);\n        var verilator_mod: EmscriptenModule = emglobal.verilator_bin({\n            instantiateWasm: moduleInstFn('verilator_bin'),\n            noInitialRun: true,\n            noExitRuntime: true,\n            print: print_fn,\n            printErr: match_fn,\n            wasmMemory: getWASMMemory(), // reuse memory\n            //INITIAL_MEMORY:256*1024*1024,\n        });\n        var code = getWorkFileAsString(step.path);\n        var topmod = detectTopModuleName(code);\n        var FS = verilator_mod.FS;\n        var listings: CodeListingMap = {};\n        // process inline assembly, add listings where found\n        populateFiles(step, FS, {\n            mainFilePath: step.path,\n            processFn: (path, code) => {\n                if (typeof code === 'string') {\n                    let asmlines = [];\n                    code = compileInlineASM(code, platform, step, errors, asmlines);\n                    if (asmlines.length) {\n                        listings[path] = { lines: asmlines };\n                    }\n                }\n                return code;\n            }\n        });\n        starttime();\n        var xmlPath = `obj_dir/V${topmod}.xml`;\n        try {\n            var args = [\"--cc\", \"-O3\",\n                \"-DEXT_INLINE_ASM\", \"-DTOPMOD__\" + topmod, \"-D__8BITWORKSHOP__\",\n                \"-Wall\",\n                \"-Wno-DECLFILENAME\", \"-Wno-UNUSED\", \"-Wno-EOFNEWLINE\", \"-Wno-PROCASSWIRE\",\n                \"--x-assign\", \"fast\", \"--noassert\", \"--pins-sc-biguint\",\n                \"--debug-check\", // for XML output\n                \"--top-module\", topmod, step.path]\n            execMain(step, verilator_mod, args);\n        } catch (e) {\n            console.log(e);\n            errors.push({ line: 0, msg: \"Compiler internal error: \" + e });\n        }\n        endtime(\"compile\");\n        // remove boring errors\n        errors = errors.filter(function (e) { return !/Exiting due to \\d+/.exec(e.msg); }, errors);\n        errors = errors.filter(function (e) { return !/Use [\"][/][*]/.exec(e.msg); }, errors);\n        if (errors.length) {\n            return { errors: errors };\n        }\n        starttime();\n        var xmlParser = new vxmlparser.VerilogXMLParser();\n        try {\n            var xmlContent = FS.readFile(xmlPath, { encoding: 'utf8' });\n            var xmlScrubbed = xmlContent.replace(/ fl=\".+?\" loc=\".+?\"/g, '');\n            // TODO: this squelches the .asm listing\n            //listings[step.prefix + '.xml'] = {lines:[],text:xmlContent};\n            putWorkFile(xmlPath, xmlScrubbed); // don't detect changes in source position\n            if (!anyTargetChanged(step, [xmlPath]))\n                return;\n            xmlParser.parse(xmlContent);\n        } catch (e) {\n            console.log(e, e.stack);\n            if (e.$loc != null) {\n                let $loc = e.$loc as SourceLocation;\n                errors.push({ msg: \"\" + e, path: $loc.path, line: $loc.line });\n            } else {\n                errors.push({ line: 0, msg: \"\" + e });\n            }\n            return { errors: errors, listings: listings };\n        } finally {\n            endtime(\"parse\");\n        }\n        return {\n            output: xmlParser,\n            errors: errors,\n            listings: listings,\n        };\n    }\n}\n\n// TODO: test\nexport function compileYosys(step: BuildStep): BuildStepResult {\n    loadNative(\"yosys\");\n    var code = step.code;\n    var errors = [];\n    var match_fn = makeErrorMatcher(errors, /ERROR: (.+?) in line (.+?[.]v):(\\d+)[: ]+(.+)/i, 3, 4, step.path);\n    starttime();\n    var yosys_mod: EmscriptenModule = emglobal.yosys({\n        instantiateWasm: moduleInstFn('yosys'),\n        noInitialRun: true,\n        print: print_fn,\n        printErr: match_fn,\n    });\n    endtime(\"create module\");\n    var topmod = detectTopModuleName(code);\n    var FS = yosys_mod.FS;\n    FS.writeFile(topmod + \".v\", code);\n    starttime();\n    try {\n        execMain(step, yosys_mod, [\"-q\", \"-o\", topmod + \".json\", \"-S\", topmod + \".v\"]);\n    } catch (e) {\n        console.log(e);\n        endtime(\"compile\");\n        return { errors: errors };\n    }\n    endtime(\"compile\");\n    //TODO: filename in errors\n    if (errors.length) return { errors: errors };\n    try {\n        var json_file = FS.readFile(topmod + \".json\", { encoding: 'utf8' });\n        var json = JSON.parse(json_file);\n        console.log(json);\n        return { output: json, errors: errors }; // TODO\n    } catch (e) {\n        console.log(e);\n        return { errors: errors };\n    }\n}\n\nexport function compileSilice(step: BuildStep): BuildStepResult {\n    loadNative(\"silice\");\n    var params = step.params;\n    gatherFiles(step, { mainFilePath: \"main.ice\" });\n    var destpath = step.prefix + '.v';\n    var errors: WorkerError[] = [];\n    var errfile: string;\n    var errline: number;\n    if (staleFiles(step, [destpath])) {\n        //[preprocessor] 97]  attempt to concatenate a nil value (global 'addrW')\n        var match_fn = (s: string) => {\n            s = (s as any).replaceAll(/\\033\\[\\d+\\w/g, '');\n            var mf = /file:\\s*(\\w+)/.exec(s);\n            var ml = /line:\\s+(\\d+)/.exec(s);\n            var preproc = /\\[preprocessor\\] (\\d+)\\] (.+)/.exec(s);\n            if (mf) errfile = mf[1];\n            else if (ml) errline = parseInt(ml[1]);\n            else if (preproc) {\n                errors.push({ path: step.path, line: parseInt(preproc[1]), msg: preproc[2] });\n            }\n            else if (errfile && errline && s.length > 1) {\n                if (s.length > 2) {\n                    errors.push({ path: errfile + \".ice\", line: errline, msg: s });\n                } else {\n                    errfile = null;\n                    errline = null;\n                }\n            }\n            else console.log(s);\n        }\n        var silice: EmscriptenModule = emglobal.silice({\n            instantiateWasm: moduleInstFn('silice'),\n            noInitialRun: true,\n            print: match_fn,\n            printErr: match_fn,\n        });\n        var FS = silice.FS;\n        setupFS(FS, 'Silice');\n        populateFiles(step, FS);\n        populateExtraFiles(step, FS, params.extra_compile_files);\n        const FWDIR = '/share/frameworks';\n        var args = [\n            '-D', 'NTSC=1',\n            '--frameworks_dir', FWDIR,\n            '-f', `/8bitworkshop.v`,\n            '-o', destpath,\n            step.path];\n        execMain(step, silice, args);\n        if (errors.length)\n            return { errors: errors };\n        var vout = FS.readFile(destpath, { encoding: 'utf8' });\n        putWorkFile(destpath, vout);\n    }\n    return {\n        nexttool: \"verilator\",\n        path: destpath,\n        args: [destpath],\n        files: [destpath],\n    };\n}\n\n", "import { CodeListingMap, WorkerError } from \"../../common/workertypes\";\nimport { BuildStep, BuildStepResult, load, emglobal, print_fn, populateFiles, execMain, putWorkFile, parseListing, loadNative, gatherFiles, staleFiles, moduleInstFn, getWorkFileAsString, preprocessMCPP, fixParamsWithDefines, msvcErrorMatcher, populateExtraFiles, anyTargetChanged, parseSourceLines } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\";\n\n// http://datapipe-blackbeltsystems.com/windows/flex/asm09.html\nexport function assembleXASM6809(step: BuildStep): BuildStepResult {\n    load(\"xasm6809\");\n    var alst = \"\";\n    var lasterror = null;\n    var errors = [];\n    function match_fn(s) {\n        alst += s;\n        alst += \"\\n\";\n        if (lasterror) {\n            var line = parseInt(s.slice(0, 5)) || 0;\n            errors.push({\n                line: line,\n                msg: lasterror\n            });\n            lasterror = null;\n        }\n        else if (s.startsWith(\"***** \")) {\n            lasterror = s.slice(6);\n        }\n    }\n    var Module: EmscriptenModule = emglobal.xasm6809({\n        noInitialRun: true,\n        //logReadFiles:true,\n        print: match_fn,\n        printErr: print_fn\n    });\n    var FS = Module.FS;\n    //setupFS(FS);\n    populateFiles(step, FS, {\n        mainFilePath: 'main.asm'\n    });\n    var binpath = step.prefix + '.bin';\n    var lstpath = step.prefix + '.lst'; // in stdout\n    execMain(step, Module, [\"-c\", \"-l\", \"-s\", \"-y\", \"-o=\" + binpath, step.path]);\n    if (errors.length)\n        return { errors: errors };\n    var aout = FS.readFile(binpath, { encoding: 'binary' });\n    if (aout.length == 0) {\n        errors.push({ line: 0, msg: \"Empty output file\" });\n        return { errors: errors };\n    }\n    putWorkFile(binpath, aout);\n    putWorkFile(lstpath, alst);\n    // TODO: symbol map\n    //mond09     0000     \n    var symbolmap = {};\n    //00005  W 0003 [ 8] A6890011            lda   >PALETTE,x\n    //00012    0011      0C0203              fcb   12,2,3\n    var asmlines = parseListing(alst, /^\\s*([0-9]+) .+ ([0-9A-F]+)\\s+\\[([0-9 ]+)\\]\\s+([0-9A-F]+) (.*)/i, 1, 2, 4, 3);\n    var listings: CodeListingMap = {};\n    listings[step.prefix + '.lst'] = { lines: asmlines, text: alst };\n    return {\n        output: aout,\n        listings: listings,\n        errors: errors,\n        symbolmap: symbolmap,\n    };\n}\n\nexport function compileCMOC(step: BuildStep): BuildStepResult {\n    loadNative(\"cmoc\");\n    var params = step.params;\n    // stderr\n    var re_err1 = /^[/]*([^:]*):(\\d+): (.+)$/;\n    var errors: WorkerError[] = [];\n    var errline = 0;\n    function match_fn(s) {\n        var matches = re_err1.exec(s);\n        if (matches) {\n            errors.push({\n                line: parseInt(matches[2]),\n                msg: matches[3],\n                path: matches[1] || step.path\n            });\n        } else {\n            console.log(s);\n        }\n    }\n    gatherFiles(step, { mainFilePath: \"main.c\" });\n    var destpath = step.prefix + '.s';\n    if (staleFiles(step, [destpath])) {\n        var args = ['-S', '-Werror', '-V',\n            '-I/share/include',\n            '-I.',\n            step.path];\n        var CMOC: EmscriptenModule = emglobal.cmoc({\n            instantiateWasm: moduleInstFn('cmoc'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: match_fn,\n            printErr: match_fn,\n        });\n        // load source file and preprocess\n        var code = getWorkFileAsString(step.path);\n        var preproc = preprocessMCPP(step, null);\n        if (preproc.errors) {\n            return { errors: preproc.errors }\n        }\n        else code = preproc.code;\n        // set up filesystem\n        var FS = CMOC.FS;\n        //setupFS(FS, '65-'+getRootBasePlatform(step.platform));\n        populateFiles(step, FS);\n        FS.writeFile(step.path, code);\n        fixParamsWithDefines(step.path, params);\n        if (params.extra_compile_args) {\n            args.unshift.apply(args, params.extra_compile_args);\n        }\n        execMain(step, CMOC, args);\n        if (errors.length)\n            return { errors: errors };\n        var asmout = FS.readFile(destpath, { encoding: 'utf8' });\n        if (step.params.set_stack_end)\n            asmout = asmout.replace('stack space in bytes', `\\n lds #${step.params.set_stack_end}\\n`)\n        putWorkFile(destpath, asmout);\n    }\n    return {\n        nexttool: \"lwasm\",\n        path: destpath,\n        args: [destpath],\n        files: [destpath],\n    };\n}\n\nexport function assembleLWASM(step: BuildStep): BuildStepResult {\n    loadNative(\"lwasm\");\n    var errors = [];\n    gatherFiles(step, { mainFilePath: \"main.s\" });\n    var objpath = step.prefix + \".o\";\n    var lstpath = step.prefix + \".lst\";\n    const isRaw = step.path.endsWith('.asm');\n    if (staleFiles(step, [objpath, lstpath])) {\n        var objout, lstout;\n        var args = ['-9', '-I/share/asminc', '-o' + objpath, '-l' + lstpath, step.path];\n        args.push(isRaw ? '-r' : '--obj');\n        var LWASM: EmscriptenModule = emglobal.lwasm({\n            instantiateWasm: moduleInstFn('lwasm'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: print_fn,\n            printErr: msvcErrorMatcher(errors),\n        });\n        var FS = LWASM.FS;\n        //setupFS(FS, '65-'+getRootBasePlatform(step.platform));\n        populateFiles(step, FS);\n        fixParamsWithDefines(step.path, step.params);\n        execMain(step, LWASM, args);\n        if (errors.length)\n            return { errors: errors };\n        objout = FS.readFile(objpath, { encoding: 'binary' });\n        lstout = FS.readFile(lstpath, { encoding: 'utf8' });\n        putWorkFile(objpath, objout);\n        putWorkFile(lstpath, lstout);\n        if (isRaw) {\n            return {\n                output: objout\n            };\n        }\n    }\n    return {\n        linktool: \"lwlink\",\n        files: [objpath, lstpath],\n        args: [objpath]\n    };\n}\n\nexport function linkLWLINK(step: BuildStep): BuildStepResult {\n    loadNative(\"lwlink\");\n    var params = step.params;\n    gatherFiles(step);\n    var binpath = \"main\";\n    if (staleFiles(step, [binpath])) {\n        var errors = [];\n        var LWLINK: EmscriptenModule = emglobal.lwlink({\n            instantiateWasm: moduleInstFn('lwlink'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: print_fn,\n            printErr: function (s) {\n                if (s.startsWith(\"Warning:\"))\n                    console.log(s);\n                else\n                    errors.push({ msg: s, line: 0 });\n            }\n        });\n        var FS = LWLINK.FS;\n        //setupFS(FS, '65-'+getRootBasePlatform(step.platform));\n        populateFiles(step, FS);\n        populateExtraFiles(step, FS, params.extra_link_files);\n        var libargs = params.extra_link_args || [];\n        var args = [\n            '-L.',\n            '--entry=program_start',\n            '--raw',\n            '--output=main',\n            '--map=main.map'].concat(libargs, step.args);\n        console.log(args);\n        execMain(step, LWLINK, args);\n        if (errors.length)\n            return { errors: errors };\n        var aout = FS.readFile(\"main\", { encoding: 'binary' });\n        var mapout = FS.readFile(\"main.map\", { encoding: 'utf8' });\n        putWorkFile(\"main\", aout);\n        putWorkFile(\"main.map\", mapout);\n        // return unchanged if no files changed\n        if (!anyTargetChanged(step, [\"main\", \"main.map\"]))\n            return;\n        // parse symbol map\n        //console.log(mapout);\n        var symbolmap = {};\n        var segments = [];\n        for (var s of mapout.split(\"\\n\")) {\n            var toks = s.split(\" \");\n            // TODO: use regex\n            if (toks[0] == 'Symbol:') {\n                let ident = toks[1];\n                let ofs = parseInt(toks[4], 16);\n                if (ident && ofs >= 0 \n                  && !ident.startsWith(\"l_\") \n                  //&& !/^L\\d+$/.test(ident)\n                  && !ident.startsWith('funcsize_')\n                  && !ident.startsWith('funcend_')) {\n                    symbolmap[ident] = ofs;\n                }\n            }\n            else if (toks[0] == 'Section:') {\n                let seg = toks[1];\n                let segstart = parseInt(toks[5], 16);\n                let segsize = parseInt(toks[7], 16);\n                segments.push({ name: seg, start: segstart, size: segsize });\n            }\n        }\n        // build listings\n        const re_segment = /\\s*SECTION\\s+(\\w+)/i;\n        const re_function = /\\s*([0-9a-f]+).+?(\\w+)\\s+EQU\\s+[*]/i;\n        var listings: CodeListingMap = {};\n        for (var fn of step.files) {\n            if (fn.endsWith('.lst')) {\n                // TODO\n                var lstout = FS.readFile(fn, { encoding: 'utf8' });\n                var asmlines = parseListing(lstout, /^([0-9A-F]+)\\s+([0-9A-F]+)\\s+[(]\\s*(.+?)[)]:(\\d+) (.*)/i, 4, 1, 2, 3, re_function, re_segment);\n                for (let l of asmlines) {\n                    l.offset += symbolmap[l.func] || 0;\n                }\n                // * Line //threed.c:117: init of variable e\n                var srclines = parseSourceLines(lstout, /Line .+?:(\\d+)/i, /^([0-9A-F]{4})/i, re_function, re_segment);\n                for (let l of srclines) {\n                    l.offset += symbolmap[l.func] || 0;\n                }\n                putWorkFile(fn, lstout);\n                // strip out left margin\n                lstout = lstout.split('\\n').map(l => l.substring(0,15) + l.substring(56)).join('\\n')\n                // TODO: you have to get rid of all source lines to get asm listing\n                listings[fn] = {\n                    asmlines: srclines.length ? asmlines : null,\n                    lines: srclines.length ? srclines : asmlines,\n                    text: lstout\n                };\n            }\n        }\n        return {\n            output: aout, //.slice(0),\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\n", "\nimport { WorkerError, CodeListingMap } from \"../../common/workertypes\";\nimport { anyTargetChanged, BuildStep, BuildStepResult, emglobal, EmscriptenModule, execMain, gatherFiles, loadNative, makeErrorMatcher, moduleInstFn, parseListing, populateFiles, print_fn, putWorkFile, staleFiles } from \"../workermain\"\n\n\n// http://www.nespowerpak.com/nesasm/\nexport function assembleNESASM(step: BuildStep): BuildStepResult {\n    loadNative(\"nesasm\");\n    var re_filename = /\\#\\[(\\d+)\\]\\s+(\\S+)/;\n    var re_insn = /\\s+(\\d+)\\s+([0-9A-F]+):([0-9A-F]+)/;\n    var re_error = /\\s+(.+)/;\n    var errors: WorkerError[] = [];\n    var state = 0;\n    var lineno = 0;\n    var filename;\n    function match_fn(s) {\n        var m;\n        switch (state) {\n            case 0:\n                m = re_filename.exec(s);\n                if (m) {\n                    filename = m[2];\n                }\n                m = re_insn.exec(s);\n                if (m) {\n                    lineno = parseInt(m[1]);\n                    state = 1;\n                }\n                break;\n            case 1:\n                m = re_error.exec(s);\n                if (m) {\n                    errors.push({ path: filename, line: lineno, msg: m[1] });\n                    state = 0;\n                }\n                break;\n        }\n    }\n    var Module: EmscriptenModule = emglobal.nesasm({\n        instantiateWasm: moduleInstFn('nesasm'),\n        noInitialRun: true,\n        print: match_fn\n    });\n    var FS = Module.FS;\n    populateFiles(step, FS, {\n        mainFilePath: 'main.a'\n    });\n    var binpath = step.prefix + '.nes';\n    var lstpath = step.prefix + '.lst';\n    var sympath = step.prefix + '.fns';\n    execMain(step, Module, [step.path, '-s', \"-l\", \"2\"]);\n    // parse main listing, get errors and listings for each file\n    var listings: CodeListingMap = {};\n    try {\n        var alst = FS.readFile(lstpath, { 'encoding': 'utf8' });\n        //   16  00:C004  8E 17 40    STX $4017    ; disable APU frame IRQ\n        var asmlines = parseListing(alst, /^\\s*(\\d+)\\s+([0-9A-F]+):([0-9A-F]+)\\s+([0-9A-F ]+?)  (.*)/i, 1, 3, 4);\n        putWorkFile(lstpath, alst);\n        listings[lstpath] = {\n            lines: asmlines,\n            text: alst\n        };\n    } catch (e) {\n        //\n    }\n    if (errors.length) {\n        return { errors: errors };\n    }\n    // read binary rom output and symbols\n    var aout, asym;\n    aout = FS.readFile(binpath);\n    try {\n        asym = FS.readFile(sympath, { 'encoding': 'utf8' });\n    } catch (e) {\n        console.log(e);\n        errors.push({ line: 0, msg: \"No symbol table generated, maybe missing ENDM or segment overflow?\" });\n        return { errors: errors }\n    }\n    putWorkFile(binpath, aout);\n    putWorkFile(sympath, asym);\n    if (alst) putWorkFile(lstpath, alst); // listing optional (use LIST)\n    // return unchanged if no files changed\n    if (!anyTargetChanged(step, [binpath, sympath]))\n        return;\n    // parse symbols\n    var symbolmap = {};\n    for (var s of asym.split(\"\\n\")) {\n        if (!s.startsWith(';')) {\n            var m = /(\\w+)\\s+=\\s+[$]([0-9A-F]+)/.exec(s);\n            if (m) {\n                symbolmap[m[1]] = parseInt(m[2], 16);\n            }\n        }\n    }\n    return {\n        output: aout,\n        listings: listings,\n        errors: errors,\n        symbolmap: symbolmap,\n    };\n}\n\n\n/*\n------+-------------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------\nLine | # File       Line | Line Type   | MX |  Reloc  | Size | Address   Object Code |  Source Code                                                      \n------+-------------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------\n  1 |  1 zap.asm      1 | Unknown     | ?? |         |   -1 | 00/FFFF               |             broak                       \n  2 |  1 zap.asm      2 | Comment     | ?? |         |   -1 | 00/FFFF               | * SPACEGAME\n  \n    => [Error] Impossible to decode address mode for instruction 'BNE  KABOOM!' (line 315, file 'zap.asm') : The number of element in 'KABOOM!' is even (should be value [operator value [operator value]...]).\n    => [Error] Unknown line 'foo' in source file 'zap.asm' (line 315)\n        => Creating Object file 'pcs.bin'\n        => Creating Output file 'pcs.bin_S01__Output.txt'\n\n*/\nexport function assembleMerlin32(step: BuildStep): BuildStepResult {\n    loadNative(\"merlin32\");\n    var errors = [];\n    var lstfiles = [];\n    gatherFiles(step, { mainFilePath: \"main.lnk\" });\n    var objpath = step.prefix + \".bin\";\n    if (staleFiles(step, [objpath])) {\n        var args = ['-v', step.path];\n        var merlin32: EmscriptenModule = emglobal.merlin32({\n            instantiateWasm: moduleInstFn('merlin32'),\n            noInitialRun: true,\n            print: (s: string) => {\n                var m = /\\s*=>\\s*Creating Output file '(.+?)'/.exec(s);\n                if (m) {\n                    lstfiles.push(m[1]);\n                }\n                var errpos = s.indexOf('Error');\n                if (errpos >= 0) {\n                    s = s.slice(errpos + 6).trim();\n                    var mline = /\\bline (\\d+)\\b/.exec(s);\n                    var mpath = /\\bfile '(.+?)'/.exec(s);\n                    errors.push({\n                        line: parseInt(mline[1]) || 0,\n                        msg: s,\n                        path: mpath[1] || step.path,\n                    });\n                }\n            },\n            printErr: print_fn,\n        });\n        var FS = merlin32.FS;\n        populateFiles(step, FS);\n        execMain(step, merlin32, args);\n        if (errors.length)\n            return { errors: errors };\n\n        var errout = null;\n        try {\n            errout = FS.readFile(\"error_output.txt\", { encoding: 'utf8' });\n        } catch (e) {\n            //\n        }\n\n        var objout = FS.readFile(objpath, { encoding: 'binary' });\n        putWorkFile(objpath, objout);\n        if (!anyTargetChanged(step, [objpath]))\n            return;\n\n        var symbolmap = {};\n        var segments = [];\n        var listings: CodeListingMap = {};\n        lstfiles.forEach((lstfn) => {\n            var lst = FS.readFile(lstfn, { encoding: 'utf8' }) as string;\n            lst.split('\\n').forEach((line) => {\n                var toks = line.split(/\\s*\\|\\s*/);\n                if (toks && toks[6]) {\n                    var toks2 = toks[1].split(/\\s+/);\n                    var toks3 = toks[6].split(/[:/]/, 4);\n                    var path = toks2[1];\n                    if (path && toks2[2] && toks3[1]) {\n                        var lstline = {\n                            line: parseInt(toks2[2]),\n                            offset: parseInt(toks3[1].trim(), 16),\n                            insns: toks3[2],\n                            cycles: null,\n                            iscode: false // TODO\n                        };\n                        var lst = listings[path];\n                        if (!lst) listings[path] = lst = { lines: [] };\n                        lst.lines.push(lstline);\n                        //console.log(path,toks2,toks3);\n                    }\n                }\n            });\n        });\n        return {\n            output: objout, //.slice(0),\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\n// README.md:2:5: parse error, expected: statement or variable assignment, integer variable, variable assignment\nexport function compileFastBasic(step: BuildStep): BuildStepResult {\n    // TODO: fastbasic-fp?\n    loadNative(\"fastbasic-int\");\n    var params = step.params;\n    gatherFiles(step, { mainFilePath: \"main.fb\" });\n    var destpath = step.prefix + '.s';\n    var errors = [];\n    if (staleFiles(step, [destpath])) {\n        var fastbasic: EmscriptenModule = emglobal.fastbasic({\n            instantiateWasm: moduleInstFn('fastbasic-int'),\n            noInitialRun: true,\n            print: print_fn,\n            printErr: makeErrorMatcher(errors, /(.+?):(\\d+):(\\d+):\\s*(.+)/, 2, 4, step.path, 1),\n        });\n        var FS = fastbasic.FS;\n        populateFiles(step, FS);\n        var libfile = 'fastbasic-int.lib'\n        params.libargs = [libfile];\n        params.cfgfile = params.fastbasic_cfgfile;\n        //params.extra_compile_args = [\"--asm-define\", \"NO_SMCODE\"];\n        params.extra_link_files = [libfile, params.cfgfile];\n        //fixParamsWithDefines(step.path, params);\n        var args = [step.path, destpath];\n        execMain(step, fastbasic, args);\n        if (errors.length)\n            return { errors: errors };\n        var asmout = FS.readFile(destpath, { encoding: 'utf8' });\n        putWorkFile(destpath, asmout);\n    }\n    return {\n        nexttool: \"ca65\",\n        path: destpath,\n        args: [destpath],\n        files: [destpath],\n    };\n}\n\n", "\nimport { CodeListingMap } from \"../../common/workertypes\";\nimport { anyTargetChanged, BuildStep, BuildStepResult, emglobal, EmscriptenModule, execMain, gatherFiles, loadNative, makeErrorMatcher, moduleInstFn, parseListing, populateFiles, print_fn, putWorkFile, staleFiles } from \"../workermain\"\n\n\nexport function assembleZMAC(step: BuildStep): BuildStepResult {\n  loadNative(\"zmac\");\n  var hexout, lstout, binout;\n  var errors = [];\n  var params = step.params;\n  gatherFiles(step, { mainFilePath: \"main.asm\" });\n  var lstpath = step.prefix + \".lst\";\n  var binpath = step.prefix + \".cim\";\n  if (staleFiles(step, [binpath, lstpath])) {\n    /*\n  error1.asm(4) : 'l18d4' Undeclared\n         JP      L18D4\n  \n  error1.asm(11): warning: 'foobar' treated as label (instruction typo?)\n      Add a colon or move to first column to stop this warning.\n  1 errors (see listing if no diagnostics appeared here)\n    */\n    var ZMAC: EmscriptenModule = emglobal.zmac({\n      instantiateWasm: moduleInstFn('zmac'),\n      noInitialRun: true,\n      //logReadFiles:true,\n      print: print_fn,\n      printErr: makeErrorMatcher(errors, /([^( ]+)\\s*[(](\\d+)[)]\\s*:\\s*(.+)/, 2, 3, step.path),\n    });\n    var FS = ZMAC.FS;\n    populateFiles(step, FS);\n    // TODO: don't know why CIM (hexary) doesn't work\n    execMain(step, ZMAC, ['-z', '-c', '--oo', 'lst,cim', step.path]);\n    if (errors.length) {\n      return { errors: errors };\n    }\n    lstout = FS.readFile(\"zout/\" + lstpath, { encoding: 'utf8' });\n    binout = FS.readFile(\"zout/\" + binpath, { encoding: 'binary' });\n    putWorkFile(binpath, binout);\n    putWorkFile(lstpath, lstout);\n    if (!anyTargetChanged(step, [binpath, lstpath]))\n      return;\n    //  230: 1739+7+x   017A  1600      L017A: LD      D,00h\n    var lines = parseListing(lstout, /\\s*(\\d+):\\s*([0-9a-f]+)\\s+([0-9a-f]+)\\s+(.+)/i, 1, 2, 3);\n    var listings: CodeListingMap = {};\n    listings[lstpath] = { lines: lines };\n    // parse symbol table\n    var symbolmap = {};\n    var sympos = lstout.indexOf('Symbol Table:');\n    if (sympos > 0) {\n      var symout = lstout.slice(sympos + 14);\n      symout.split('\\n').forEach(function (l) {\n        var m = l.match(/(\\S+)\\s+([= ]*)([0-9a-f]+)/i);\n        if (m) {\n          symbolmap[m[1]] = parseInt(m[3], 16);\n        }\n      });\n    }\n    return {\n      output: binout,\n      listings: listings,\n      errors: errors,\n      symbolmap: symbolmap\n    };\n  }\n}\n\n", "import { WorkerError, CodeListingMap } from \"../../common/workertypes\";\nimport { BuildStep, BuildStepResult, loadNative, gatherFiles, staleFiles, emglobal, moduleInstFn, getWorkFileAsString, preprocessMCPP, populateFiles, fixParamsWithDefines, execMain, putWorkFile, print_fn, msvcErrorMatcher, anyTargetChanged, parseListing } from \"../workermain\";\nimport { EmscriptenModule } from \"../workermain\"\n\n// http://www.techhelpmanual.com/829-program_startup___exit.html\nexport function compileSmallerC(step: BuildStep): BuildStepResult {\n  loadNative(\"smlrc\");\n  var params = step.params;\n  // stderr\n  var re_err1 = /^Error in \"[/]*(.+)\" [(](\\d+):(\\d+)[)]/;\n  var errors: WorkerError[] = [];\n  var errline = 0;\n  var errpath = step.path;\n  function match_fn(s) {\n    var matches = re_err1.exec(s);\n    if (matches) {\n      errline = parseInt(matches[2]);\n      errpath = matches[1];\n    } else {\n      errors.push({\n        line: errline,\n        msg: s,\n        path: errpath,\n      });\n    }\n  }\n  gatherFiles(step, { mainFilePath: \"main.c\" });\n  var destpath = step.prefix + '.asm';\n  if (staleFiles(step, [destpath])) {\n    var args = ['-seg16',\n      //'-nobss',\n      '-no-externs',\n      step.path, destpath];\n    var smlrc: EmscriptenModule = emglobal.smlrc({\n      instantiateWasm: moduleInstFn('smlrc'),\n      noInitialRun: true,\n      //logReadFiles:true,\n      print: match_fn,\n      printErr: match_fn,\n    });\n    // load source file and preprocess\n    var code = getWorkFileAsString(step.path);\n    var preproc = preprocessMCPP(step, null);\n    if (preproc.errors) {\n      return { errors: preproc.errors };\n    }\n    else code = preproc.code;\n    // set up filesystem\n    var FS = smlrc.FS;\n    //setupFS(FS, '65-'+getRootBasePlatform(step.platform));\n    populateFiles(step, FS);\n    FS.writeFile(step.path, code);\n    fixParamsWithDefines(step.path, params);\n    if (params.extra_compile_args) {\n      args.unshift.apply(args, params.extra_compile_args);\n    }\n    execMain(step, smlrc, args);\n    if (errors.length)\n      return { errors: errors };\n    var asmout = FS.readFile(destpath, { encoding: 'utf8' });\n    putWorkFile(destpath, asmout);\n  }\n  return {\n    nexttool: \"yasm\",\n    path: destpath,\n    args: [destpath],\n    files: [destpath],\n  };\n}\n\nexport function assembleYASM(step: BuildStep): BuildStepResult {\n  loadNative(\"yasm\");\n  var errors = [];\n  gatherFiles(step, { mainFilePath: \"main.asm\" });\n  var objpath = step.prefix + \".exe\";\n  var lstpath = step.prefix + \".lst\";\n  var mappath = step.prefix + \".map\";\n  if (staleFiles(step, [objpath])) {\n    var args = ['-X', 'vc',\n      '-a', 'x86', '-f', 'dosexe', '-p', 'nasm',\n      '-D', 'freedos',\n      //'-g', 'dwarf2',\n      //'-I/share/asminc',\n      '-o', objpath, '-l', lstpath, '--mapfile=' + mappath,\n      step.path];\n    // return yasm/*.ready*/\n    var YASM: EmscriptenModule = emglobal.yasm({\n      instantiateWasm: moduleInstFn('yasm'),\n      noInitialRun: true,\n      //logReadFiles:true,\n      print: print_fn,\n      printErr: msvcErrorMatcher(errors),\n    });\n    var FS = YASM.FS;\n    //setupFS(FS, '65-'+getRootBasePlatform(step.platform));\n    populateFiles(step, FS);\n    //fixParamsWithDefines(step.path, step.params);\n    execMain(step, YASM, args);\n    if (errors.length)\n      return { errors: errors };\n    var objout, lstout, mapout;\n    objout = FS.readFile(objpath, { encoding: 'binary' });\n    lstout = FS.readFile(lstpath, { encoding: 'utf8' });\n    mapout = FS.readFile(mappath, { encoding: 'utf8' });\n    putWorkFile(objpath, objout);\n    putWorkFile(lstpath, lstout);\n    //putWorkFile(mappath, mapout);\n    if (!anyTargetChanged(step, [objpath]))\n      return;\n    var symbolmap = {};\n    var segments = [];\n    var lines = parseListing(lstout, /\\s*(\\d+)\\s+([0-9a-f]+)\\s+([0-9a-f]+)\\s+(.+)/i, 1, 2, 3);\n    var listings: CodeListingMap = {};\n    listings[lstpath] = { lines: lines, text: lstout };\n    return {\n      output: objout, //.slice(0),\n      listings: listings,\n      errors: errors,\n      symbolmap: symbolmap,\n      segments: segments\n    };\n  }\n}\n\n", "\nimport { hex } from \"../../common/util\";\nimport { WorkerResult, CodeListingMap, WorkerError, SourceLine } from \"../../common/workertypes\";\nimport { anyTargetChanged, BuildStep, BuildStepResult, emglobal, EmscriptenModule, execMain, gatherFiles, getPrefix, getWorkFileAsString, loadNative, makeErrorMatcher, moduleInstFn, populateFiles, putWorkFile, re_crlf, staleFiles } from \"../workermain\"\n\nexport function assembleARMIPS(step: BuildStep): WorkerResult {\n    loadNative(\"armips\");\n    var errors = [];\n    gatherFiles(step, { mainFilePath: \"main.asm\" });\n    var objpath = \"main.bin\";\n    var lstpath = step.prefix + \".lst\";\n    var sympath = step.prefix + \".sym\";\n    //test.armips(3) error: Parse error '.arm'\n    var error_fn = makeErrorMatcher(errors, /^(.+?)\\((\\d+)\\)\\s+(fatal error|error|warning):\\s+(.+)/, 2, 4, step.path, 1);\n\n    if (staleFiles(step, [objpath])) {\n        var args = [step.path, '-temp', lstpath, '-sym', sympath, '-erroronwarning'];\n        var armips: EmscriptenModule = emglobal.armips({\n            instantiateWasm: moduleInstFn('armips'),\n            noInitialRun: true,\n            print: error_fn,\n            printErr: error_fn,\n        });\n\n        var FS = armips.FS;\n        var code = getWorkFileAsString(step.path);\n        code = `.arm.little :: .create \"${objpath}\",0 :: ${code}\n  .close`;\n        putWorkFile(step.path, code);\n        populateFiles(step, FS);\n        execMain(step, armips, args);\n        if (errors.length)\n            return { errors: errors };\n\n        var objout = FS.readFile(objpath, { encoding: 'binary' }) as Uint8Array;\n        putWorkFile(objpath, objout);\n        if (!anyTargetChanged(step, [objpath]))\n            return;\n\n        var symbolmap = {};\n        var segments = [];\n        var listings: CodeListingMap = {};\n        var lstout = FS.readFile(lstpath, { encoding: 'utf8' }) as string;\n        var lines = lstout.split(re_crlf);\n        //00000034 .word 0x11223344                                             ; /vidfill.armips line 25\n        var re_asmline = /^([0-9A-F]+) (.+?); [/](.+?) line (\\d+)/;\n        var lastofs = -1;\n        for (var line of lines) {\n            var m;\n            if (m = re_asmline.exec(line)) {\n                var path = m[3];\n                var path2 = getPrefix(path) + '.lst'; // TODO: don't rename listing\n                var lst = listings[path2];\n                if (lst == null) { lst = listings[path2] = { lines: [] }; }\n                var ofs = parseInt(m[1], 16);\n                if (lastofs == ofs) {\n                    lst.lines.pop(); // get rid of duplicate offset\n                } else if (ofs > lastofs) {\n                    var lastline = lst.lines[lst.lines.length - 1];\n                    if (lastline && !lastline.insns) {\n                        var insns = objout.slice(lastofs, ofs).reverse();\n                        lastline.insns = Array.from(insns).map((b) => hex(b, 2)).join('');\n                    }\n                }\n                lst.lines.push({\n                    path: path,\n                    line: parseInt(m[4]),\n                    offset: ofs\n                });\n                lastofs = ofs;\n            }\n        }\n        //listings[lstpath] = {lines:lstlines, text:lstout};\n\n        var symout = FS.readFile(sympath, { encoding: 'utf8' }) as string;\n        //0000000C loop2\n        //00000034 .dbl:0004\n        var re_symline = /^([0-9A-F]+)\\s+(.+)/;\n        for (var line of symout.split(re_crlf)) {\n            var m;\n            if (m = re_symline.exec(line)) {\n                symbolmap[m[2]] = parseInt(m[1], 16);\n            }\n        }\n\n        return {\n            output: objout, //.slice(0),\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\nexport function assembleVASMARM(step: BuildStep): BuildStepResult {\n    loadNative(\"vasmarm_std\");\n    /// error 2 in line 8 of \"gfxtest.c\": unknown mnemonic <ew>\n    /// error 3007: undefined symbol <XXLOOP>\n    /// TODO: match undefined symbols\n    var re_err1 = /^(fatal error|error|warning)? (\\d+) in line (\\d+) of \"(.+)\": (.+)/;\n    var re_err2 = /^(fatal error|error|warning)? (\\d+): (.+)/;\n    var re_undefsym = /symbol <(.+?)>/;\n    var errors: WorkerError[] = [];\n    var undefsyms = [];\n    function findUndefinedSymbols(line: string) {\n        // find undefined symbols in line\n        undefsyms.forEach((sym) => {\n            if (line.indexOf(sym) >= 0) {\n                errors.push({\n                    path: curpath,\n                    line: curline,\n                    msg: \"Undefined symbol: \" + sym,\n                })\n            }\n        });\n    }\n    function match_fn(s) {\n        let matches = re_err1.exec(s);\n        if (matches) {\n            errors.push({\n                line: parseInt(matches[3]),\n                path: matches[4],\n                msg: matches[5],\n            });\n        } else {\n            matches = re_err2.exec(s);\n            if (matches) {\n                let m = re_undefsym.exec(matches[3]);\n                if (m) {\n                    undefsyms.push(m[1]);\n                } else {\n                    errors.push({\n                        line: 0,\n                        msg: s,\n                    });\n                }\n            } else {\n                console.log(s);\n            }\n        }\n    }\n\n    gatherFiles(step, { mainFilePath: \"main.asm\" });\n    var objpath = step.prefix + \".bin\";\n    var lstpath = step.prefix + \".lst\";\n\n    if (staleFiles(step, [objpath])) {\n        var args = ['-Fbin', '-m7tdmi', '-x', '-wfail', step.path, '-o', objpath, '-L', lstpath];\n        var vasm: EmscriptenModule = emglobal.vasm({\n            instantiateWasm: moduleInstFn('vasmarm_std'),\n            noInitialRun: true,\n            print: match_fn,\n            printErr: match_fn,\n        });\n\n        var FS = vasm.FS;\n        populateFiles(step, FS);\n        execMain(step, vasm, args);\n        if (errors.length) {\n            return { errors: errors };\n        }\n\n        if (undefsyms.length == 0) {\n            var objout = FS.readFile(objpath, { encoding: 'binary' });\n            putWorkFile(objpath, objout);\n            if (!anyTargetChanged(step, [objpath]))\n                return;\n        }\n\n        var lstout = FS.readFile(lstpath, { encoding: 'utf8' });\n        // 00:00000018 023020E0        \t    14:  eor r3, r0, r2\n        // Source: \"vidfill.vasm\"\n        // 00: \".text\" (0-40)\n        // LOOP                            00:00000018\n        // STACK                            S:20010000\n        var symbolmap = {};\n        var segments = []; // TODO\n        var listings: CodeListingMap = {};\n        // TODO: parse listings\n        var re_asmline = /^(\\d+):([0-9A-F]+)\\s+([0-9A-F ]+)\\s+(\\d+)([:M])/;\n        var re_secline = /^(\\d+):\\s+\"(.+)\"/;\n        var re_nameline = /^Source:\\s+\"(.+)\"/;\n        var re_symline = /^(\\w+)\\s+(\\d+):([0-9A-F]+)/;\n        var re_emptyline = /^\\s+(\\d+)([:M])/;\n        var curpath = step.path;\n        var curline = 0;\n        var sections = {};\n        // map file and section indices -> names\n        var lines: string[] = lstout.split(re_crlf);\n        // parse lines\n        var lstlines: SourceLine[] = [];\n        for (var line of lines) {\n            var m;\n            if (m = re_secline.exec(line)) {\n                sections[m[1]] = m[2];\n            } else if (m = re_nameline.exec(line)) {\n                curpath = m[1];\n            } else if (m = re_symline.exec(line)) {\n                symbolmap[m[1]] = parseInt(m[3], 16);\n            } else if (m = re_asmline.exec(line)) {\n                if (m[5] == ':') {\n                    curline = parseInt(m[4]);\n                } else {\n                    // TODO: macro line\n                }\n                lstlines.push({\n                    path: curpath,\n                    line: curline,\n                    offset: parseInt(m[2], 16),\n                    insns: m[3].replaceAll(' ', '')\n                });\n                findUndefinedSymbols(line);\n            } else if (m = re_emptyline.exec(line)) {\n                curline = parseInt(m[1]);\n                findUndefinedSymbols(line);\n            } else {\n                //console.log(line);\n            }\n        }\n        listings[lstpath] = { lines: lstlines, text: lstout };\n        // catch-all if no error generated\n        if (undefsyms.length && errors.length == 0) {\n            errors.push({\n                line: 0,\n                msg: 'Undefined symbols: ' + undefsyms.join(', ')\n            })\n        }\n\n        return {\n            output: objout, //.slice(0x34),\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\n", "// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords$1 = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords[name] = new TokenType(name, options)\n}\n\nvar types$1 = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  privateId: new TokenType(\"privateId\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nfunction nextLineBreak(code, from, end) {\n  if ( end === void 0 ) end = code.length;\n\n  for (var i = from; i < end; i++) {\n    var next = code.charCodeAt(i);\n    if (isNewLine(next))\n      { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n  }\n  return -1\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\nvar hasOwn = Object.hasOwn || (function (obj, propName) { return (\n  hasOwnProperty.call(obj, propName)\n); });\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    var nextBreak = nextLineBreak(input, cur, offset);\n    if (nextBreak < 0) { return new Position(line, offset - cur) }\n    ++line;\n    cur = nextBreak;\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n  // (2019), 11 (2020), 12 (2021), 13 (2022), or `\"latest\"` (the\n  // latest version the library supports). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features.\n  ecmaVersion: null,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program, and an import.meta expression\n  // in a script isn't considered an error.\n  allowImportExportEverywhere: false,\n  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: null,\n  // When enabled, super identifiers are not constrained to\n  // appearing in methods and do not raise an error when they appear elsewhere.\n  allowSuperOutsideMethod: null,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback\u2014that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback\u2014that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === \"latest\") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128,\n    SCOPE_CLASS_STATIC_BLOCK = 256,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types$1.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n  this.potentialArrowInForAwait = false;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = Object.create(null);\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n\n  // The stack of private names.\n  // Each element has two properties: 'declared' and 'used'.\n  // When it exited from the outermost class definition, all used private names must be declared.\n  this.privateNameStack = [];\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.canAwait.get = function () {\n  for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n  }\n  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n};\n\nprototypeAccessors.allowSuper.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n};\n\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\nprototypeAccessors.allowNewDotTarget.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n};\n\nprototypeAccessors.inClassStaticBlock.get = function () {\n  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n};\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp$9 = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp$9.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp$9.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp$9.isContextual = function(name) {\n  return this.type === types$1.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp$9.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp$9.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp$9.canInsertSemicolon = function() {\n  return this.type === types$1.eof ||\n    this.type === types$1.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp$9.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp$9.semicolon = function() {\n  if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp$9.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp$9.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp$9.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp$9.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp$9.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$8 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$8.parseTopLevel = function(node) {\n  var exports = Object.create(null);\n  if (!node.body) { node.body = []; }\n  while (this.type !== types$1.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$8.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '[', '/', astral\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$8.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, after;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length ||\n     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$8.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types$1._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types$1._debugger: return this.parseDebuggerStatement(node)\n  case types$1._do: return this.parseDoStatement(node)\n  case types$1._for: return this.parseForStatement(node)\n  case types$1._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types$1._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types$1._if: return this.parseIfStatement(node)\n  case types$1._return: return this.parseReturnStatement(node)\n  case types$1._switch: return this.parseSwitchStatement(node)\n  case types$1._throw: return this.parseThrowStatement(node)\n  case types$1._try: return this.parseTryStatement(node)\n  case types$1._const: case types$1._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types$1._while: return this.parseWhileStatement(node)\n  case types$1._with: return this.parseWithStatement(node)\n  case types$1.braceL: return this.parseBlock(true, node)\n  case types$1.semi: return this.parseEmptyStatement(node)\n  case types$1._export:\n  case types$1._import:\n    if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$8.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types$1.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$8.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$8.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types$1._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types$1.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$8.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types$1.parenL);\n  if (this.type === types$1.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types$1._var || this.type === types$1._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types$1._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$8.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$8.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$8.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types$1.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types$1.braceR;) {\n    if (this.type === types$1._case || this.type === types$1._default) {\n      var isCase = this.type === types$1._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types$1.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$8.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty$1 = [];\n\npp$8.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types$1._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types$1.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types$1.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$8.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$8.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$8.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$8.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$8.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types$1.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$8.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types$1.semi);\n  node.test = this.type === types$1.semi ? null : this.parseExpression();\n  this.expect(types$1.semi);\n  node.update = this.type === types$1.parenR ? null : this.parseExpression();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$8.parseForIn = function(node, init) {\n  var isForIn = this.type === types$1._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$8.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types$1.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types$1.comma)) { break }\n  }\n  return node\n};\n\npp$8.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types$1.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$8.parseFunctionParams = function(node) {\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$8.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var privateNameMap = this.enterClassBody();\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types$1.braceL);\n  while (this.type !== types$1.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n        this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.exitClassBody();\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$8.parseClassElement = function(constructorAllowsSuper) {\n  if (this.eat(types$1.semi)) { return null }\n\n  var ecmaVersion = this.options.ecmaVersion;\n  var node = this.startNode();\n  var keyName = \"\";\n  var isGenerator = false;\n  var isAsync = false;\n  var kind = \"method\";\n  var isStatic = false;\n\n  if (this.eatContextual(\"static\")) {\n    // Parse static init block\n    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n      this.parseClassStaticBlock(node);\n      return node\n    }\n    if (this.isClassElementNameStart() || this.type === types$1.star) {\n      isStatic = true;\n    } else {\n      keyName = \"static\";\n    }\n  }\n  node.static = isStatic;\n  if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n      isAsync = true;\n    } else {\n      keyName = \"async\";\n    }\n  }\n  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n    isGenerator = true;\n  }\n  if (!keyName && !isAsync && !isGenerator) {\n    var lastValue = this.value;\n    if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n      if (this.isClassElementNameStart()) {\n        kind = lastValue;\n      } else {\n        keyName = lastValue;\n      }\n    }\n  }\n\n  // Parse element name\n  if (keyName) {\n    // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n    // The last token is any of those. Make it the element name.\n    node.computed = false;\n    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n    node.key.name = keyName;\n    this.finishNode(node.key, \"Identifier\");\n  } else {\n    this.parseClassElementName(node);\n  }\n\n  // Parse element value\n  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n    var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n    var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n    if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n    node.kind = isConstructor ? \"constructor\" : kind;\n    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n  } else {\n    this.parseClassField(node);\n  }\n\n  return node\n};\n\npp$8.isClassElementNameStart = function() {\n  return (\n    this.type === types$1.name ||\n    this.type === types$1.privateId ||\n    this.type === types$1.num ||\n    this.type === types$1.string ||\n    this.type === types$1.bracketL ||\n    this.type.keyword\n  )\n};\n\npp$8.parseClassElementName = function(element) {\n  if (this.type === types$1.privateId) {\n    if (this.value === \"constructor\") {\n      this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n    }\n    element.computed = false;\n    element.key = this.parsePrivateIdent();\n  } else {\n    this.parsePropertyName(element);\n  }\n};\n\npp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  // Check key and flags\n  var key = method.key;\n  if (method.kind === \"constructor\") {\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n  } else if (method.static && checkKeyName(method, \"prototype\")) {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  // Parse value\n  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n  // Check value\n  if (method.kind === \"get\" && value.params.length !== 0)\n    { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && value.params.length !== 1)\n    { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$8.parseClassField = function(field) {\n  if (checkKeyName(field, \"constructor\")) {\n    this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n  } else if (field.static && checkKeyName(field, \"prototype\")) {\n    this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n  }\n\n  if (this.eat(types$1.eq)) {\n    // To raise SyntaxError if 'arguments' exists in the initializer.\n    var scope = this.currentThisScope();\n    var inClassFieldInit = scope.inClassFieldInit;\n    scope.inClassFieldInit = true;\n    field.value = this.parseMaybeAssign();\n    scope.inClassFieldInit = inClassFieldInit;\n  } else {\n    field.value = null;\n  }\n  this.semicolon();\n\n  return this.finishNode(field, \"PropertyDefinition\")\n};\n\npp$8.parseClassStaticBlock = function(node) {\n  node.body = [];\n\n  var oldLabels = this.labels;\n  this.labels = [];\n  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  this.next();\n  this.exitScope();\n  this.labels = oldLabels;\n\n  return this.finishNode(node, \"StaticBlock\")\n};\n\npp$8.parseClassId = function(node, isStatement) {\n  if (this.type === types$1.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$8.parseClassSuper = function(node) {\n  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(false) : null;\n};\n\npp$8.enterClassBody = function() {\n  var element = {declared: Object.create(null), used: []};\n  this.privateNameStack.push(element);\n  return element.declared\n};\n\npp$8.exitClassBody = function() {\n  var ref = this.privateNameStack.pop();\n  var declared = ref.declared;\n  var used = ref.used;\n  var len = this.privateNameStack.length;\n  var parent = len === 0 ? null : this.privateNameStack[len - 1];\n  for (var i = 0; i < used.length; ++i) {\n    var id = used[i];\n    if (!hasOwn(declared, id.name)) {\n      if (parent) {\n        parent.used.push(id);\n      } else {\n        this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n      }\n    }\n  }\n};\n\nfunction isPrivateNameConflicted(privateNameMap, element) {\n  var name = element.key.name;\n  var curr = privateNameMap[name];\n\n  var next = \"true\";\n  if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n    next = (element.static ? \"s\" : \"i\") + element.kind;\n  }\n\n  // `class { get #a(){}; static set #a(_){} }` is also conflict.\n  if (\n    curr === \"iget\" && next === \"iset\" ||\n    curr === \"iset\" && next === \"iget\" ||\n    curr === \"sget\" && next === \"sset\" ||\n    curr === \"sset\" && next === \"sget\"\n  ) {\n    privateNameMap[name] = \"true\";\n    return false\n  } else if (!curr) {\n    privateNameMap[name] = next;\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction checkKeyName(node, name) {\n  var computed = node.computed;\n  var key = node.key;\n  return !computed && (\n    key.type === \"Identifier\" && key.name === name ||\n    key.type === \"Literal\" && key.value === name\n  )\n}\n\n// Parses module export declaration.\n\npp$8.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types$1.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types$1.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types$1._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types$1._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types$1.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n\n        if (spec.local.type === \"Literal\") {\n          this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$8.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (hasOwn(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$8.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$8.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$8.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$8.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseModuleExportName();\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n    this.checkExport(\n      exports,\n      node.exported[node.exported.type === \"Identifier\" ? \"name\" : \"value\"],\n      node.exported.start\n    );\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$8.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types$1.string) {\n    node.specifiers = empty$1;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$8.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types$1.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types$1.comma)) { return nodes }\n  }\n  if (this.type === types$1.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLValSimple(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLValSimple(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\npp$8.parseModuleExportName = function() {\n  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n    var stringLiteral = this.parseLiteral(this.value);\n    if (loneSurrogate.test(stringLiteral.value)) {\n      this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n    }\n    return stringLiteral\n  }\n  return this.parseIdent(true)\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$8.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$8.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$7 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$7.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$7.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$7.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$7.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types$1.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types$1.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types$1.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types$1.comma); }\n    if (allowEmpty && this.type === types$1.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types$1.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$7.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// The following three functions all verify that a node is an lvalue \u2014\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += \u2026;\n//     import a from '\u2026';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = \u2026);\n//     const a = \u2026;\n//     try { \u2026 } catch (a) { \u2026 }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\n\npp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (checkClashes) {\n        if (hasOwn(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ParenthesizedExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n    return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n  default:\n    this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\npp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n    }\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr, bindingType, checkClashes);\n  }\n};\n\npp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLValPattern(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLValPattern(expr.argument, bindingType, checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr, bindingType, checkClashes);\n  }\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$6 = Parser.prototype;\n\npp$6.initialContext = function() {\n  return [types.b_stat]\n};\n\npp$6.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\npp$6.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types.f_expr || parent === types.f_stat)\n    { return true }\n  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n    { return true }\n  if (prevType === types$1.braceL)\n    { return parent === types.b_stat }\n  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$6.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$6.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types$1.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Used to handle egde case when token context could not be inferred correctly in tokenize phase\npp$6.overrideContext = function(tokenCtx) {\n  if (this.curContext() !== tokenCtx) {\n    this.context[this.context.length - 1] = tokenCtx;\n  }\n};\n\n// Token-specific context update code\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes$1.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types$1._else &&\n      !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n      !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n    { this.context.push(types.f_expr); }\n  else\n    { this.context.push(types.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes$1.star.updateContext = function(prevType) {\n  if (prevType === types$1._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types.f_expr)\n      { this.context[index] = types.f_expr_gen; }\n    else\n      { this.context[index] = types.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes$1.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$5 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash \u2014\n// either with each other or with an init property \u2014 and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0) {\n            refDestructuringErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n        }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$5.parseExpression = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n  if (this.type === types$1.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(forInit) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldDoubleProto = refDestructuringErrors.doubleProto;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types$1.parenL || this.type === types$1.name) {\n    this.potentialArrowAt = this.start;\n    this.potentialArrowInForAwait = forInit === \"await\";\n  }\n  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    if (this.type === types$1.eq)\n      { left = this.toAssignable(left, false, refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types$1.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(forInit);\n    if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(forInit, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types$1.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types$1.colon);\n    node.alternate = this.parseMaybeAssign(forInit);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n  var prec = this.type.binop;\n  if (prec != null && (!forInit || this.type !== types$1._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n      var coalesce = this.type === types$1.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types$1.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n    }\n  }\n  return left\n};\n\npp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && this.canAwait) {\n    expr = this.parseAwait(forInit);\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types$1.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, update, forInit);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n      { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (!sawUnary && this.type === types$1.privateId) {\n    if (forInit || this.privateNameStack.length === 0) { this.unexpected(); }\n    expr = this.parsePrivateIdent();\n    // only could be private fields in 'in', such as #x in obj\n    if (this.type !== types$1._in) { this.unexpected(); }\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!incDec && this.eat(types$1.starstar)) {\n    if (sawUnary)\n      { this.unexpected(this.lastTokStart); }\n    else\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n  } else {\n    return expr\n  }\n};\n\nfunction isPrivateFieldAccess(node) {\n  return (\n    node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n    node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\n  )\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n  }\n  return result\n};\n\npp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types$1.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types$1.bracketL);\n  if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(types$1.bracketR);\n    } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n      node.property = this.parsePrivateIdent();\n    } else {\n      node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n    }\n    node.computed = !!computed;\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types$1.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types$1.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression \u2014 either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$5.parseExprAtom = function(refDestructuringErrors, forInit) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types$1.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types$1._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types$1.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types$1._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types$1.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n      this.overrideContext(types.f_expr);\n      return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n    }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types$1.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n          (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n      }\n    }\n    return id\n\n  case types$1.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types$1.num: case types$1.string:\n    return this.parseLiteral(this.value)\n\n  case types$1._null: case types$1._true: case types$1._false:\n    node = this.startNode();\n    node.value = this.type === types$1._null ? null : this.type === types$1._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types$1.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types$1.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types$1.braceL:\n    this.overrideContext(types.b_expr);\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types$1._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types$1._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types$1._new:\n    return this.parseNew()\n\n  case types$1.backQuote:\n    return this.parseTemplate()\n\n  case types$1._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$5.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types$1.parenL:\n    return this.parseDynamicImport(node)\n  case types$1.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$5.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types$1.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$5.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$5.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$5.parseParenExpression = function() {\n  this.expect(types$1.parenL);\n  var val = this.parseExpression();\n  this.expect(types$1.parenR);\n  return val\n};\n\npp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types$1.parenR) {\n      first ? first = false : this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types$1.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n    this.expect(types$1.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$5.parseParenItem = function(item) {\n  return item\n};\n\npp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call \u2014 at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp$5.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.allowNewDotTarget)\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$5.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types$1.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types$1.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$5.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types$1.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types$1.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$5.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$5.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types$1.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types$1.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types$1.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types$1.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types$1.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else if (this.type === types$1.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$5.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types$1.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$5.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n  var isExpression = isArrowFunction && this.type !== types$1.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign(forInit);\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$5.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$5.checkParams = function(node, allowDuplicates) {\n  var nameHash = Object.create(null);\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types$1.comma)\n      { elt = null; }\n    else if (this.type === types$1.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$5.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n    { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n  if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n    { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$5.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types$1.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\npp$5.parsePrivateIdent = function() {\n  var node = this.startNode();\n  if (this.type === types$1.privateId) {\n    node.name = this.value;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"PrivateIdentifier\");\n\n  // For validating existence\n  if (this.privateNameStack.length === 0) {\n    this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n  } else {\n    this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n  }\n\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$5.parseYield = function(forInit) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types$1.star);\n    node.argument = this.parseMaybeAssign(forInit);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$5.parseAwait = function(forInit) {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true, false, forInit);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$3 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n  // A switch to disallow the identifier reference 'arguments'\n  this.inClassFieldInit = false;\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$3.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$3.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$3.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$3.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$3.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$3.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$3.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$3.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$2 = Parser.prototype;\n\npp$2.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$2.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$2.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$2.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\npp$2.copyNode = function(node) {\n  var newNode = new Node(this, node.start, this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar ecma13BinaryProperties = ecma12BinaryProperties;\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties,\n  12: ecma12BinaryProperties,\n  13: ecma13BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues,\n  12: ecma12ScriptValues,\n  13: ecma13ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n\nfor (var i = 0, list = [9, 10, 11, 12, 13]; i < list.length; i += 1) {\n  var ecmaVersion = list[i];\n\n  buildUnicodeData(ecmaVersion);\n}\n\nvar pp$1 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$1.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$1.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$1.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$1.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$1.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$1.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$1.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$1.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$1.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$1.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$1.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$1.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$1.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$1.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$1.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$1.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$1.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$1.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$1.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$1.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$1.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$1.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$1.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$1.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!hasOwn(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$1.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$1.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$1.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$1.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$1.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$1.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$1.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$1.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$1.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp = Parser.prototype;\n\n// Move to the next token\n\npp.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp[Symbol.iterator] = function() {\n    var this$1$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1$1.getToken();\n        return {\n          done: token.type === types$1.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xdc00) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n};\n\npp.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n      ++this.curLine;\n      pos = this.lineStart = nextBreak;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types$1.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types$1.dot)\n  }\n};\n\npp.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.slash, 1)\n};\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types$1.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n};\n\npp.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.bitwiseXOR, 1)\n};\n\npp.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types$1.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.plusMin, 1)\n};\n\npp.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(types$1.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types$1.relational, size)\n};\n\npp.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types$1.arrow)\n  }\n  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n};\n\npp.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(types$1.coalesce, 2)\n    }\n  }\n  return this.finishOp(types$1.question, 1)\n};\n\npp.readToken_numberSign = function() { // '#'\n  var ecmaVersion = this.options.ecmaVersion;\n  var code = 35; // '#'\n  if (ecmaVersion >= 13) {\n    ++this.pos;\n    code = this.fullCharCodeAtPos();\n    if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n      return this.finishToken(types$1.privateId, this.readWord1())\n    }\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types$1.parenL)\n  case 41: ++this.pos; return this.finishToken(types$1.parenR)\n  case 59: ++this.pos; return this.finishToken(types$1.semi)\n  case 44: ++this.pos; return this.finishToken(types$1.comma)\n  case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n  case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n  case 123: ++this.pos; return this.finishToken(types$1.braceL)\n  case 125: ++this.pos; return this.finishToken(types$1.braceR)\n  case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types$1.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types$1.prefix, 1)\n\n  case 35: // '#'\n    return this.readToken_numberSign()\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types$1.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types$1.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else if (ch === 0x2028 || ch === 0x2029) {\n      if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n      if (this.options.locations) {\n        this.curLine++;\n        this.lineStart = this.pos;\n      }\n    } else {\n      if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types$1.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types$1.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types$1.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types$1.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n\n    // falls through\n    case \"`\":\n      return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1,\n        \"Invalid escape sequence\"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  var word = this.readWord1();\n  var type = types$1.name;\n  if (this.keywords.test(word)) {\n    type = keywords[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"8.7.0\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types$1,\n  keywordTypes: keywords,\n  TokContext: TokContext,\n  tokContexts: types,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types as tokContexts, types$1 as tokTypes, tokenizer, version };\n", "export type SourceMapSegment =\n\t| [number]\n\t| [number, number, number, number]\n\t| [number, number, number, number, number];\nexport type SourceMapLine = SourceMapSegment[];\nexport type SourceMapMappings = SourceMapLine[];\n\nconst charToInteger: { [charCode: number]: number } = {};\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfor (let i = 0; i < chars.length; i++) {\n\tcharToInteger[chars.charCodeAt(i)] = i;\n}\n\nexport function decode(mappings: string): SourceMapMappings {\n\tconst decoded: SourceMapMappings = [];\n\tlet line: SourceMapLine = [];\n\tconst segment: SourceMapSegment = [\n\t\t0, // generated code column\n\t\t0, // source file index\n\t\t0, // source code line\n\t\t0, // source code column\n\t\t0, // name index\n\t];\n\n\tlet j = 0;\n\tfor (let i = 0, shift = 0, value = 0; i < mappings.length; i++) {\n\t\tconst c = mappings.charCodeAt(i);\n\n\t\tif (c === 44) { // \",\"\n\t\t\tsegmentify(line, segment, j);\n\t\t\tj = 0;\n\n\t\t} else if (c === 59) { // \";\"\n\t\t\tsegmentify(line, segment, j);\n\t\t\tj = 0;\n\t\t\tdecoded.push(line);\n\t\t\tline = [];\n\t\t\tsegment[0] = 0;\n\n\t\t} else {\n\t\t\tlet integer = charToInteger[c];\n\t\t\tif (integer === undefined) {\n\t\t\t\tthrow new Error('Invalid character (' + String.fromCharCode(c) + ')');\n\t\t\t}\n\n\t\t\tconst hasContinuationBit = integer & 32;\n\n\t\t\tinteger &= 31;\n\t\t\tvalue += integer << shift;\n\n\t\t\tif (hasContinuationBit) {\n\t\t\t\tshift += 5;\n\t\t\t} else {\n\t\t\t\tconst shouldNegate = value & 1;\n\t\t\t\tvalue >>>= 1;\n\n\t\t\t\tif (shouldNegate) {\n\t\t\t\t\tvalue = value === 0 ? -0x80000000 : -value;\n\t\t\t\t}\n\n\t\t\t\tsegment[j] += value;\n\t\t\t\tj++;\n\t\t\t\tvalue = shift = 0; // reset\n\t\t\t}\n\t\t}\n\t}\n\n\tsegmentify(line, segment, j);\n\tdecoded.push(line);\n\n\treturn decoded;\n}\n\nfunction segmentify(line: SourceMapSegment[], segment: SourceMapSegment, j: number) {\n\t// This looks ugly, but we're creating specialized arrays with a specific\n\t// length. This is much faster than creating a new array (which v8 expands to\n\t// a capacity of 17 after pushing the first item), or slicing out a subarray\n\t// (which is slow). Length 4 is assumed to be the most frequent, followed by\n\t// length 5 (since not everything will have an associated name), followed by\n\t// length 1 (it's probably rare for a source substring to not have an\n\t// associated segment data).\n\tif (j === 4) line.push([segment[0], segment[1], segment[2], segment[3]]);\n\telse if (j === 5) line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);\n\telse if (j === 1) line.push([segment[0]]);\n}\n\nexport function encode(decoded: SourceMapMappings): string {\n\tlet sourceFileIndex = 0;  // second field\n\tlet sourceCodeLine = 0;   // third field\n\tlet sourceCodeColumn = 0; // fourth field\n\tlet nameIndex = 0;        // fifth field\n\tlet mappings = '';\n\n\tfor (let i = 0; i < decoded.length; i++) {\n\t\tconst line = decoded[i];\n\t\tif (i > 0) mappings += ';';\n\t\tif (line.length === 0) continue;\n\n\t\tlet generatedCodeColumn = 0; // first field\n\n\t\tconst lineMappings: string[] = [];\n\n\t\tfor (const segment of line) {\n\t\t\tlet segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);\n\t\t\tgeneratedCodeColumn = segment[0];\n\n\t\t\tif (segment.length > 1) {\n\t\t\t\tsegmentMappings +=\n\t\t\t\t\tencodeInteger(segment[1] - sourceFileIndex) +\n\t\t\t\t\tencodeInteger(segment[2] - sourceCodeLine) +\n\t\t\t\t\tencodeInteger(segment[3] - sourceCodeColumn);\n\n\t\t\t\tsourceFileIndex = segment[1];\n\t\t\t\tsourceCodeLine = segment[2];\n\t\t\t\tsourceCodeColumn = segment[3];\n\t\t\t}\n\n\t\t\tif (segment.length === 5) {\n\t\t\t\tsegmentMappings += encodeInteger(segment[4] - nameIndex);\n\t\t\t\tnameIndex = segment[4];\n\t\t\t}\n\n\t\t\tlineMappings.push(segmentMappings);\n\t\t}\n\n\t\tmappings += lineMappings.join(',');\n\t}\n\n\treturn mappings;\n}\n\nfunction encodeInteger(num: number): string {\n\tvar result = '';\n\tnum = num < 0 ? (-num << 1) | 1 : num << 1;\n\tdo {\n\t\tvar clamped = num & 31;\n\t\tnum >>>= 5;\n\t\tif (num > 0) {\n\t\t\tclamped |= 32;\n\t\t}\n\t\tresult += chars[clamped];\n\t} while (num > 0);\n\n\treturn result;\n}\n", "export default class BitSet {\n\tconstructor(arg) {\n\t\tthis.bits = arg instanceof BitSet ? arg.bits.slice() : [];\n\t}\n\n\tadd(n) {\n\t\tthis.bits[n >> 5] |= 1 << (n & 31);\n\t}\n\n\thas(n) {\n\t\treturn !!(this.bits[n >> 5] & (1 << (n & 31)));\n\t}\n}", "export default class Chunk {\n\tconstructor(start, end, content) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.original = content;\n\n\t\tthis.intro = '';\n\t\tthis.outro = '';\n\n\t\tthis.content = content;\n\t\tthis.storeName = false;\n\t\tthis.edited = false;\n\n\t\t// we make these non-enumerable, for sanity while debugging\n\t\tObject.defineProperties(this, {\n\t\t\tprevious: { writable: true, value: null },\n\t\t\tnext:     { writable: true, value: null }\n\t\t});\n\t}\n\n\tappendLeft(content) {\n\t\tthis.outro += content;\n\t}\n\n\tappendRight(content) {\n\t\tthis.intro = this.intro + content;\n\t}\n\n\tclone() {\n\t\tconst chunk = new Chunk(this.start, this.end, this.original);\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t}\n\n\tcontains(index) {\n\t\treturn this.start < index && index < this.end;\n\t}\n\n\teachNext(fn) {\n\t\tlet chunk = this;\n\t\twhile (chunk) {\n\t\t\tfn(chunk);\n\t\t\tchunk = chunk.next;\n\t\t}\n\t}\n\n\teachPrevious(fn) {\n\t\tlet chunk = this;\n\t\twhile (chunk) {\n\t\t\tfn(chunk);\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t}\n\n\tedit(content, storeName, contentOnly) {\n\t\tthis.content = content;\n\t\tif (!contentOnly) {\n\t\t\tthis.intro = '';\n\t\t\tthis.outro = '';\n\t\t}\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t}\n\n\tprependLeft(content) {\n\t\tthis.outro = content + this.outro;\n\t}\n\n\tprependRight(content) {\n\t\tthis.intro = content + this.intro;\n\t}\n\n\tsplit(index) {\n\t\tconst sliceIndex = index - this.start;\n\n\t\tconst originalBefore = this.original.slice(0, sliceIndex);\n\t\tconst originalAfter = this.original.slice(sliceIndex);\n\n\t\tthis.original = originalBefore;\n\n\t\tconst newChunk = new Chunk(index, this.end, originalAfter);\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif (this.edited) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit('', false);\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif (newChunk.next) newChunk.next.previous = newChunk;\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t}\n\n\ttoString() {\n\t\treturn this.intro + this.content + this.outro;\n\t}\n\n\ttrimEnd(rx) {\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) return true;\n\n\t\tconst trimmed = this.content.replace(rx, '');\n\n\t\tif (trimmed.length) {\n\t\t\tif (trimmed !== this.content) {\n\t\t\t\tthis.split(this.start + trimmed.length).edit('', undefined, true);\n\t\t\t}\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\tthis.edit('', undefined, true);\n\n\t\t\tthis.intro = this.intro.replace(rx, '');\n\t\t\tif (this.intro.length) return true;\n\t\t}\n\t}\n\n\ttrimStart(rx) {\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) return true;\n\n\t\tconst trimmed = this.content.replace(rx, '');\n\n\t\tif (trimmed.length) {\n\t\t\tif (trimmed !== this.content) {\n\t\t\t\tthis.split(this.end - trimmed.length);\n\t\t\t\tthis.edit('', undefined, true);\n\t\t\t}\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\tthis.edit('', undefined, true);\n\n\t\t\tthis.outro = this.outro.replace(rx, '');\n\t\t\tif (this.outro.length) return true;\n\t\t}\n\t}\n}\n", "import { encode } from 'sourcemap-codec';\n\nlet btoa = () => {\n\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n};\nif (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\tbtoa = str => window.btoa(unescape(encodeURIComponent(str)));\n} else if (typeof Buffer === 'function') {\n\tbtoa = str => Buffer.from(str, 'utf-8').toString('base64');\n}\n\nexport default class SourceMap {\n\tconstructor(properties) {\n\t\tthis.version = 3;\n\t\tthis.file = properties.file;\n\t\tthis.sources = properties.sources;\n\t\tthis.sourcesContent = properties.sourcesContent;\n\t\tthis.names = properties.names;\n\t\tthis.mappings = encode(properties.mappings);\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this);\n\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());\n\t}\n}\n", "export default function guessIndent(code) {\n\tconst lines = code.split('\\n');\n\n\tconst tabbed = lines.filter(line => /^\\t+/.test(line));\n\tconst spaced = lines.filter(line => /^ {2,}/.test(line));\n\n\tif (tabbed.length === 0 && spaced.length === 0) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif (tabbed.length >= spaced.length) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tconst min = spaced.reduce((previous, current) => {\n\t\tconst numSpaces = /^ +/.exec(current)[0].length;\n\t\treturn Math.min(numSpaces, previous);\n\t}, Infinity);\n\n\treturn new Array(min + 1).join(' ');\n}\n", "export default function getRelativePath(from, to) {\n\tconst fromParts = from.split(/[/\\\\]/);\n\tconst toParts = to.split(/[/\\\\]/);\n\n\tfromParts.pop(); // get dirname\n\n\twhile (fromParts[0] === toParts[0]) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif (fromParts.length) {\n\t\tlet i = fromParts.length;\n\t\twhile (i--) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat(toParts).join('/');\n}\n", "const toString = Object.prototype.toString;\n\nexport default function isObject(thing) {\n\treturn toString.call(thing) === '[object Object]';\n}\n", "export default function getLocator(source) {\n\tconst originalLines = source.split('\\n');\n\tconst lineOffsets = [];\n\n\tfor (let i = 0, pos = 0; i < originalLines.length; i++) {\n\t\tlineOffsets.push(pos);\n\t\tpos += originalLines[i].length + 1;\n\t}\n\n\treturn function locate(index) {\n\t\tlet i = 0;\n\t\tlet j = lineOffsets.length;\n\t\twhile (i < j) {\n\t\t\tconst m = (i + j) >> 1;\n\t\t\tif (index < lineOffsets[m]) {\n\t\t\t\tj = m;\n\t\t\t} else {\n\t\t\t\ti = m + 1;\n\t\t\t}\n\t\t}\n\t\tconst line = i - 1;\n\t\tconst column = index - lineOffsets[line];\n\t\treturn { line, column };\n\t};\n}\n", "export default class Mappings {\n\tconstructor(hires) {\n\t\tthis.hires = hires;\n\t\tthis.generatedCodeLine = 0;\n\t\tthis.generatedCodeColumn = 0;\n\t\tthis.raw = [];\n\t\tthis.rawSegments = this.raw[this.generatedCodeLine] = [];\n\t\tthis.pending = null;\n\t}\n\n\taddEdit(sourceIndex, content, loc, nameIndex) {\n\t\tif (content.length) {\n\t\t\tconst segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n\t\t\tif (nameIndex >= 0) {\n\t\t\t\tsegment.push(nameIndex);\n\t\t\t}\n\t\t\tthis.rawSegments.push(segment);\n\t\t} else if (this.pending) {\n\t\t\tthis.rawSegments.push(this.pending);\n\t\t}\n\n\t\tthis.advance(content);\n\t\tthis.pending = null;\n\t}\n\n\taddUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {\n\t\tlet originalCharIndex = chunk.start;\n\t\tlet first = true;\n\n\t\twhile (originalCharIndex < chunk.end) {\n\t\t\tif (this.hires || first || sourcemapLocations.has(originalCharIndex)) {\n\t\t\t\tthis.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);\n\t\t\t}\n\n\t\t\tif (original[originalCharIndex] === '\\n') {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tthis.generatedCodeLine += 1;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t\tthis.generatedCodeColumn = 0;\n\t\t\t\tfirst = true;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tthis.generatedCodeColumn += 1;\n\t\t\t\tfirst = false;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t}\n\n\t\tthis.pending = null;\n\t}\n\n\tadvance(str) {\n\t\tif (!str) return;\n\n\t\tconst lines = str.split('\\n');\n\n\t\tif (lines.length > 1) {\n\t\t\tfor (let i = 0; i < lines.length - 1; i++) {\n\t\t\t\tthis.generatedCodeLine++;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t}\n\t\t\tthis.generatedCodeColumn = 0;\n\t\t}\n\n\t\tthis.generatedCodeColumn += lines[lines.length - 1].length;\n\t}\n}\n", "import BitSet from './BitSet.js';\nimport Chunk from './Chunk.js';\nimport SourceMap from './SourceMap.js';\nimport guessIndent from './utils/guessIndent.js';\nimport getRelativePath from './utils/getRelativePath.js';\nimport isObject from './utils/isObject.js';\nimport getLocator from './utils/getLocator.js';\nimport Mappings from './utils/Mappings.js';\nimport Stats from './utils/Stats.js';\n\nconst n = '\\n';\n\nconst warned = {\n\tinsertLeft: false,\n\tinsertRight: false,\n\tstoreName: false\n};\n\nexport default class MagicString {\n\tconstructor(string, options = {}) {\n\t\tconst chunk = new Chunk(0, string.length, string);\n\n\t\tObject.defineProperties(this, {\n\t\t\toriginal:              { writable: true, value: string },\n\t\t\toutro:                 { writable: true, value: '' },\n\t\t\tintro:                 { writable: true, value: '' },\n\t\t\tfirstChunk:            { writable: true, value: chunk },\n\t\t\tlastChunk:             { writable: true, value: chunk },\n\t\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\t\tbyStart:               { writable: true, value: {} },\n\t\t\tbyEnd:                 { writable: true, value: {} },\n\t\t\tfilename:              { writable: true, value: options.filename },\n\t\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\t\tsourcemapLocations:    { writable: true, value: new BitSet() },\n\t\t\tstoredNames:           { writable: true, value: {} },\n\t\t\tindentStr:             { writable: true, value: guessIndent(string) }\n\t\t});\n\n\t\tif (DEBUG) {\n\t\t\tObject.defineProperty(this, 'stats', { value: new Stats() });\n\t\t}\n\n\t\tthis.byStart[0] = chunk;\n\t\tthis.byEnd[string.length] = chunk;\n\t}\n\n\taddSourcemapLocation(char) {\n\t\tthis.sourcemapLocations.add(char);\n\t}\n\n\tappend(content) {\n\t\tif (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t}\n\n\tappendLeft(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tif (DEBUG) this.stats.time('appendLeft');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byEnd[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.appendLeft(content);\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\n\t\tif (DEBUG) this.stats.timeEnd('appendLeft');\n\t\treturn this;\n\t}\n\n\tappendRight(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tif (DEBUG) this.stats.time('appendRight');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byStart[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.appendRight(content);\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\n\t\tif (DEBUG) this.stats.timeEnd('appendRight');\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\tconst cloned = new MagicString(this.original, { filename: this.filename });\n\n\t\tlet originalChunk = this.firstChunk;\n\t\tlet clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());\n\n\t\twhile (originalChunk) {\n\t\t\tcloned.byStart[clonedChunk.start] = clonedChunk;\n\t\t\tcloned.byEnd[clonedChunk.end] = clonedChunk;\n\n\t\t\tconst nextOriginalChunk = originalChunk.next;\n\t\t\tconst nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif (nextClonedChunk) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif (this.indentExclusionRanges) {\n\t\t\tcloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\t\t}\n\n\t\tcloned.sourcemapLocations = new BitSet(this.sourcemapLocations);\n\n\t\tcloned.intro = this.intro;\n\t\tcloned.outro = this.outro;\n\n\t\treturn cloned;\n\t}\n\n\tgenerateDecodedMap(options) {\n\t\toptions = options || {};\n\n\t\tconst sourceIndex = 0;\n\t\tconst names = Object.keys(this.storedNames);\n\t\tconst mappings = new Mappings(options.hires);\n\n\t\tconst locate = getLocator(this.original);\n\n\t\tif (this.intro) {\n\t\t\tmappings.advance(this.intro);\n\t\t}\n\n\t\tthis.firstChunk.eachNext(chunk => {\n\t\t\tconst loc = locate(chunk.start);\n\n\t\t\tif (chunk.intro.length) mappings.advance(chunk.intro);\n\n\t\t\tif (chunk.edited) {\n\t\t\t\tmappings.addEdit(\n\t\t\t\t\tsourceIndex,\n\t\t\t\t\tchunk.content,\n\t\t\t\t\tloc,\n\t\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmappings.addUneditedChunk(sourceIndex, chunk, this.original, loc, this.sourcemapLocations);\n\t\t\t}\n\n\t\t\tif (chunk.outro.length) mappings.advance(chunk.outro);\n\t\t});\n\n\t\treturn {\n\t\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : null,\n\t\t\tsources: [options.source ? getRelativePath(options.file || '', options.source) : null],\n\t\t\tsourcesContent: options.includeContent ? [this.original] : [null],\n\t\t\tnames,\n\t\t\tmappings: mappings.raw\n\t\t};\n\t}\n\n\tgenerateMap(options) {\n\t\treturn new SourceMap(this.generateDecodedMap(options));\n\t}\n\n\tgetIndentString() {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t}\n\n\tindent(indentStr, options) {\n\t\tconst pattern = /^[^\\r\\n]/gm;\n\n\t\tif (isObject(indentStr)) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : this.indentStr || '\\t';\n\n\t\tif (indentStr === '') return this; // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tconst isExcluded = {};\n\n\t\tif (options.exclude) {\n\t\t\tconst exclusions =\n\t\t\t\ttypeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;\n\t\t\texclusions.forEach(exclusion => {\n\t\t\t\tfor (let i = exclusion[0]; i < exclusion[1]; i += 1) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet shouldIndentNextCharacter = options.indentStart !== false;\n\t\tconst replacer = match => {\n\t\t\tif (shouldIndentNextCharacter) return `${indentStr}${match}`;\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace(pattern, replacer);\n\n\t\tlet charIndex = 0;\n\t\tlet chunk = this.firstChunk;\n\n\t\twhile (chunk) {\n\t\t\tconst end = chunk.end;\n\n\t\t\tif (chunk.edited) {\n\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\tchunk.content = chunk.content.replace(pattern, replacer);\n\n\t\t\t\t\tif (chunk.content.length) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile (charIndex < end) {\n\t\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\t\tconst char = this.original[charIndex];\n\n\t\t\t\t\t\tif (char === '\\n') {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if (char !== '\\r' && shouldIndentNextCharacter) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif (charIndex === chunk.start) {\n\t\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._splitChunk(chunk, charIndex);\n\t\t\t\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace(pattern, replacer);\n\n\t\treturn this;\n\t}\n\n\tinsert() {\n\t\tthrow new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');\n\t}\n\n\tinsertLeft(index, content) {\n\t\tif (!warned.insertLeft) {\n\t\t\tconsole.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'); // eslint-disable-line no-console\n\t\t\twarned.insertLeft = true;\n\t\t}\n\n\t\treturn this.appendLeft(index, content);\n\t}\n\n\tinsertRight(index, content) {\n\t\tif (!warned.insertRight) {\n\t\t\tconsole.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'); // eslint-disable-line no-console\n\t\t\twarned.insertRight = true;\n\t\t}\n\n\t\treturn this.prependRight(index, content);\n\t}\n\n\tmove(start, end, index) {\n\t\tif (index >= start && index <= end) throw new Error('Cannot move a selection inside itself');\n\n\t\tif (DEBUG) this.stats.time('move');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\t\tthis._split(index);\n\n\t\tconst first = this.byStart[start];\n\t\tconst last = this.byEnd[end];\n\n\t\tconst oldLeft = first.previous;\n\t\tconst oldRight = last.next;\n\n\t\tconst newRight = this.byStart[index];\n\t\tif (!newRight && last === this.lastChunk) return this;\n\t\tconst newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif (oldLeft) oldLeft.next = oldRight;\n\t\tif (oldRight) oldRight.previous = oldLeft;\n\n\t\tif (newLeft) newLeft.next = first;\n\t\tif (newRight) newRight.previous = last;\n\n\t\tif (!first.previous) this.firstChunk = last.next;\n\t\tif (!last.next) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight || null;\n\n\t\tif (!newLeft) this.firstChunk = first;\n\t\tif (!newRight) this.lastChunk = last;\n\n\t\tif (DEBUG) this.stats.timeEnd('move');\n\t\treturn this;\n\t}\n\n\toverwrite(start, end, content, options) {\n\t\tif (typeof content !== 'string') throw new TypeError('replacement content must be a string');\n\n\t\twhile (start < 0) start += this.original.length;\n\t\twhile (end < 0) end += this.original.length;\n\n\t\tif (end > this.original.length) throw new Error('end is out of bounds');\n\t\tif (start === end)\n\t\t\tthrow new Error('Cannot overwrite a zero-length range \u2013 use appendLeft or prependRight instead');\n\n\t\tif (DEBUG) this.stats.time('overwrite');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tif (options === true) {\n\t\t\tif (!warned.storeName) {\n\t\t\t\tconsole.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'); // eslint-disable-line no-console\n\t\t\t\twarned.storeName = true;\n\t\t\t}\n\n\t\t\toptions = { storeName: true };\n\t\t}\n\t\tconst storeName = options !== undefined ? options.storeName : false;\n\t\tconst contentOnly = options !== undefined ? options.contentOnly : false;\n\n\t\tif (storeName) {\n\t\t\tconst original = this.original.slice(start, end);\n\t\t\tthis.storedNames[original] = true;\n\t\t}\n\n\t\tconst first = this.byStart[start];\n\t\tconst last = this.byEnd[end];\n\n\t\tif (first) {\n\t\t\tif (end > first.end && first.next !== this.byStart[first.end]) {\n\t\t\t\tthrow new Error('Cannot overwrite across a split point');\n\t\t\t}\n\n\t\t\tfirst.edit(content, storeName, contentOnly);\n\n\t\t\tif (first !== last) {\n\t\t\t\tlet chunk = first.next;\n\t\t\t\twhile (chunk !== last) {\n\t\t\t\t\tchunk.edit('', false);\n\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tchunk.edit('', false);\n\t\t\t}\n\t\t} else {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk(start, end, '').edit(content, storeName);\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\n\t\tif (DEBUG) this.stats.timeEnd('overwrite');\n\t\treturn this;\n\t}\n\n\tprepend(content) {\n\t\tif (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t}\n\n\tprependLeft(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tif (DEBUG) this.stats.time('insertRight');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byEnd[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.prependLeft(content);\n\t\t} else {\n\t\t\tthis.intro = content + this.intro;\n\t\t}\n\n\t\tif (DEBUG) this.stats.timeEnd('insertRight');\n\t\treturn this;\n\t}\n\n\tprependRight(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tif (DEBUG) this.stats.time('insertRight');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byStart[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.prependRight(content);\n\t\t} else {\n\t\t\tthis.outro = content + this.outro;\n\t\t}\n\n\t\tif (DEBUG) this.stats.timeEnd('insertRight');\n\t\treturn this;\n\t}\n\n\tremove(start, end) {\n\t\twhile (start < 0) start += this.original.length;\n\t\twhile (end < 0) end += this.original.length;\n\n\t\tif (start === end) return this;\n\n\t\tif (start < 0 || end > this.original.length) throw new Error('Character is out of bounds');\n\t\tif (start > end) throw new Error('end must be greater than start');\n\n\t\tif (DEBUG) this.stats.time('remove');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tlet chunk = this.byStart[start];\n\n\t\twhile (chunk) {\n\t\t\tchunk.intro = '';\n\t\t\tchunk.outro = '';\n\t\t\tchunk.edit('');\n\n\t\t\tchunk = end > chunk.end ? this.byStart[chunk.end] : null;\n\t\t}\n\n\t\tif (DEBUG) this.stats.timeEnd('remove');\n\t\treturn this;\n\t}\n\n\tlastChar() {\n\t\tif (this.outro.length)\n\t\t\treturn this.outro[this.outro.length - 1];\n\t\tlet chunk = this.lastChunk;\n\t\tdo {\n\t\t\tif (chunk.outro.length)\n\t\t\t\treturn chunk.outro[chunk.outro.length - 1];\n\t\t\tif (chunk.content.length)\n\t\t\t\treturn chunk.content[chunk.content.length - 1];\n\t\t\tif (chunk.intro.length)\n\t\t\t\treturn chunk.intro[chunk.intro.length - 1];\n\t\t} while (chunk = chunk.previous);\n\t\tif (this.intro.length)\n\t\t\treturn this.intro[this.intro.length - 1];\n\t\treturn '';\n\t}\n\n\tlastLine() {\n\t\tlet lineIndex = this.outro.lastIndexOf(n);\n\t\tif (lineIndex !== -1)\n\t\t\treturn this.outro.substr(lineIndex + 1);\n\t\tlet lineStr = this.outro;\n\t\tlet chunk = this.lastChunk;\n\t\tdo {\n\t\t\tif (chunk.outro.length > 0) {\n\t\t\t\tlineIndex = chunk.outro.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1)\n\t\t\t\t\treturn chunk.outro.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.outro + lineStr;\n\t\t\t}\n\n\t\t\tif (chunk.content.length > 0) {\n\t\t\t\tlineIndex = chunk.content.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1)\n\t\t\t\t\treturn chunk.content.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.content + lineStr;\n\t\t\t}\n\n\t\t\tif (chunk.intro.length > 0) {\n\t\t\t\tlineIndex = chunk.intro.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1)\n\t\t\t\t\treturn chunk.intro.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.intro + lineStr;\n\t\t\t}\n\t\t} while (chunk = chunk.previous);\n\t\tlineIndex = this.intro.lastIndexOf(n);\n\t\tif (lineIndex !== -1)\n\t\t\treturn this.intro.substr(lineIndex + 1) + lineStr;\n\t\treturn this.intro + lineStr;\n\t}\n\n\tslice(start = 0, end = this.original.length) {\n\t\twhile (start < 0) start += this.original.length;\n\t\twhile (end < 0) end += this.original.length;\n\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t\t// found end chunk before start\n\t\t\tif (chunk.start < end && chunk.end >= end) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif (chunk && chunk.edited && chunk.start !== start)\n\t\t\tthrow new Error(`Cannot use replaced character ${start} as slice start anchor.`);\n\n\t\tconst startChunk = chunk;\n\t\twhile (chunk) {\n\t\t\tif (chunk.intro && (startChunk !== chunk || chunk.start === start)) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tconst containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif (containsEnd && chunk.edited && chunk.end !== end)\n\t\t\t\tthrow new Error(`Cannot use replaced character ${end} as slice end anchor.`);\n\n\t\t\tconst sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tconst sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice(sliceStart, sliceEnd);\n\n\t\t\tif (chunk.outro && (!containsEnd || chunk.end === end)) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif (containsEnd) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// TODO deprecate this? not really very useful\n\tsnip(start, end) {\n\t\tconst clone = this.clone();\n\t\tclone.remove(0, start);\n\t\tclone.remove(end, clone.original.length);\n\n\t\treturn clone;\n\t}\n\n\t_split(index) {\n\t\tif (this.byStart[index] || this.byEnd[index]) return;\n\n\t\tif (DEBUG) this.stats.time('_split');\n\n\t\tlet chunk = this.lastSearchedChunk;\n\t\tconst searchForward = index > chunk.end;\n\n\t\twhile (chunk) {\n\t\t\tif (chunk.contains(index)) return this._splitChunk(chunk, index);\n\n\t\t\tchunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];\n\t\t}\n\t}\n\n\t_splitChunk(chunk, index) {\n\t\tif (chunk.edited && chunk.content.length) {\n\t\t\t// zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tconst loc = getLocator(this.original)(index);\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot split a chunk that has already been edited (${loc.line}:${loc.column} \u2013 \"${\n\t\t\t\t\tchunk.original\n\t\t\t\t}\")`\n\t\t\t);\n\t\t}\n\n\t\tconst newChunk = chunk.split(index);\n\n\t\tthis.byEnd[index] = chunk;\n\t\tthis.byStart[index] = newChunk;\n\t\tthis.byEnd[newChunk.end] = newChunk;\n\n\t\tif (chunk === this.lastChunk) this.lastChunk = newChunk;\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\tif (DEBUG) this.stats.timeEnd('_split');\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\tlet str = this.intro;\n\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t}\n\n\tisEmpty() {\n\t\tlet chunk = this.firstChunk;\n\t\tdo {\n\t\t\tif (chunk.intro.length && chunk.intro.trim() ||\n\t\t\t\t\tchunk.content.length && chunk.content.trim() ||\n\t\t\t\t\tchunk.outro.length && chunk.outro.trim())\n\t\t\t\treturn false;\n\t\t} while (chunk = chunk.next);\n\t\treturn true;\n\t}\n\n\tlength() {\n\t\tlet chunk = this.firstChunk;\n\t\tlet length = 0;\n\t\tdo {\n\t\t\tlength += chunk.intro.length + chunk.content.length + chunk.outro.length;\n\t\t} while (chunk = chunk.next);\n\t\treturn length;\n\t}\n\n\ttrimLines() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t}\n\n\ttrim(charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t}\n\n\ttrimEndAborted(charType) {\n\t\tconst rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) return true;\n\n\t\tlet chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimEnd(rx);\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif (chunk.end !== end) {\n\t\t\t\tif (this.lastChunk === chunk) {\n\t\t\t\t\tthis.lastChunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t\t}\n\n\t\t\tif (aborted) return true;\n\t\t\tchunk = chunk.previous;\n\t\t} while (chunk);\n\n\t\treturn false;\n\t}\n\n\ttrimEnd(charType) {\n\t\tthis.trimEndAborted(charType);\n\t\treturn this;\n\t}\n\ttrimStartAborted(charType) {\n\t\tconst rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) return true;\n\n\t\tlet chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimStart(rx);\n\n\t\t\tif (chunk.end !== end) {\n\t\t\t\t// special case...\n\t\t\t\tif (chunk === this.lastChunk) this.lastChunk = chunk.next;\n\n\t\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t\t}\n\n\t\t\tif (aborted) return true;\n\t\t\tchunk = chunk.next;\n\t\t} while (chunk);\n\n\t\treturn false;\n\t}\n\n\ttrimStart(charType) {\n\t\tthis.trimStartAborted(charType);\n\t\treturn this;\n\t}\n}\n", "import MagicString from './MagicString.js';\nimport SourceMap from './SourceMap.js';\nimport getRelativePath from './utils/getRelativePath.js';\nimport isObject from './utils/isObject.js';\nimport getLocator from './utils/getLocator.js';\nimport Mappings from './utils/Mappings.js';\n\nconst hasOwnProp = Object.prototype.hasOwnProperty;\n\nexport default class Bundle {\n\tconstructor(options = {}) {\n\t\tthis.intro = options.intro || '';\n\t\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\t\tthis.sources = [];\n\t\tthis.uniqueSources = [];\n\t\tthis.uniqueSourceIndexByFilename = {};\n\t}\n\n\taddSource(source) {\n\t\tif (source instanceof MagicString) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator\n\t\t\t});\n\t\t}\n\n\t\tif (!isObject(source) || !source.content) {\n\t\t\tthrow new Error('bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`');\n\t\t}\n\n\t\t['filename', 'indentExclusionRanges', 'separator'].forEach(option => {\n\t\t\tif (!hasOwnProp.call(source, option)) source[option] = source.content[option];\n\t\t});\n\n\t\tif (source.separator === undefined) {\n\t\t\t// TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif (source.filename) {\n\t\t\tif (!hasOwnProp.call(this.uniqueSourceIndexByFilename, source.filename)) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tconst uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];\n\t\t\t\tif (source.content.original !== uniqueSource.content) {\n\t\t\t\t\tthrow new Error(`Illegal source: same filename (${source.filename}), different contents`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push(source);\n\t\treturn this;\n\t}\n\n\tappend(str, options) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString(str),\n\t\t\tseparator: (options && options.separator) || ''\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\tconst bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach(source => {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t}\n\n\tgenerateDecodedMap(options = {}) {\n\t\tconst names = [];\n\t\tthis.sources.forEach(source => {\n\t\t\tObject.keys(source.content.storedNames).forEach(name => {\n\t\t\t\tif (!~names.indexOf(name)) names.push(name);\n\t\t\t});\n\t\t});\n\n\t\tconst mappings = new Mappings(options.hires);\n\n\t\tif (this.intro) {\n\t\t\tmappings.advance(this.intro);\n\t\t}\n\n\t\tthis.sources.forEach((source, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tmappings.advance(this.separator);\n\t\t\t}\n\n\t\t\tconst sourceIndex = source.filename ? this.uniqueSourceIndexByFilename[source.filename] : -1;\n\t\t\tconst magicString = source.content;\n\t\t\tconst locate = getLocator(magicString.original);\n\n\t\t\tif (magicString.intro) {\n\t\t\t\tmappings.advance(magicString.intro);\n\t\t\t}\n\n\t\t\tmagicString.firstChunk.eachNext(chunk => {\n\t\t\t\tconst loc = locate(chunk.start);\n\n\t\t\t\tif (chunk.intro.length) mappings.advance(chunk.intro);\n\n\t\t\t\tif (source.filename) {\n\t\t\t\t\tif (chunk.edited) {\n\t\t\t\t\t\tmappings.addEdit(\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tchunk.content,\n\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmappings.addUneditedChunk(\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tmagicString.original,\n\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\tmagicString.sourcemapLocations\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmappings.advance(chunk.content);\n\t\t\t\t}\n\n\t\t\t\tif (chunk.outro.length) mappings.advance(chunk.outro);\n\t\t\t});\n\n\t\t\tif (magicString.outro) {\n\t\t\t\tmappings.advance(magicString.outro);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : null,\n\t\t\tsources: this.uniqueSources.map(source => {\n\t\t\t\treturn options.file ? getRelativePath(options.file, source.filename) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map(source => {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames,\n\t\t\tmappings: mappings.raw\n\t\t};\n\t}\n\n\tgenerateMap(options) {\n\t\treturn new SourceMap(this.generateDecodedMap(options));\n\t}\n\n\tgetIndentString() {\n\t\tconst indentStringCounts = {};\n\n\t\tthis.sources.forEach(source => {\n\t\t\tconst indentStr = source.content.indentStr;\n\n\t\t\tif (indentStr === null) return;\n\n\t\t\tif (!indentStringCounts[indentStr]) indentStringCounts[indentStr] = 0;\n\t\t\tindentStringCounts[indentStr] += 1;\n\t\t});\n\n\t\treturn (\n\t\t\tObject.keys(indentStringCounts).sort((a, b) => {\n\t\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t\t})[0] || '\\t'\n\t\t);\n\t}\n\n\tindent(indentStr) {\n\t\tif (!arguments.length) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif (indentStr === '') return this; // noop\n\n\t\tlet trailingNewline = !this.intro || this.intro.slice(-1) === '\\n';\n\n\t\tthis.sources.forEach((source, i) => {\n\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\tconst indentStart = trailingNewline || (i > 0 && /\\r?\\n$/.test(separator));\n\n\t\t\tsource.content.indent(indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart //: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\ttrailingNewline = source.content.lastChar() === '\\n';\n\t\t});\n\n\t\tif (this.intro) {\n\t\t\tthis.intro =\n\t\t\t\tindentStr +\n\t\t\t\tthis.intro.replace(/^[^\\n]/gm, (match, index) => {\n\t\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprepend(str) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tconst body = this.sources\n\t\t\t.map((source, i) => {\n\t\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\t\tconst str = (i > 0 ? separator : '') + source.content.toString();\n\n\t\t\t\treturn str;\n\t\t\t})\n\t\t\t.join('');\n\n\t\treturn this.intro + body;\n\t}\n\n\tisEmpty () {\n\t\tif (this.intro.length && this.intro.trim())\n\t\t\treturn false;\n\t\tif (this.sources.some(source => !source.content.isEmpty()))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tlength() {\n\t\treturn this.sources.reduce((length, source) => length + source.content.length(), this.intro.length);\n\t}\n\n\ttrimLines() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t}\n\n\ttrim(charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t}\n\n\ttrimStart(charType) {\n\t\tconst rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\t\tthis.intro = this.intro.replace(rx, '');\n\n\t\tif (!this.intro) {\n\t\t\tlet source;\n\t\t\tlet i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this.sources[i++];\n\t\t\t\tif (!source) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (!source.content.trimStartAborted(charType));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\ttrimEnd(charType) {\n\t\tconst rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tlet source;\n\t\tlet i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this.sources[i--];\n\t\t\tif (!source) {\n\t\t\t\tthis.intro = this.intro.replace(rx, '');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (!source.content.trimEndAborted(charType));\n\n\t\treturn this;\n\t}\n}\n", "/**\n * The AST nodes' metadata store\n */\n// This set ensures that any of the NodeMetadata methods throws an error\n// when called after its manipulator has finished (e.g. through setTimeout())\nexport const finishedNodes = new WeakSet();\n/**\n * Ensure that a node has not been handled yet\n *\n * @param node The AST node to check\n *\n */\nexport function checkNode(node) {\n    if (finishedNodes.has(node)) {\n        throw new Error(`Cannot run helper method after manipulator callback of iterated or target node has finished running`);\n    }\n}\n/**\n * A place to store meta data associated with encountered AST nodes\n */\nexport const nodeMetadataStore = new WeakMap();\n", "/**\n * Helper functions for manipulator callbacks\n */\nimport { nodeMetadataStore, checkNode } from './metadata';\n/**\n * Get the original source code of a node\n *\n * @param node The AST node to get the source code for\n *\n */\nexport function source(node) {\n    const { context } = nodeMetadataStore.get(node);\n    return context.magicString.slice(node.start, node.end).toString();\n}\n/**\n * Get a node's parent node\n *\n * @param node   The AST node whose parent to get\n * @param levels The number of levels to go up the AST\n *\n */\nexport function parent(node, levels = 1) {\n    const { parent: parentNode } = nodeMetadataStore.get(node);\n    // No matter how many levels to climb, no parent means undefined\n    if (!parentNode) {\n        return undefined;\n    }\n    // No levels to go up, return current parent\n    if (levels <= 1) {\n        return parentNode;\n    }\n    // Recursively get parent node when levels are remaining\n    return parent(parentNode, levels - 1);\n}\n/**\n * Replace a node's source code\n *\n * @param node        The AST node to replace\n * @param replacement The replacement code\n *\n */\nexport function update(node, replacement) {\n    checkNode(node);\n    const { context } = nodeMetadataStore.get(node);\n    context.magicString.overwrite(node.start, node.end, replacement);\n}\n", "/**\n * Check whether a variable is a Promise\n *\n * @param value The value to check\n */\nexport function isPromise(value) {\n    return (typeof value === 'object' &&\n        value !== null &&\n        typeof value.then === 'function');\n}\n/**\n * Check whether a value resembles an acorn AST node\n *\n * @param value The value to check\n */\nexport function isNode(value) {\n    return (typeof value === 'object' &&\n        value !== null &&\n        typeof value.type === 'string');\n}\n", "/**\n * A set of functions that represent different tasks\n * in the lifecycle of a yufka() call\n */\nimport { nodeMetadataStore, finishedNodes, checkNode } from './metadata';\nimport * as helpers from './helpers';\nimport { isNode, isPromise } from './util';\n/**\n * Collect the child AST nodes of a node\n *\n * @param node The node to search for child nodes\n */\nexport function collectChildNodes(node) {\n    const childNodes = [];\n    // Walk all AST node properties, performing a recursive `walk`\n    // on everything that looks like another AST node\n    for (const key of Object.keys(node)) {\n        // Explicitely widen the types here since not all\n        // properties are represented in acorn's typings\n        const property = node[key];\n        if (Array.isArray(property)) {\n            // Step into arrays and walk their items\n            for (const propertyElement of property) {\n                if (isNode(propertyElement)) {\n                    childNodes.push(propertyElement);\n                }\n            }\n        }\n        else if (isNode(property)) {\n            childNodes.push(property);\n        }\n    }\n    return childNodes;\n}\n/**\n * Perform node handling on child nodes in succession\n * This function returns a promise if any of the executed manipulators\n * returns a promise, otherwise it executes synchronously\n *\n * @param node       The node whose child nodes to handle\n * @param childNodes The child nodes to handle\n */\nexport function performSuccessiveRecursiveWalks(node, childNodes, context) {\n    // Return synchronously when no subwalks are scheduled\n    if (childNodes.length === 0) {\n        return undefined;\n    }\n    const [firstChild, ...remainingChildNodes] = childNodes;\n    const subwalkResult = handleNode(firstChild, context);\n    // When node handling returns a promise, an asynchronous manipulator was called\n    // -> wait for it to resolve, then handle next step\n    if (isPromise(subwalkResult)) {\n        return subwalkResult.then(() => performSuccessiveRecursiveWalks(node, remainingChildNodes, context));\n    }\n    else {\n        return performSuccessiveRecursiveWalks(node, remainingChildNodes, context);\n    }\n}\n/**\n * Collect metadata of a tree\n *\n * @param node    The starting node of the tree\n * @param context The yufka() context\n */\nexport function collectTreeMetadata(node, context) {\n    const childNodes = collectChildNodes(node);\n    for (const childNode of childNodes) {\n        nodeMetadataStore.set(childNode, { parent: node, context });\n        collectTreeMetadata(childNode, context);\n    }\n}\n/**\n * Create a function that handles any of the NodeMetadata methods,\n * taking into account a node as an optional first parameter.\n *\n * @param node       The node to bind to the helper method\n * @param helperName The the helper function to invoke\n */\nfunction createNodeHelper(node, helperName) {\n    return (...args) => {\n        // We need to annihilate typing because TS is just not clever enough\n        const helper = helpers[helperName];\n        if (isNode(args[0])) {\n            if (helperName === 'update') {\n                checkNode(args[0]);\n            }\n            // If first argument is not a node, grab its metadata from\n            // the store and execute the according method on that\n            return helper(...args);\n        }\n        else {\n            return helper(node, ...args);\n        }\n    };\n}\n/**\n * Walk the AST under the given node and update its descendants\n *\n * @param node    The AST node to start at\n * @param context The yufka() context\n */\nexport function handleNode(node, context) {\n    // Get subwalks to perform\n    const childNodes = collectChildNodes(node);\n    const subwalksResult = performSuccessiveRecursiveWalks(node, childNodes, context);\n    // Create the manipulation helpers object\n    const nodeHelpers = {\n        source: createNodeHelper(node, 'source'),\n        parent: createNodeHelper(node, 'parent'),\n        update: createNodeHelper(node, 'update')\n    };\n    // Call manipulator function on AST node\n    if (isPromise(subwalksResult)) {\n        return subwalksResult\n            .then(() => {\n            return context.manipulator(node, nodeHelpers);\n        })\n            .then(manipulatorResult => {\n            finishedNodes.add(node);\n            return manipulatorResult;\n        });\n    }\n    else {\n        const manipulatorResult = context.manipulator(node, nodeHelpers);\n        if (isPromise(manipulatorResult)) {\n            return manipulatorResult.then(result => {\n                finishedNodes.add(node);\n                return result;\n            });\n        }\n        else {\n            finishedNodes.add(node);\n            return manipulatorResult;\n        }\n    }\n}\n/**\n * Create an immutable yufka() result\n *\n * @param context The yufka() context\n */\nexport function createResult({ magicString, options }) {\n    const code = magicString.toString();\n    return Object.freeze({\n        code,\n        map: magicString.generateMap(options.sourceMap),\n        toString: () => code\n    });\n}\n", "import { parse as acornDefaultParse } from 'acorn';\nimport MagicString from 'magic-string';\nimport { collectTreeMetadata, createResult, handleNode } from './lib/lifecycle';\nimport * as helpers from './lib/helpers';\nimport { nodeMetadataStore } from './lib/metadata';\nimport { isPromise } from './lib/util';\nfunction yufka(...yufkaArgs) {\n    var _a;\n    let options;\n    let manipulator;\n    // Source is always the first argument\n    // Coerce to string in case it's a Buffer object\n    const source = String(yufkaArgs[0]);\n    if (typeof yufkaArgs[1] === 'function') {\n        // If second argument is a function, options have been omitted\n        options = {};\n        manipulator = yufkaArgs[1];\n    }\n    else if (typeof yufkaArgs[1] === 'object' &&\n        typeof yufkaArgs[2] === 'function') {\n        // Type check for clarity in case of error\n        options = yufkaArgs[1];\n        manipulator = yufkaArgs[2];\n    }\n    else {\n        // Invalid arguments, inform the user comprehensibly\n        throw new Error('Invalid arguments. After the source code argument, yufka() expects either an options object and a manipulator function or just a manipulator function');\n    }\n    const acornOptions = {\n        ecmaVersion: 'latest',\n        ...((_a = options.acorn) !== null && _a !== void 0 ? _a : {})\n    };\n    // Use `parser` option as parser if available\n    const rootNode = options.parser\n        ? options.parser.parse(source, acornOptions)\n        : acornDefaultParse(source, acornOptions);\n    // Create the resource all manipulations are performed on\n    const magicString = new MagicString(source);\n    // Create a context object that can be passed to helpers\n    const context = { magicString, options, manipulator };\n    // Preparation: collect metadata of the whole AST\n    // Allows to modify nodes that have not been visited yet\n    nodeMetadataStore.set(rootNode, { parent: undefined, context });\n    collectTreeMetadata(rootNode, context);\n    // Start the recursive walk\n    const walkResult = handleNode(rootNode, context);\n    // Create the result\n    if (isPromise(walkResult)) {\n        return walkResult.then(() => createResult(context));\n    }\n    else {\n        return createResult(context);\n    }\n}\nyufka.source = helpers.source;\nyufka.parent = helpers.parent;\nyufka.update = helpers.update;\nexport default yufka;\n", "\n// TODO: dynamic import\nimport * as fastpng from 'fast-png';\nimport { Palette } from './color';\nimport * as io from './io'\nimport * as color from './color'\nimport { coerceToArray, findIntegerFactors, RGBA } from '../../util';\n\nexport type PixelMapFunction = (x: number, y: number) => number;\n\nexport abstract class AbstractBitmap<T> {\n    aspect? : number;   // aspect ratio, null == default == 1:1\n    style? : {} = {};   // CSS styles (TODO: other elements?)\n\n    constructor(\n        public readonly width: number,\n        public readonly height: number,\n    ) {\n    }\n    abstract blank(width: number, height: number) : AbstractBitmap<T>;\n    abstract setarray(arr: ArrayLike<number>) : void;\n    abstract set(x: number, y: number, val: number) : void;\n    abstract get(x: number, y: number): number;\n    abstract getrgba(x: number, y: number): number;\n\n    inbounds(x: number, y: number): boolean {\n        return (x >= 0 && x < this.width && y >= 0 && y < this.height);\n    }\n    assign(fn: ArrayLike<number> | PixelMapFunction) : void {\n        if (typeof fn === 'function') {\n            for (let y=0; y<this.height; y++) {\n                for (let x=0; x<this.width; x++) {\n                    this.set(x, y, fn(x, y));\n                }\n            }\n        } else if (fn && fn['length'] != null) {\n            this.setarray(fn);\n        } else {\n            throw new Error(`Illegal argument to assign(): ${fn}`)\n        }\n    }\n    clone() : AbstractBitmap<T> {\n        let bmp = this.blank(this.width, this.height);\n        bmp.assign((x,y) => this.get(x,y));\n        return bmp;\n    }\n    crop(srcx: number, srcy: number, width: number, height: number) {\n        let dest = this.blank(width, height);\n        dest.assign((x, y) => this.get(x + srcx, y + srcy));\n        return dest;\n    }\n    blit(src: BitmapType, \n        destx: number, desty: number,\n        srcx: number, srcy: number)\n    {\n        destx |= 0;\n        desty |= 0;\n        srcx |= 0;\n        srcy |= 0;\n        for (var y=0; y<src.height; y++) {\n            for (var x=0; x<src.width; x++) {\n                let rgba = src.getrgba(x+srcx, y+srcy);\n                this.set(x+destx, y+desty, rgba);\n            }\n        }\n    }\n    fill(destx: number, desty: number, width:number, height:number, value:number) {\n        for (var y=0; y<height; y++) {\n            for (var x=0; x<width; x++) {\n                this.set(x+destx, y+desty, value);\n            }\n        }\n    }\n}\n\nexport class RGBABitmap extends AbstractBitmap<RGBABitmap> {\n    public readonly rgba: Uint32Array\n\n    constructor(\n        width: number,\n        height: number,\n        initial?: Uint32Array | PixelMapFunction\n    ) {\n        super(width, height);\n        this.rgba = new Uint32Array(this.width * this.height);\n        if (initial) this.assign(initial);\n    }\n    setarray(arr: ArrayLike<number>) {\n        this.rgba.set(arr);\n    }\n    set(x: number, y: number, rgba: number) {\n        if (this.inbounds(x,y)) this.rgba[y * this.width + x] = rgba;\n    }\n    get(x: number, y: number): number {\n        return this.inbounds(x,y) ? this.rgba[y * this.width + x] : 0;\n    }\n    getrgba(x: number, y: number): number {\n        return this.get(x, y);\n    }\n    blank(width?: number, height?: number) : RGBABitmap {\n        return new RGBABitmap(width || this.width, height || this.height);\n    }\n    clone() : RGBABitmap {\n        let bitmap = this.blank(this.width, this.height);\n        bitmap.rgba.set(this.rgba);\n        return bitmap;\n    }\n}\n\nexport abstract class MappedBitmap extends AbstractBitmap<MappedBitmap> {\n    public readonly pixels: Uint8Array\n\n    constructor(\n        width: number,\n        height: number,\n        public readonly bpp: number,\n        initial?: Uint8Array | PixelMapFunction\n    ) {\n        super(width, height);\n        if (bpp != 1 && bpp != 2 && bpp != 4 && bpp != 8)\n            throw new Error(`Invalid bits per pixel: ${bpp}`);\n        this.pixels = new Uint8Array(this.width * this.height);\n        if (initial) this.assign(initial);\n    }\n    setarray(arr: ArrayLike<number>) {\n        this.pixels.set(arr);\n    }\n    set(x: number, y: number, index: number) {\n        if (this.inbounds(x,y)) this.pixels[y * this.width + x] = index;\n    }\n    get(x: number, y: number): number {\n        return this.inbounds(x,y) ? this.pixels[y * this.width + x] : 0;\n    }\n}\n\nfunction getbpp(x : number | Palette) : number {\n    if (typeof x === 'number') return x;\n    if (x instanceof Palette) {\n        if (x.colors.length <= 2) return 1;\n        else if (x.colors.length <= 4) return 2;\n        else if (x.colors.length <= 16) return 4;\n    }\n    return 8;\n}\n\nexport class IndexedBitmap extends MappedBitmap {\n    public palette: Palette;\n\n    constructor(\n        width: number,\n        height: number,\n        bppOrPalette: number | Palette,\n        initial?: Uint8Array | PixelMapFunction\n    ) {\n        super(width, height, getbpp(bppOrPalette), initial);\n        this.palette = bppOrPalette instanceof Palette\n            ? bppOrPalette \n            : color.palette.colors(1 << this.bpp);\n    }\n    getrgba(x: number, y: number): number {\n        return this.palette && this.palette.colors[this.get(x, y)];\n    }\n    blank(width?: number, height?: number, newPalette?: Palette) : IndexedBitmap {\n        let bitmap = new IndexedBitmap(width || this.width, height || this.height, newPalette || this.palette);\n        return bitmap;\n    }\n    clone() : IndexedBitmap {\n        let bitmap = this.blank(this.width, this.height);\n        bitmap.pixels.set(this.pixels);\n        return bitmap;\n    }\n}\n\nexport function rgba(width: number, height: number, initial?: Uint32Array | PixelMapFunction) {\n    return new RGBABitmap(width, height, initial);\n}\n\nexport function indexed(width: number, height: number, bpp: number, initial?: Uint8Array | PixelMapFunction) {\n    return new IndexedBitmap(width, height, bpp, initial);\n}\n\nexport type BitmapType = RGBABitmap | IndexedBitmap;\n\n// TODO: check arguments\nexport function decode(arr: Uint8Array, fmt: PixelEditorImageFormat) {\n    var pixels = convertWordsToImages(arr, fmt);\n    // TODO: guess if missing w/h/count?\n    // TODO: reverse mapping\n    // TODO: maybe better composable functions\n    let bpp = (fmt.bpp||1) * (fmt.np||1);\n    return pixels.map(data => new IndexedBitmap(fmt.w, fmt.h, bpp, data));\n}\n\nexport interface BitmapAnalysis {\n    min: {w: number, h: number};\n    max: {w: number, h: number};\n}\n\nexport function analyze(bitmaps: BitmapType[]) {\n    bitmaps = coerceToArray(bitmaps);\n    let r = {min:{w:0,h:0}, max:{w:0,h:0}};\n    for (let bmp of bitmaps) {\n        if (!(bmp instanceof AbstractBitmap)) return null;\n        r.min.w = Math.min(bmp.width);\n        r.max.w = Math.max(bmp.width);\n        r.min.h = Math.min(bmp.height);\n        r.max.h = Math.max(bmp.height);\n    }\n    return r;\n}\n\nexport interface MontageOptions {\n    analysis?: BitmapAnalysis;\n    gap?: number;\n    aspect?: number;\n}\n\nexport function montage(bitmaps: BitmapType[], options?: MontageOptions) {\n    bitmaps = coerceToArray(bitmaps);\n    let minmax = (options && options.analysis) || analyze(bitmaps);\n    if (minmax == null) throw new Error(`Expected an array of bitmaps`);\n    let hitrects = [];\n    let aspect = (options && options.aspect) || 1;\n    let gap = (options && options.gap) || 0;\n    if (minmax.min.w == minmax.max.w && minmax.min.h == minmax.max.h) {\n        let totalPixels = minmax.min.w * minmax.min.h * bitmaps.length;\n        let factors = findIntegerFactors(totalPixels, minmax.max.w, minmax.max.h, aspect);\n        let columns = Math.ceil(factors.a / minmax.min.w); // TODO: rounding?\n        let rows = Math.ceil(factors.b / minmax.min.h);\n        let result = new RGBABitmap(factors.a + gap * (columns-1), factors.b + gap * (rows-1));\n        let x = 0;\n        let y = 0;\n        bitmaps.forEach((bmp) => {\n            result.blit(bmp, x, y, 0, 0);\n            hitrects.push({x, y, w: bmp.width, h: bmp.height })\n            x += bmp.width + gap;\n            if (x >= result.width) {\n                x = 0;\n                y += bmp.height + gap;\n            }\n        })\n        return result;\n    } else {\n        throw new Error(`combine() only supports uniformly-sized images right now`); // TODO\n    }\n}\n\n/////\n\nexport namespace png {\n    export function read(url: string): BitmapType {\n        return decode(io.readbin(url));\n    }\n    export function decode(data: Uint8Array): BitmapType {\n        let png = fastpng.decode(data);\n        return convertToBitmap(png);\n    }\n    function convertToBitmap(png: fastpng.IDecodedPNG): BitmapType {\n        if (png.palette && png.depth <= 8) {\n            return convertIndexedToBitmap(png);\n        } else {\n            return convertRGBAToBitmap(png);\n        }\n    }\n    function convertIndexedToBitmap(png: fastpng.IDecodedPNG): IndexedBitmap {\n        var palarr = <any>png.palette as [number, number, number, number][];\n        var palette = new Palette(palarr);\n        let bitmap = new IndexedBitmap(png.width, png.height, png.depth);\n        if (png.depth == 8) {\n            bitmap.pixels.set(png.data);\n        } else {\n            let pixperbyte = Math.floor(8 / png.depth);\n            let mask = (1 << png.depth) - 1;\n            for (let i = 0; i < bitmap.pixels.length; i++) {\n                var bofs = (i % pixperbyte) * png.depth;\n                let val = png.data[Math.floor(i / pixperbyte)];\n                bitmap.pixels[i] = (val >> bofs) & mask;\n            }\n        }\n        bitmap.palette = palette;\n        // TODO: aspect etc\n        return bitmap;\n    }\n    function convertRGBAToBitmap(png: fastpng.IDecodedPNG): RGBABitmap {\n        const bitmap = new RGBABitmap(png.width, png.height);\n        const rgba : [number,number,number,number] = [0, 0, 0, 0];\n        for (let i = 0; i < bitmap.rgba.length; i++) {\n            for (let j = 0; j < 4; j++)\n                rgba[j] = png.data[i * 4 + j];\n            bitmap.rgba[i] = color.rgba(rgba);\n        }\n        // TODO: aspect etc\n        return bitmap;\n    }\n}\n\nexport namespace font {\n    interface Font {\n        maxheight: number;\n        glyphs: { [code: number]: Glyph };\n        properties: {};\n    }\n    class Glyph extends IndexedBitmap {\n        constructor(width: number, height: number, bpp: number,\n            public readonly code: number,\n            public readonly yoffset: number) {\n            super(width, height, bpp);\n        }\n    }\n    export function read(url: string) {\n        if (url.endsWith('.yaff')) return decodeyafflines(io.readlines(url));\n        if (url.endsWith('.draw')) return decodedrawlines(io.readlines(url));\n        throw new Error(`Can't figure out font format for \"${url}\"`);\n    }\n    export function decodeglyph(glines: string[], curcode: number, yoffset: number): Glyph {\n        let width = 0;\n        for (var gline of glines) width = Math.max(width, gline.length);\n        let g = new Glyph(width, glines.length, 1, curcode, yoffset);\n        for (var y = 0; y < glines.length; y++) {\n            let gline = glines[y];\n            for (var x = 0; x < gline.length; x++) {\n                let ch = gline[x];\n                g.set(x, y, ch==='@' || ch==='#' ? 1 : 0); // TODO: provide mapping\n            }\n        }\n        return g;\n    }\n    // https://github.com/robhagemans/monobit\n    export function decodeyafflines(lines: string[]): Font {\n        let maxheight = 0;\n        let properties = {};\n        let glyphs = {};\n        let yoffset = 0;\n        let curcode = -1;\n        let curglyph: string[] = [];\n        const re_prop = /^([\\w-]+):\\s+(.+)/i;\n        const re_label = /^0x([0-9a-f]+):|u[+]([0-9a-f]+):|(\\w+):/i;\n        const re_gline = /^\\s+([.@]+)/\n        function addfont() {\n            if (curcode >= 0 && curglyph.length) {\n                glyphs[curcode] = decodeglyph(curglyph, curcode, yoffset);\n                curcode = -1;\n                curglyph = [];\n            }\n        }\n        for (let line of lines) {\n            let m: RegExpExecArray;\n            if (m = re_prop.exec(line)) {\n                properties[m[1]] = m[2];\n                if (m[1] === 'bottom') yoffset = parseInt(m[2]);\n                if (m[1] === 'size') maxheight = parseInt(m[2]);\n            } else if (m = re_label.exec(line)) {\n                addfont();\n                if (m[1] != null) curcode = parseInt(m[1], 16);\n                else if (m[2] != null) curcode = parseInt(m[2], 16);\n                else if (m[3] != null) curcode = null; // text labels not supported\n            } else if (m = re_gline.exec(line)) {\n                curglyph.push(m[1]);\n            }\n            if (isNaN(curcode + yoffset + maxheight))\n                throw new Error(`couldn't decode .yaff: ${JSON.stringify(line)}`)\n        }\n        addfont();\n        return { maxheight, properties, glyphs };\n    }\n    // https://github.com/robhagemans/monobit\n    export function decodedrawlines(lines: string[]): Font {\n        let maxheight = 0;\n        let properties = {};\n        let glyphs = {};\n        let curcode = -1;\n        let curglyph: string[] = [];\n        const re_gline = /^([0-9a-f]+)?[:]?\\s*([-#]+)/i;\n        function addfont() {\n            if (curcode >= 0 && curglyph.length) {\n                glyphs[curcode] = decodeglyph(curglyph, curcode, 0);\n                maxheight = Math.max(maxheight, curglyph.length);\n                curcode = -1;\n                curglyph = [];\n            }\n        }\n        for (let line of lines) {\n            let m: RegExpExecArray;\n            if (m = re_gline.exec(line)) {\n                if (m[1] != null) {\n                    addfont();\n                    curcode = parseInt(m[1], 16);\n                    if (isNaN(curcode))\n                        throw new Error(`couldn't decode .draw: ${JSON.stringify(line)}`)\n                }\n                curglyph.push(m[2]);\n            }\n        }\n        addfont();\n        return { maxheight, properties, glyphs };\n    }\n}\n\n// TODO: merge w/ pixeleditor\n\nexport type PixelEditorImageFormat = {\n    w:number\n    h:number\n    count?:number\n    bpp?:number\n    np?:number\n    bpw?:number\n    sl?:number\n    pofs?:number\n    remap?:number[]\n    reindex?:number[]\n    brev?:boolean\n    flip?:boolean\n    destfmt?:PixelEditorImageFormat\n    xform?:string\n    skip?:number\n    aspect?:number\n  };\n\n  function remapBits(x:number, arr:number[]) : number {\n    if (!arr) return x;\n    var y = 0;\n    for (var i=0; i<arr.length; i++) {\n      var s = arr[i];\n      if (s < 0) {\n        s = -s-1;\n        y ^= 1 << s;\n      }\n      if (x & (1 << i)) {\n        y ^= 1 << s;\n      }\n    }\n    return y;\n  }\n  \n  export function convertWordsToImages(words:ArrayLike<number>, fmt:PixelEditorImageFormat) : Uint8Array[] {\n    var width = fmt.w;\n    var height = fmt.h;\n    var count = fmt.count || 1;\n    var bpp = fmt.bpp || 1;\n    var nplanes = fmt.np || 1;\n    var bitsperword = fmt.bpw || 8;\n    var wordsperline = fmt.sl || Math.ceil(width * bpp / bitsperword);\n    var mask = (1 << bpp)-1;\n    var pofs = fmt.pofs || wordsperline*height*count;\n    var skip = fmt.skip || 0;\n    var images = [];\n    for (var n=0; n<count; n++) {\n      var imgdata = [];\n      for (var y=0; y<height; y++) {\n        var yp = fmt.flip ? height-1-y : y;\n        var ofs0 = n*wordsperline*height + yp*wordsperline;\n        var shift = 0;\n        for (var x=0; x<width; x++) {\n          var color = 0;\n          var ofs = remapBits(ofs0, fmt.remap);\n          // TODO: if (fmt.reindex) { [ofs, shift] = reindexMask(x, fmt.reindex); ofs += ofs0; }\n          for (var p=0; p<nplanes; p++) {\n            var byte = words[ofs + p*pofs + skip];\n            color |= ((fmt.brev ? byte>>(bitsperword-shift-bpp) : byte>>shift) & mask) << (p*bpp);\n          }\n          imgdata.push(color);\n          shift += bpp;\n          if (shift >= bitsperword && !fmt.reindex) {\n            ofs0 += 1;\n            shift = 0;\n          }\n        }\n      }\n      images.push(new Uint8Array(imgdata));\n    }\n    return images;\n  }\n  ", null, null, "\n/*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH$2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$2; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$2; }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\nconst deflate$2 = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 30;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n", null, null, null, null, null, "\nimport _chroma from 'chroma-js'\nimport { isArray, rgb2bgr } from '../../util';\n\nexport type Chroma = { _rgb: [number,number,number,number] };\n\nexport type ColorSource = number | [number,number,number] | [number,number,number,number] | string | Chroma;\n\nfunction checkCount(count) {\n    if (count < 0 || count > 65536) {\n        throw new Error(\"Palettes cannot have more than 2^16 (65536) colors.\");\n    }\n}\n\nexport function isPalette(object): object is Palette {\n    return object['colors'] instanceof Uint32Array;\n}\n\nexport function isChroma(object): object is Chroma {\n    return object['_rgb'] instanceof Array;\n}\n\nexport class Palette {\n    readonly colors: Uint32Array;\n\n    constructor(arg: number | any[] | Uint32Array) {\n        // TODO: more array types\n        if (typeof arg === 'number') {\n            checkCount(arg);\n            this.colors = new Uint32Array(arg);\n        } else if (arg instanceof Uint32Array) {\n            this.colors = new Uint32Array(arg);\n        } else if (isArray(arg)) {\n            this.colors = new Uint32Array(arg.map(rgb));\n        } else\n            throw new Error(`Invalid Palette constructor`)\n    }\n    get(index: number) {\n        return this.colors[index];\n    }\n    chromas() {\n        return Array.from(this.colors).map((rgba) => from(rgba & 0xffffff));\n    }\n}\n\nexport const chroma = _chroma;\n\nexport function from(obj: ColorSource) {\n    if (typeof obj === 'number')\n        return _chroma(rgb2bgr(obj & 0xffffff));\n    else\n        return _chroma(obj as any);\n}\n\nexport function rgb(obj: ColorSource) : number;\nexport function rgb(r: number, g: number, b: number) : number;\n\nexport function rgb(obj: any, g?: number, b?: number) : number {\n    return rgba(obj, g, b, 0xff) | 0xff000000;\n}\n\nexport function rgba(obj: ColorSource) : number;\nexport function rgba(r: number, g: number, b: number, a: number) : number;\n\nexport function rgba(obj: ColorSource, g?: number, b?: number, a?: number) : number {\n    if (isChroma(obj)) {\n        return rgba(obj._rgb[0], obj._rgb[1], obj._rgb[2], obj._rgb[3]);\n    }\n    if (typeof obj === 'number') {\n        let r = obj;\n        if (typeof g === 'number' && typeof b === 'number')\n            return ((r & 0xff) << 0) | ((g & 0xff) << 8) | ((b & 0xff) << 16) | ((a & 0xff) << 24);\n        else\n            return obj;\n    }\n    if (typeof obj !== 'string' && isArray(obj) && typeof obj[0] === 'number') {\n        let arr = obj;\n        let v = 0;\n        v |= (arr[0] & 0xff) << 0;\n        v |= (arr[1] & 0xff) << 8;\n        v |= (arr[2] & 0xff) << 16;\n        v |= (arr[3] & 0xff) << 24;\n        return v;\n    }\n    return rgba(from(obj).rgb());\n}\n\nexport function rgba2arr(v: number): number[] {\n    return [\n        (v >> 0) & 0xff,\n        (v >> 8) & 0xff,\n        (v >> 16) & 0xff,\n        (v >> 24) & 0xff,\n    ]\n}\n\nexport function rgb2arr(v: number): number[] {\n    return rgba2arr(v).slice(0,3);\n}\n\ntype ColorGenFunc = (index: number) => number;\n\nexport namespace palette {\n    export function from(obj: number | any[] | Uint32Array | ColorGenFunc, count?: number) {\n        checkCount(count);\n        if (typeof obj === 'function') {\n            if (!count) throw new Error(`You must also pass the number of colors to generate.`)\n            var pal = new Palette(count);\n            for (var i = 0; i < pal.colors.length; i++) {\n                pal.colors[i] = rgba(obj(i));\n            }\n            return pal;\n        } else {\n            return new Palette(obj);\n        }\n    }\n    export function mono() {\n        return greys(2);\n    }\n    function rgb2() {\n        return new Palette([\n            rgb(0, 0, 0),\n            rgb(0, 0, 255),\n            rgb(255, 0, 0),\n            rgb(0, 255, 0),\n        ]);\n    }\n    function rgb3() {\n        return new Palette([\n            rgb(0, 0, 0),\n            rgb(0, 0, 255),\n            rgb(255, 0, 0),\n            rgb(255, 0, 255),\n            rgb(0, 255, 0),\n            rgb(0, 255, 255),\n            rgb(255, 255, 0),\n            rgb(255, 255, 255),\n        ]);\n    }\n    export function greys(count: number) {\n        return from((i) => {\n            let v = 255 * i / (count - 1);\n            return rgb(v,v,v);\n        }, count);\n    }\n    export function colors(count: number) {\n        switch (count) {\n            case 2: return mono();\n            case 4: return rgb2();\n            case 8: return rgb3();\n            default: return factors(count); // TODO\n        }\n    }\n    export function helix(count: number) {\n        checkCount(count);\n        return new Palette(chroma.cubehelix().scale().colors(count));\n    }\n    export function factors(count: number, mult?: number) {\n        mult = mult || 0x031f0f;\n        return from((i) => rgb(i * mult), count);\n    }\n    // TODO: https://www.iquilezles.org/www/articles/palettes/palettes.htm\n}\n", "\nimport { FileDataCache } from \"../../util\";\nimport { FileData, WorkingStore } from \"../../workertypes\";\n\n// remote resource cache\nvar $$cache = new FileDataCache(); // TODO: better cache?\n// file read/write interface\nvar $$store: WorkingStore;\n// backing store for data\nvar $$data: {} = {};\n// module cache\nvar $$modules: Map<string,{}> = new Map();\n\nexport function $$setupFS(store: WorkingStore) {\n    $$store = store;\n}\nexport function $$getData() {\n    return $$data;\n}\nexport function $$loadData(data: {}) {\n    Object.assign($$data, data);\n}\n\n// object that can load state from backing store\nexport interface Loadable {\n    // called during script, from io.data.load()\n    $$setstate?(newstate: {}) : void;\n    // called after script, from io.data.save()\n    $$getstate() : {};\n}\n\nexport namespace data {\n    export function load(object: Loadable, key: string): Loadable {\n        if (object == null) return object;\n        let override = $$data && $$data[key];\n        if (override && object.$$setstate) {\n            object.$$setstate(override);\n        } else if (override) {\n            Object.assign(object, override);\n        }\n        return object;\n    }\n    export function save(object: Loadable, key: string): Loadable {\n        if ($$data && object && object.$$getstate) {\n            $$data[key] = object.$$getstate();\n        }\n        return object;\n    }\n    export function get(key: string) {\n        return $$data && $$data[key];\n    }\n    export function set(key: string, value: object) {\n        if ($$data) {\n            $$data[key] = value;\n        }\n    }\n}\n\nexport class IOWaitError extends Error {\n}\n\nexport function canonicalurl(url: string) : string {\n    // get raw resource URL for github\n    if (url.startsWith('https://github.com/')) {\n        let toks = url.split('/');\n        if (toks[5] === 'blob') {\n            return `https://raw.githubusercontent.com/${toks[3]}/${toks[4]}/${toks.slice(6).join('/')}`\n        }\n    }\n    return url;\n}\n\nexport function fetchurl(url: string, type?: 'binary' | 'text'): FileData {\n    // TODO: only works in web worker\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = type === 'text' ? 'text' : 'arraybuffer';\n    xhr.open(\"GET\", url, false);  // synchronous request\n    xhr.send(null);\n    if (xhr.response != null && xhr.status == 200) {\n        if (type === 'text') {\n            return xhr.response as string;\n        } else {\n            return new Uint8Array(xhr.response);\n        }\n    } else {\n        throw new Error(`The resource at \"${url}\" responded with status code of ${xhr.status}.`)\n    }\n}\n\nexport function readnocache(url: string, type?: 'binary' | 'text'): FileData {\n    if (url.startsWith('http:') || url.startsWith('https:')) {\n        return fetchurl(url, type);\n    }\n    if ($$store) {\n        return $$store.getFileData(url);\n    }\n}\n\n// TODO: read files too\nexport function read(url: string, type?: 'binary' | 'text'): FileData {\n    // canonical-ize url\n    url = canonicalurl(url);\n    // check cache first\n    let cachekey = url;\n    let data = $$cache.get(cachekey);\n    if (data != null) return data;\n    // not in cache, read it\n    data = readnocache(url, type);\n    if (data == null) throw new Error(`Cannot find resource \"${url}\"`);\n    if (type === 'text' && typeof data !== 'string') throw new Error(`Resource \"${url}\" is not a string`);\n    if (type === 'binary' && !(data instanceof Uint8Array)) throw new Error(`Resource \"${url}\" is not a binary file`);\n    // store in cache\n    $$cache.put(cachekey, data);\n    return data;\n}\n\nexport function readbin(url: string): Uint8Array {\n    var data = read(url, 'binary');\n    if (data instanceof Uint8Array)\n        return data;\n    else\n        throw new Error(`The resource at \"${url}\" is not a binary file.`);\n}\n\nexport function readlines(url: string) : string[] {\n    return (read(url, 'text') as string).split('\\n');\n}\n\nexport function splitlines(text: string) : string[] {\n    return text.split(/\\n|\\r\\n/g);\n}\n\nexport function module(url: string) {\n    // find module in cache?\n    let key = `${url}::${url.length}`;\n    let exports = $$modules.get(key);\n    if (exports == null) {\n        let code = readnocache(url, 'text') as string;\n        let func = new Function('exports', 'module', code);\n        let module = {}; // TODO?\n        exports = {};\n        func(exports, module);\n        $$modules.set(key, exports);\n    }\n    return exports;\n}\n\n///\n\n// TODO: what if this isn't top level?\nexport class Mutable<T> implements Loadable {\n    value : T;\n    constructor(initial : T) {\n        this.value = initial;\n    }\n    $$setstate(newstate) {\n        this.value = newstate.value;\n    }\n    $$getstate() {\n        return { value: this.value };\n    }\n}\n\nexport function mutable<T>(obj: object) : object {\n    Object.defineProperty(obj, '$$setstate', {\n        value: function(newstate) {\n            Object.assign(this, newstate);\n        },\n        enumerable: false\n    });\n    Object.defineProperty(obj, '$$getstate', {\n        value: function() {\n            return this;\n        },\n        enumerable: false\n    });\n    return obj;\n}\n", "\nenum DataType {\n    unknown,\n    u8,\n    s8,\n    u16,\n    s16,\n    u32,\n    s32,\n    f32,\n    f64,\n};\n\nfunction getArrayDataType(value: any) : DataType {\n    if (value instanceof Uint8Array) {\n        return DataType.u8;\n    } else if (value instanceof Int8Array) {\n        return DataType.s8;\n    } else if (value instanceof Uint16Array) {\n        return DataType.u16;\n    } else if (value instanceof Int16Array) {\n        return DataType.s16;\n    } else if (value instanceof Uint32Array) {\n        return DataType.u32;\n    } else if (value instanceof Int32Array) {\n        return DataType.s32;\n    } else if (value instanceof Float32Array) {\n        return DataType.f32;\n    } else if (value instanceof Float64Array) {\n        return DataType.f64;\n    }\n}\n\nexport abstract class OutputFile {\n    constructor(\n        public readonly path : string,\n        public readonly decls : {}\n    ) {\n    }\n    abstract declToText(label: string, value: any) : string;\n    toString() : string {\n        return Object.entries(this.decls).map(entry => this.declToText(entry[0],entry[1])).join('\\n\\n');\n    }\n}\n\nexport class COutputFile extends OutputFile {\n    toString() : string {\n        return `#include <stdint.h>\\n\\n${super.toString()}\\n`;\n    }\n    dataTypeToString(dtype: DataType) {\n        switch (dtype) {\n            case DataType.u8: return 'uint8_t';\n            case DataType.s8: return 'int8_t';\n            case DataType.u16: return 'uint16_t';\n            case DataType.s16: return 'int16_t';\n            case DataType.u32: return 'uint32_t';\n            case DataType.s32: return 'int32_t';\n            case DataType.f32: return 'float';\n            case DataType.f64: return 'double';\n            default:\n                throw new Error('Cannot convert data type'); // TODO\n        }\n    }\n    valueToString(value, atype: DataType) : string {\n        // TODO: round, check value\n        return value+\"\";\n    }\n    declToText(label: string, value: any) : string {\n        if (Array.isArray(value) || value['BYTES_PER_ELEMENT']) {\n            let atype = getArrayDataType(value);\n            if (atype != null) {\n                let dtypestr = this.dataTypeToString(atype);\n                let dtext = value.map(elem => this.valueToString(elem, atype)).join(',');\n                let len = value.length;\n                return `${dtypestr} ${label}[${len}] = { ${dtext} };`;\n            }\n        }\n        throw new Error(`Cannot convert array \"${label}\"`); // TODO\n    }\n}\n\n// TODO: header file, auto-detect tool?\nexport function file(path: string, decls: {}) {\n    return new COutputFile(path, decls);\n}\n", "\nimport * as io from \"./io\";\n\n// sequence counter\nvar $$seq : number = 0;\n\n// if an event is specified, it goes here\nexport const EVENT_KEY = \"$$event\";\n\n// an object that can become interactive, identified by ID\nexport interface Interactive {\n    $$interact: InteractionRecord;\n}\n\nexport interface InteractEvent {\n    interactid : number;\n    type: string;\n    x?: number;\n    y?: number;\n    button?: boolean;\n}\n\nexport type InteractCallback = (event: InteractEvent) => void;\n\n// InteractionRecord maps a target object to an interaction ID\n// the $$callback is used once per script eval, then gets nulled\n// whether or not it's invoked\n// event comes from $$data.$$event\nexport class InteractionRecord implements io.Loadable {\n    readonly interacttarget: Interactive;\n    interactid : number;\n    lastevent : {} = null;\n    constructor(\n        interacttarget: Interactive,\n        private $$callback: InteractCallback\n    ) {\n        this.interacttarget = interacttarget || (<any>this as Interactive);\n        this.interactid = ++$$seq;\n    }\n    $$setstate(newstate: {interactid: number}) {\n        this.interactid = newstate.interactid;\n        this.interacttarget.$$interact = this;\n        let event : InteractEvent = io.data.get(EVENT_KEY);\n        if (event && event.interactid == this.interactid) {\n            if (this.$$callback) {\n                this.$$callback(event);\n            }\n            this.lastevent = event;\n            io.data.set(EVENT_KEY, null);\n        }\n        this.$$callback = null;\n    }\n    $$getstate() {\n        //TODO: this isn't always cleared before we serialize (e.g. if exception or move element)\n        //and we do it in checkResult() too\n        this.$$callback = null;\n        return {interactid: this.interactid};\n    }\n}\n\nexport function isInteractive(obj: object): obj is Interactive {\n    return !!((obj as Interactive).$$interact);\n}\n\nexport function interact(object: any, callback) : InteractionRecord {\n    // TODO: limit to Bitmap, etc\n    if (typeof object === 'object') {\n        return new InteractionRecord(object, callback);\n    }\n    throw new Error(`This object is not capable of interaction.`);\n}\n\n///\n\nexport interface ScriptUIType {\n    uitype : string;\n}\n\nexport class ScriptUISliderType implements ScriptUIType {\n    readonly uitype = 'slider';\n    value: number;\n    constructor(\n        readonly min: number,\n        readonly max: number,\n        readonly step: number\n    ) {\n        this.value = min;\n    }\n}\n\nexport class ScriptUISlider extends ScriptUISliderType implements io.Loadable {\n    initial(value: number) {\n        this.value = value;\n        return this;\n    }\n    $$getstate() {\n        return { value: this.value };\n    }\n}\n\nexport function slider(min: number, max: number, step?: number) {\n    return new ScriptUISlider(min, max, step || 1);\n}\n\n///\n\nexport class ScriptUISelectType<T> implements ScriptUIType {\n    readonly uitype = 'select';\n    value: T;\n    index: number;\n    constructor(\n        readonly options: T[]\n    ) {\n        this.index = 0;\n        this.value = this.options[this.index];\n    }\n}\n\nexport class ScriptUISelect<T> extends ScriptUISelectType<T> implements io.Loadable {\n    initial(index: number) {\n        this.index = index;\n        this.value = this.options[index];\n        return this;\n    }\n    $$getstate() {\n        return { value: this.value, index: this.index };\n    }\n}\n\nexport function select(options: any[]) {\n    return new ScriptUISelect(options);\n}\n\n///\n\nexport class ScriptUIButtonType extends InteractionRecord implements ScriptUIType, Interactive {\n    readonly uitype = 'button';\n    $$interact: InteractionRecord;\n    enabled?: boolean;\n\n    constructor(\n        readonly label: string,\n        callback: InteractCallback\n    ) {\n        super(null, callback);\n        this.$$interact = this;\n    }\n}\n\nexport class ScriptUIButton extends ScriptUIButtonType {\n}\n\nexport function button(name: string, callback: InteractCallback) {\n    return new ScriptUIButton(name, callback);\n}\n\nexport class ScriptUIToggle extends ScriptUIButton implements io.Loadable {\n    // share with InteractionRecord\n    $$getstate() {\n        let state = super.$$getstate() as any;\n        state.enabled = this.enabled;\n        return state;\n    }\n    $$setstate(newstate: any) {\n        this.enabled = newstate.enabled;\n        super.$$setstate(newstate);\n    }\n}\n\nexport function toggle(name: string) {\n    return new ScriptUIToggle(name, function(e) {\n        this.enabled = !this.enabled;\n    });\n}\n\n///\n\nexport class ScriptUIShortcut extends InteractionRecord implements ScriptUIType, Interactive {\n    readonly uitype = 'shortcut';\n    $$interact: InteractionRecord;\n\n    constructor(\n        readonly key: string,\n        callback: InteractCallback\n    ) {\n        super(null, callback);\n        this.$$interact = this;\n    }\n}\n\nexport function key(key: string, callback: InteractCallback) {\n    return new ScriptUIShortcut(key, callback);\n}\n", "\nimport { WorkerError } from \"../workertypes\";\nimport ErrorStackParser = require(\"error-stack-parser\");\nimport yufka from 'yufka';\nimport * as bitmap from \"./lib/bitmap\";\nimport * as io from \"./lib/io\";\nimport * as output from \"./lib/output\";\nimport * as color from \"./lib/color\";\nimport * as scriptui from \"./lib/scriptui\";\n\nexport const PROP_CONSTRUCTOR_NAME = \"$$consname\";\n\nexport interface Cell {\n    id: string;\n    object?: any;\n}\n\nexport interface RunResult {\n    cells: Cell[];\n    state: {};\n}\n\nconst IMPORTS = {\n    'bitmap': bitmap,\n    'io': io,\n    'output': output,\n    'color': color,\n    'ui': scriptui,\n}\n\nconst LINE_NUMBER_OFFSET = 3; // TODO: shouldnt need?\n\nconst GLOBAL_BADLIST = [\n    'eval'\n]\n\nconst GLOBAL_GOODLIST = [\n    'eval', // 'eval' can't be defined or assigned to in strict mode code\n    'Math', 'JSON',\n    'parseFloat', 'parseInt', 'isFinite', 'isNaN',\n    'String', 'Symbol', 'Number', 'Object', 'Boolean', 'NaN', 'Infinity', 'Date', 'BigInt',\n    'Set', 'Map', 'RegExp', 'Array', 'ArrayBuffer', 'DataView',\n    'Float32Array', 'Float64Array',\n    'Int8Array', 'Int16Array', 'Int32Array',\n    'Uint8Array', 'Uint16Array', 'Uint32Array', 'Uint8ClampedArray',\n]\n\nclass RuntimeError extends Error {\n    constructor(public loc: acorn.SourceLocation, msg: string) {\n        super(msg);\n    }\n}\n\nfunction setConstructorName(o: object) : void {\n    let name = Object.getPrototypeOf(o)?.constructor?.name;\n    if (name != null && name != 'Object') {\n        o[PROP_CONSTRUCTOR_NAME] = name;\n    }\n}\n\nexport class Environment {\n    preamble: string;\n    postamble: string;\n    obj: {};\n    seq: number;\n    declvars : {[name : string] : acorn.Node};\n    builtins : {}\n\n    constructor(\n        public readonly globalenv: any,\n        public readonly path: string\n    ) {\n        var badlst = Object.getOwnPropertyNames(this.globalenv).filter(name => GLOBAL_GOODLIST.indexOf(name) < 0);\n        this.builtins = {\n            print: (...args) => this.print(args),\n            ...IMPORTS\n        }\n        this.preamble = `'use strict';var ${badlst.join(',')};`;\n        for (var impname in this.builtins) {\n            this.preamble += `var ${impname}=$$.${impname};`\n        }\n        this.preamble += '{\\n';\n        this.postamble = '\\n}';\n    }\n    error(varname: string, msg: string) {\n        let obj = this.declvars && this.declvars[varname];\n        console.log('ERROR', varname, obj, this);\n        throw new RuntimeError(obj && obj.loc, msg);\n    }\n    print(args: any[]) {\n        if (args && args.length > 0 && args[0] != null) {\n            this.obj[`$print__${this.seq++}`] = args.length == 1 ? args[0] : args;\n        }\n    }\n    preprocess(code: string): string {\n        this.declvars = {};\n        this.seq = 0;\n        let options = {\n            // https://www.npmjs.com/package/magic-string#sgeneratemap-options-\n            sourceMap: {\n                file: this.path,\n                source: this.path,\n                hires: false,\n                includeContent: false\n            },\n            // https://github.com/acornjs/acorn/blob/master/acorn/README.md\n            acorn: {\n                ecmaVersion: 6 as any,\n                locations: true,\n                allowAwaitOutsideFunction: true,\n                allowReturnOutsideFunction: true,\n                allowReserved: true,\n            }\n        };\n        const result = yufka(code, options, (node, { update, source, parent }) => {\n            const isTopLevel = () => {\n                return parent() && parent().type === 'ExpressionStatement' && parent(2) && parent(2).type === 'Program';\n            }\n            const convertTopToPrint = () => {\n                if (isTopLevel()) {\n                    let printkey = `$print__${this.seq++}`;\n                    update(`this.${printkey} = io.data.load(${source()}, ${JSON.stringify(printkey)})`);\n                    //update(`print(${source()});`)\n                }\n            }\n            const left = node['left'];\n            switch (node.type) {\n                // add preamble, postamble\n                case 'Program':\n                    update(`${this.preamble}${source()}${this.postamble}`)\n                    break;\n                // error on forbidden keywords\n                case 'Identifier':\n                    if (GLOBAL_BADLIST.indexOf(source()) >= 0) {\n                        update(`__FORBIDDEN__KEYWORD__${source()}__`) // TODO? how to preserve line number?\n                    } else {\n                        convertTopToPrint();\n                    }\n                    break;\n                // x = expr --> var x = expr (first use)\n                case 'AssignmentExpression':\n                    if (isTopLevel()) {\n                        if (left && left.type === 'Identifier') {\n                            if (!this.declvars[left.name]) {\n                                update(`var ${left.name}=io.data.load(this.${source()}, ${JSON.stringify(left.name)})`)\n                                this.declvars[left.name] = left;\n                            } else {\n                                update(`${left.name}=this.${source()}`)\n                            }\n                        }\n                    }\n                    break;\n                // convert lone expressions to print()\n                case 'UnaryExpression':\n                case 'BinaryExpression':\n                case 'CallExpression':\n                case 'MemberExpression':\n                    convertTopToPrint();\n                    break;\n                // literal comments\n                case 'Literal':\n                    if (typeof node['value'] === 'string' && isTopLevel()) {\n                        update(`this.$doc__${this.seq++} = { literaltext: ${source()} };`);\n                    } else {\n                        convertTopToPrint();\n                    }\n                    break;\n            }\n        });\n        return result.toString();\n    }\n    async run(code: string): Promise<void> {\n        // TODO: split into cells based on \"--\" linebreaks?\n        code = this.preprocess(code);\n        this.obj = {};\n        const AsyncFunction = Object.getPrototypeOf(async function () { }).constructor;\n        const fn = new AsyncFunction('$$', code).bind(this.obj, this.builtins);\n        await fn.call(this);\n        this.checkResult(this.obj, new Set(), []);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // TODO: return initial location of thingie\n    checkResult(o, checked: Set<object>, fullkey: string[]) {\n        if (o == null) return;\n        if (checked.has(o)) return;\n        if (typeof o === 'object') {\n            setConstructorName(o);\n            delete o.$$callback; // clear callbacks (TODO? put somewhere else?)\n            if (o.length > 100) return; // big array, don't bother\n            if (o.BYTES_PER_ELEMENT > 0) return; // typed array, don't bother\n            checked.add(o); // so we don't recurse if cycle\n            function prkey() { return fullkey.join('.') }\n            // go through all object properties recursively\n            for (var [key, value] of Object.entries(o)) {\n                if (value == null && fullkey.length == 0 && !key.startsWith(\"$\")) {\n                    this.error(key, `\"${key}\" has no value.`)\n                }\n                fullkey.push(key);\n                if (typeof value === 'function') {\n                    if (fullkey.length == 1)\n                        this.error(fullkey[0], `\"${prkey()}\" is a function. Did you forget to pass parameters?`); // TODO? did you mean (needs to see entire expr)\n                    else\n                        this.error(fullkey[0], `This expression may be incomplete, or it contains a function object: ${prkey()}`); // TODO? did you mean (needs to see entire expr)\n                }\n                if (typeof value === 'symbol') {\n                    this.error(fullkey[0], `\"${prkey()}\" is a Symbol, and can't be used.`) // TODO?\n                }\n                if (value instanceof Promise) {\n                    this.error(fullkey[0], `\"${prkey()}\" is unresolved. Use \"await\" before expression.`) // TODO?\n                }\n                this.checkResult(value, checked, fullkey);\n                fullkey.pop();\n            }\n        }\n    }\n    render(): Cell[] {\n        var cells = [];\n        for (var [key, value] of Object.entries(this.obj)) {\n            if (typeof value === 'function') {\n                // TODO: find other values, functions embedded in objects?\n            } else {\n                var cell: Cell = { id: key, object: value };\n                cells.push(cell);\n            }\n        }\n        return cells;\n    }\n    extractErrors(e: Error): WorkerError[] {\n        let loc = e['loc'];\n        if (loc && loc.start && loc.end) {\n            return [{\n                path: this.path,\n                msg: e.message,\n                line: loc.start.line,\n                start: loc.start.column,\n                end: loc.end.line,\n            }]\n        }\n        if (loc && loc.line != null) {\n            return [{\n                path: this.path,\n                msg: e.message,\n                line: loc.line,\n                start: loc.column,\n            }]\n        }\n        // TODO: Cannot parse given Error object?\n        let frames = ErrorStackParser.parse(e);\n        let frame = frames.findIndex(f => f.functionName === 'anonymous');\n        let errors = [];\n        // if ErrorStackParser fails, resort to regex\n        if (frame < 0 && e.stack != null) {\n            let m = /.anonymous.:(\\d+):(\\d+)/g.exec(e.stack);\n            if (m != null) {\n                errors.push( {\n                    path: this.path,\n                    msg: e.message,\n                    line: parseInt(m[1]) - LINE_NUMBER_OFFSET,\n                });\n            }\n        }\n        // otherwise iterate thru all the frames\n        while (frame >= 0) {\n            console.log(frames[frame]);\n            if (frames[frame].fileName.endsWith('Function')) {\n                // TODO: use source map\n                errors.push( {\n                    path: this.path,\n                    msg: e.message,\n                    line: frames[frame].lineNumber - LINE_NUMBER_OFFSET,\n                    //start: frames[frame].columnNumber,\n                } );\n            }\n            --frame;\n        }\n        // if no stack frames parsed, last resort error msg\n        if (errors.length == 0) {\n            errors.push( {\n                path: this.path,\n                msg: e.message,\n                line: 0\n            } );\n        }\n        return errors;\n    }\n    commitLoadableState() {\n        // TODO: visit children?\n        for (let [key, value] of Object.entries(this.obj)) {\n            let loadable = <any>value as io.Loadable;\n            io.data.save(loadable, key);\n        }\n        return io.$$getData();\n    }\n}\n", "\nimport { FileData, Dependency, SourceLine, SourceFile, CodeListing, CodeListingMap, WorkerError, Segment, WorkerResult, WorkerOutputResult, isUnchanged, isOutputResult, WorkerMessage, WorkerItemUpdate } from \"../common/workertypes\";\nimport { getFilenamePrefix, getFolderForPath, isProbablyBinary, getBasePlatform, getWithBinary } from \"../common/util\";\nimport { Platform } from \"../common/baseplatform\";\nimport localforage from \"localforage\";\n\nexport interface ProjectFilesystem {\n  getFileData(path: string) : Promise<FileData>;\n  setFileData(path: string, data: FileData) : Promise<void>;\n}\n\nexport class WebPresetsFileSystem implements ProjectFilesystem {\n  preset_id : string;\n  constructor(platform_id: string) {\n    this.preset_id = getBasePlatform(platform_id); // remove .suffix from preset name\n  }\n  async getRemoteFile(path: string): Promise<FileData> {\n    return new Promise( (yes,no)=> {\n      return getWithBinary(path, yes, isProbablyBinary(path) ? 'arraybuffer' : 'text');\n    });\n  }\n  async getFileData(path: string) : Promise<FileData> {\n    // found on remote fetch?\n    var webpath = \"presets/\" + this.preset_id + \"/\" + path;\n    var data = await this.getRemoteFile(webpath);\n    if (data) console.log(\"read\",webpath,data.length,'bytes');\n    return data;\n  }\n  async setFileData(path: string, data: FileData) : Promise<void> {\n    // not implemented\n  }\n}\n\nexport class NullFilesystem implements ProjectFilesystem {\n  gets = [];\n  sets = [];\n  getFileData(path: string): Promise<FileData> {\n    this.gets.push(path);\n    return null;\n  }\n  setFileData(path: string, data: FileData): Promise<void> {\n    this.sets.push(path);\n    return;\n  }\n  \n}\n\nexport class OverlayFilesystem implements ProjectFilesystem {\n  basefs: ProjectFilesystem;\n  overlayfs: ProjectFilesystem;\n  constructor(basefs: ProjectFilesystem, overlayfs: ProjectFilesystem) {\n    this.basefs = basefs;\n    this.overlayfs = overlayfs;\n  }\n  async getFileData(path: string): Promise<FileData> {\n    var data = await this.overlayfs.getFileData(path);\n    if (data == null) {\n      return this.basefs.getFileData(path);\n    } else {\n      return data;\n    }\n  }\n  async setFileData(path: string, data: FileData): Promise<void> {\n    await this.overlayfs.setFileData(path, data);\n    return this.basefs.setFileData(path, data);\n  }\n}\n\nexport class LocalForageFilesystem {\n  store: any;\n  constructor(store: any) {\n    this.store = store;\n  }\n  async getFileData(path: string): Promise<FileData> {\n    return this.store.getItem(path);\n  }\n  async setFileData(path: string, data: FileData): Promise<void> {\n    return this.store.setItem(path, data);\n  }\n}\n\ntype BuildResultCallback = (result:WorkerResult) => void;\ntype BuildStatusCallback = (busy:boolean) => void;\ntype IterateFilesCallback = (path:string, data:FileData) => void;\n\nfunction isEmptyString(text : FileData) {\n  return typeof text == 'string' && text.trim && text.trim().length == 0;\n}\n\nexport class CodeProject {\n  filedata : {[path:string]:FileData} = {};\n  listings : CodeListingMap;\n  segments : Segment[];\n  mainPath : string;\n  pendingWorkerMessages = 0;\n  tools_preloaded = {};\n  worker : Worker;\n  platform_id : string;\n  platform : Platform;\n  isCompiling : boolean = false;\n  filename2path = {}; // map stripped paths to full paths\n  filesystem : ProjectFilesystem;\n  dataItems : WorkerItemUpdate[];\n\n  callbackBuildResult : BuildResultCallback;\n  callbackBuildStatus : BuildStatusCallback;\n\n  constructor(worker, platform_id:string, platform, filesystem: ProjectFilesystem) {\n    this.worker = worker;\n    this.platform_id = platform_id;\n    this.platform = platform;\n    this.filesystem = filesystem;\n\n    worker.onmessage = (e) => {\n      this.receiveWorkerMessage(e.data);\n    };\n  }\n\n  receiveWorkerMessage(data : WorkerResult) {\n    var notfinal = this.pendingWorkerMessages > 1;\n    if (notfinal) {\n      this.sendBuild();\n      this.pendingWorkerMessages = 1;\n    } else {\n      if (this.callbackBuildStatus) this.callbackBuildStatus(false);\n      if (!this.isCompiling) { console.log(this.pendingWorkerMessages); console.trace(); } // debug compile problems\n      this.isCompiling = false;\n      this.pendingWorkerMessages = 0;\n    }\n    if (data && isOutputResult(data)) {\n      this.processBuildResult(data);\n    }\n    this.callbackBuildResult(data);\n  }\n\n  preloadWorker(path:string) {\n    var tool = this.platform.getToolForFilename(path);\n    if (tool && !this.tools_preloaded[tool]) {\n      this.worker.postMessage({preload:tool, platform:this.platform_id});\n      this.tools_preloaded[tool] = true;\n    }\n  }\n\n  pushAllFiles(files:string[], fn:string) {\n    // look for local and preset files\n    files.push(fn);\n    // look for files in current (main file) folder\n    var dir = getFolderForPath(this.mainPath);\n    if (dir.length > 0 && dir != 'local') // TODO\n      files.push(dir + '/' + fn);\n  }\n\n  parseIncludeDependencies(text:string):string[] {\n    let files = [];\n    let m;\n    if (this.platform_id.startsWith('script')) { // TODO\n      let re1 = /\\b\\w+[.]read\\([\"'](.+?)[\"']/gmi;\n      while (m = re1.exec(text)) {\n        if (m[1] && m[1].indexOf(':/') < 0) // TODO: ignore URLs\n          this.pushAllFiles(files, m[1]);\n      }\n    } else if (this.platform_id.startsWith('verilog')) {\n      // include verilog includes\n      let re1 = /^\\s*(`include|[.]include)\\s+\"(.+?)\"/gmi;\n      while (m = re1.exec(text)) {\n        this.pushAllFiles(files, m[2]);\n      }\n      // for Silice\n      let re1a = /^\\s*\\$(include|\\$dofile|\\$write_image_in_table)\\('(.+?)'/gmi;\n      while (m = re1a.exec(text)) {\n        this.pushAllFiles(files, m[2]);\n      }\n      // include .arch (json) statements\n      let re2 = /^\\s*([.]arch)\\s+(\\w+)/gmi;\n      while (m = re2.exec(text)) {\n        this.pushAllFiles(files, m[2]+\".json\");\n      }\n      // include $readmem[bh] (TODO)\n      let re3 = /\\$readmem[bh]\\(\"(.+?)\"/gmi;\n      while (m = re3.exec(text)) {\n        this.pushAllFiles(files, m[1]);\n      }\n    } else {\n      // for .asm -- [.%]include \"file\"\n      // for .c -- #include \"file\"\n      let re2 = /^\\s*[.#%]?(include|incbin)\\s+\"(.+?)\"/gmi;\n      while (m = re2.exec(text)) {\n        this.pushAllFiles(files, m[2]);\n      }\n      // for .c -- //#resource \"file\" (or ;resource or #resource)\n      let re3 = /^\\s*([;']|[/][/])#resource\\s+\"(.+?)\"/gm;\n      while (m = re3.exec(text)) {\n        this.pushAllFiles(files, m[2]);\n      }\n      // for XASM only (USE include.ext)\n      // for merlin32 (ASM include.ext)\n      let re4 = /^\\s+(USE|ASM)\\s+(\\S+[.]\\S+)/gm;\n      while (m = re4.exec(text)) {\n        this.pushAllFiles(files, m[2]);\n      }\n      // for wiz\n      let re5 = /^\\s*(import|embed)\\s+\"(.+?)\";/gmi;\n      while (m = re5.exec(text)) {\n        if (m[1] == 'import')\n          this.pushAllFiles(files, m[2] + \".wiz\");\n        else\n          this.pushAllFiles(files, m[2]);\n      }\n    }\n    return files;\n  }\n\n  parseLinkDependencies(text:string):string[] {\n    let files = [];\n    let m;\n    if (this.platform_id.startsWith('verilog')) {\n      //\n    } else {\n      // for .c -- //#link \"file\" (or ;link or #link)\n      let re = /^\\s*([;]|[/][/])#link\\s+\"(.+?)\"/gm;\n      while (m = re.exec(text)) {\n        this.pushAllFiles(files, m[2]);\n      }\n    }\n    return files;\n  }\n  \n  loadFileDependencies(text:string) : Promise<Dependency[]> {\n    let includes = this.parseIncludeDependencies(text);\n    let linkfiles = this.parseLinkDependencies(text);\n    let allfiles = includes.concat(linkfiles);\n    return this.loadFiles(allfiles).then((result) => {\n      // set 'link' property on files that are link dependencies (must match filename)\n      if (result) {\n        for (let dep of result) {\n          dep.link = linkfiles.indexOf(dep.path) >= 0;\n        }\n      }\n      return result;\n    });\n  }\n\n  okToSend():boolean {\n    return this.pendingWorkerMessages++ == 0 && this.mainPath != null;\n  }\n\n  updateFileInStore(path:string, text:FileData) {\n    this.filesystem.setFileData(path, text);\n  }\n\n  // TODO: test duplicate files, local paths mixed with presets\n  buildWorkerMessage(depends:Dependency[]) : WorkerMessage {\n    this.preloadWorker(this.mainPath);\n    var msg : WorkerMessage = {updates:[], buildsteps:[]};\n    // TODO: add preproc directive for __MAINFILE__\n    var mainfilename = this.stripLocalPath(this.mainPath);\n    var maintext = this.getFile(this.mainPath);\n    var depfiles = [];\n    msg.updates.push({path:mainfilename, data:maintext});\n    this.filename2path[mainfilename] = this.mainPath;\n    for (var dep of depends) {\n      if (!dep.link) {\n        msg.updates.push({path:dep.filename, data:dep.data});\n        depfiles.push(dep.filename);\n      }\n      this.filename2path[dep.filename] = dep.path;\n    }\n    msg.buildsteps.push({\n      path:mainfilename,\n      files:[mainfilename].concat(depfiles),\n      platform:this.platform_id,\n      tool:this.platform.getToolForFilename(this.mainPath),\n      mainfile:true});\n    for (var dep of depends) {\n      if (dep.data && dep.link) {\n        this.preloadWorker(dep.filename);\n        msg.updates.push({path:dep.filename, data:dep.data});\n        msg.buildsteps.push({\n          path:dep.filename,\n          files:[dep.filename].concat(depfiles),\n          platform:this.platform_id,\n          tool:this.platform.getToolForFilename(dep.path)});\n      }\n    }\n    if (this.dataItems) msg.setitems = this.dataItems;\n    return msg;\n  }\n\n  // TODO: get local file as well as presets?\n  async loadFiles(paths:string[]) : Promise<Dependency[]> {\n    var result : Dependency[] = [];\n    var addResult = (path:string, data:FileData) => {\n      result.push({\n        path:path,\n        filename:this.stripLocalPath(path),\n        link:true,\n        data:data\n      });\n    }\n    for (var path of paths) {\n      // look in cache\n      if (path in this.filedata) { // found in cache?\n        var data = this.filedata[path];\n        if (data) {\n          addResult(path, data);\n        }\n      } else {\n        var data = await this.filesystem.getFileData(path);\n        if (data) {\n          this.filedata[path] = data; // do not update store, just cache\n          addResult(path, data);\n        } else {\n          this.filedata[path] = null; // mark entry as invalid\n        }\n      }\n    }\n    return result;\n  }\n\n  getFile(path:string):FileData {\n    return this.filedata[path];\n  }\n\n  // TODO: purge files not included in latest build?\n  iterateFiles(callback:IterateFilesCallback) {\n    for (var path in this.filedata) {\n      callback(path, this.getFile(path));\n    }\n  }\n\n  sendBuild() {\n    if (!this.mainPath) throw Error(\"need to call setMainFile first\");\n    var maindata = this.getFile(this.mainPath);\n    // if binary blob, just return it as ROM\n    if (maindata instanceof Uint8Array) {\n      this.isCompiling = true;\n      this.receiveWorkerMessage({\n        output:maindata,\n        errors:[],\n        listings:null,\n        symbolmap:null,\n        params:{}\n      });\n      return;\n    }\n    // otherwise, make it a string\n    var text = typeof maindata === \"string\" ? maindata : '';\n    // TODO: load dependencies of non-main files\n    return this.loadFileDependencies(text).then( (depends) => {\n      if (!depends) depends = [];\n      var workermsg = this.buildWorkerMessage(depends);\n      this.worker.postMessage(workermsg);\n      this.isCompiling = true;\n    });\n  }\n\n  updateFile(path:string, text:FileData) {\n    if (this.filedata[path] == text) return; // unchanged, don't update\n    this.updateFileInStore(path, text); // TODO: isBinary\n    this.filedata[path] = text;\n    if (this.okToSend()) {\n      if (this.callbackBuildStatus) this.callbackBuildStatus(true);\n      this.sendBuild();\n    }\n  };\n\n  setMainFile(path:string) {\n    this.mainPath = path;\n    if (this.callbackBuildStatus) this.callbackBuildStatus(true);\n    this.sendBuild();\n  }\n\n  processBuildResult(data: WorkerOutputResult<any>) {\n    // TODO: link listings with source files\n    if (data.listings) {\n      this.listings = data.listings;\n      for (var lstname in this.listings) {\n        var lst = this.listings[lstname];\n        if (lst.lines)\n          lst.sourcefile = new SourceFile(lst.lines, lst.text);\n        if (lst.asmlines)\n          lst.assemblyfile = new SourceFile(lst.asmlines, lst.text);\n      }\n    }\n    // save and sort segment list\n    var segs = (this.platform.getMemoryMap && this.platform.getMemoryMap()[\"main\"]) || [];\n    if (data.segments) { segs = segs.concat(data.segments || []); }\n    segs.sort((a,b) => {return a.start-b.start});\n    this.segments = segs;\n  }\n\n  getListings() : CodeListingMap {\n    return this.listings;\n  }\n\n  // returns first listing in format [prefix].lst (TODO: could be better)\n  getListingForFile(path: string) : CodeListing {\n    // ignore include files (TODO)\n    //if (path.toLowerCase().endsWith('.h') || path.toLowerCase().endsWith('.inc'))\n      //return;\n    var fnprefix = getFilenamePrefix(this.stripLocalPath(path));\n    var listings = this.getListings();\n    var onlyfile = null;\n    for (var lstfn in listings) {\n      onlyfile = lstfn;\n      if (getFilenamePrefix(lstfn) == fnprefix) {\n        return listings[lstfn];\n      }\n    }\n  }\n  \n  stripLocalPath(path : string) : string {\n    if (this.mainPath) {\n      var folder = getFolderForPath(this.mainPath);\n      if (folder != '' && path.startsWith(folder)) {\n        path = path.substring(folder.length+1);\n      }\n    }\n    return path;\n  }\n\n  updateDataItems(items: WorkerItemUpdate[]) {\n    this.dataItems = items;\n    if (this.okToSend()) { // TODO? mainpath == null?\n      this.sendBuild(); // TODO: don't need entire build?\n    }\n  }\n\n}\n\nexport function createNewPersistentStore(storeid:string) : LocalForage {\n  var store = localforage.createInstance({\n    name: \"__\" + storeid,\n    version: 2.0\n  });\n  return store;\n}\n\n", "\nimport { BuildStep, BuildStepResult, emglobal, store } from \"../workermain\";\nimport { Environment, RunResult } from \"../../common/script/env\";\nimport * as io from \"../../common/script/lib/io\";\nimport { createNewPersistentStore } from \"../../ide/project\";\n\n// cache environments\nvar environments: { [path: string]: Environment } = {};\n\nfunction getEnv(path: string): Environment {\n    var env = environments[path];\n    if (!env) {\n        env = environments[path] = new Environment(emglobal, path);\n        // TODO: load environment from store?\n    }\n    return env;\n}\n\nexport async function runJavascript(step: BuildStep): Promise<BuildStepResult> {\n    var env = getEnv(step.path);\n    var code = store.getFileAsString(step.path);\n    var lstore = createNewPersistentStore(step.platform + \"//items\");\n    // load items from persistent storage (TODO)\n    const itemskey = step.path;\n    if (store.items == null) {\n        store.items = (await lstore.getItem(itemskey)) || {}; // TODO\n        console.log(store.items);\n    }\n    io.$$setupFS(store);\n    io.$$loadData(store.items);\n    try {\n        await env.run(code);\n        let cells = env.render();\n        let state = env.commitLoadableState(); // TODO: doesn't work\n        let output : RunResult = { cells, state };\n        // save items to persistent storage (TODO)\n        lstore.setItem(itemskey, state); // TODO\n        store.items = state; // TODO: why????\n        return { output: output };\n    } catch (e) {\n        console.log(e);\n        return { errors: env.extractErrors(e) };\n    } finally {\n        io.$$setupFS(null);\n    }\n}\n", "\nimport type { WorkerResult, WorkerBuildStep, WorkerMessage, WorkerError, SourceLine, WorkerErrorResult, WorkingStore } from \"../common/workertypes\";\nimport { getBasePlatform, getRootBasePlatform } from \"../common/util\";\n\n/// <reference types=\"emscripten\" />\nexport interface EmscriptenModule {\n  callMain: (args: string[]) => void;\n  FS : any; // TODO\n}\n\ndeclare function importScripts(path:string);\ndeclare function postMessage(msg);\n\nconst ENVIRONMENT_IS_WEB = typeof window === 'object';\nconst ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\nexport const emglobal : any = ENVIRONMENT_IS_WORKER ? self : ENVIRONMENT_IS_WEB ? window : global;\n\n// simple CommonJS module loader\n// TODO: relative paths for dependencies\nif (!emglobal['require']) {\n  emglobal['require'] = (modpath: string) => {\n    if (modpath.endsWith('.js')) modpath = modpath.slice(-3);\n    var modname = modpath.split('/').slice(-1)[0];\n    var hasNamespace = emglobal[modname] != null;\n    console.log('@@@ require', modname, modpath, hasNamespace);\n    if (!hasNamespace) {\n      exports = {};\n      importScripts(`${modpath}.js`);\n    }\n    if (emglobal[modname] == null) {\n      emglobal[modname] = exports; // TODO: always put in global scope?\n    }\n    return emglobal[modname]; // TODO\n  }\n}\n\n// WebAssembly module cache\n// TODO: leaks memory even when disabled...\nvar _WASM_module_cache = {};\nvar CACHE_WASM_MODULES = true; // if false, use asm.js only\n\n// TODO: which modules need this?\nvar wasmMemory;\nexport function getWASMMemory() {\n    if (wasmMemory == null) {\n      wasmMemory = new WebAssembly.Memory({\n        'initial': 1024,  // 64MB\n        'maximum': 16384, // 1024MB\n      });\n    }\n    return wasmMemory;\n}\n\nfunction getWASMModule(module_id:string) {\n  var module = _WASM_module_cache[module_id];\n  if (!module) {\n    starttime();\n    module = new WebAssembly.Module(wasmBlob[module_id]);\n    if (CACHE_WASM_MODULES) {\n      _WASM_module_cache[module_id] = module;\n      delete wasmBlob[module_id];\n    }\n    endtime(\"module creation \" + module_id);\n  }\n  return module;\n}\n// function for use with instantiateWasm\nexport function moduleInstFn(module_id:string) {\n  return function(imports,ri) {\n    var mod = getWASMModule(module_id);\n    var inst = new WebAssembly.Instance(mod, imports);\n    ri(inst);\n    return inst.exports;\n  }\n}\n\n//\n\nvar PLATFORM_PARAMS = {\n  'vcs': {\n    arch: '6502',\n    code_start: 0x1000,\n    code_size: 0xf000,\n    data_start: 0x80,\n    data_size: 0x80,\n    wiz_rom_ext: '.a26',\n    wiz_inc_dir: '2600',\n    extra_link_files: ['atari2600.cfg'],\n    cfgfile: 'atari2600.cfg',\n  },\n  'mw8080bw': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x2000,\n    data_start: 0x2000,\n    data_size: 0x400,\n    stack_end: 0x2400,\n  },\n  'vicdual': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x4020,\n    data_start: 0xe400,\n    data_size: 0x400,\n    stack_end: 0xe800,\n  },\n  'galaxian': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x4000,\n    data_start: 0x4000,\n    data_size: 0x400,\n    stack_end: 0x4800,\n  },\n  'galaxian-scramble': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x5020,\n    data_start: 0x4000,\n    data_size: 0x400,\n    stack_end: 0x4800,\n  },\n  'williams': {\n    arch: '6809',\n    code_start: 0x0,\n    rom_size: 0xc000,\n    data_start: 0x9800,\n    data_size: 0x2800,\n    stack_end: 0xc000,\n    set_stack_end: 0xc000,\n    extra_link_files: ['williams.scr', 'libcmoc-crt-vec.a', 'libcmoc-std-vec.a'],\n    extra_link_args: ['-swilliams.scr', '-lcmoc-crt-vec', '-lcmoc-std-vec'],\n    extra_compile_files: ['assert.h','cmoc.h','stdarg.h','stdlib.h'],\n    //extra_compile_args: ['--vectrex'],\n  },\n  'williams-defender': {\n    arch: '6809',\n    code_start: 0x0,\n    rom_size: 0xc000,\n    data_start: 0x9800,\n    data_size: 0x2800,\n    stack_end: 0xc000,\n  },\n  'williams-z80': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x9800,\n    data_start: 0x9800,\n    data_size: 0x2800,\n    stack_end: 0xc000,\n  },\n  'vector-z80color': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x8000,\n    data_start: 0xe000,\n    data_size: 0x2000,\n    stack_end: 0x0,\n  },\n  'vector-ataricolor': { //TODO\n    arch: '6502',\n    define: ['__VECTOR__'],\n    cfgfile: 'vector-color.cfg',\n    libargs: ['crt0.o', 'none.lib'],\n    extra_link_files: ['crt0.o', 'vector-color.cfg'],\n  },\n  'sound_williams-z80': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x4000,\n    data_start: 0x4000,\n    data_size: 0x400,\n    stack_end: 0x8000,\n  },\n  'base_z80': {\n    arch: 'z80',\n    code_start: 0x0,\n    rom_size: 0x8000,\n    data_start: 0x8000,\n    data_size: 0x8000,\n    stack_end: 0x0,\n  },\n  'coleco': {\n    arch: 'z80',\n    rom_start: 0x8000,\n    code_start: 0x8100,\n    rom_size: 0x8000,\n    data_start: 0x7000,\n    data_size: 0x400,\n    stack_end: 0x8000,\n    extra_preproc_args: ['-I', '/share/include/coleco', '-D', 'CV_CV'],\n    extra_link_args: ['-k', '/share/lib/coleco', '-l', 'libcv', '-l', 'libcvu', 'crt0.rel'],\n  },\n  'msx': {\n    arch: 'z80',\n    rom_start: 0x4000,\n    code_start: 0x4000,\n    rom_size: 0x8000,\n    data_start: 0xc000,\n    data_size: 0x3000,\n    stack_end: 0xffff,\n    extra_link_args: ['crt0-msx.rel'],\n    extra_link_files: ['crt0-msx.rel', 'crt0-msx.lst'],\n    wiz_sys_type: 'z80',\n    wiz_inc_dir: 'msx',\n  },\n  'msx-libcv': {\n    arch: 'z80',\n    rom_start: 0x4000,\n    code_start: 0x4000,\n    rom_size: 0x8000,\n    data_start: 0xc000,\n    data_size: 0x3000,\n    stack_end: 0xffff,\n    extra_preproc_args: ['-I', '.', '-D', 'CV_MSX'],\n    extra_link_args: ['-k', '.', '-l', 'libcv-msx', '-l', 'libcvu-msx', 'crt0-msx.rel'],\n    extra_link_files: ['libcv-msx.lib', 'libcvu-msx.lib', 'crt0-msx.rel', 'crt0-msx.lst'],\n    extra_compile_files: ['cv.h','cv_graphics.h','cv_input.h','cv_sound.h','cv_support.h','cvu.h','cvu_c.h','cvu_compression.h','cvu_f.h','cvu_graphics.h','cvu_input.h','cvu_sound.h'],\n  },\n  'sms-sg1000-libcv': {\n    arch: 'z80',\n    rom_start: 0x0000,\n    code_start: 0x0100,\n    rom_size: 0xc000,\n    data_start: 0xc000,\n    data_size: 0x400,\n    stack_end: 0xe000,\n    extra_preproc_args: ['-I', '.', '-D', 'CV_SMS'],\n    extra_link_args: ['-k', '.', '-l', 'libcv-sms', '-l', 'libcvu-sms', 'crt0-sms.rel'],\n    extra_link_files: ['libcv-sms.lib', 'libcvu-sms.lib', 'crt0-sms.rel', 'crt0-sms.lst'],\n    extra_compile_files: ['cv.h','cv_graphics.h','cv_input.h','cv_sound.h','cv_support.h','cvu.h','cvu_c.h','cvu_compression.h','cvu_f.h','cvu_graphics.h','cvu_input.h','cvu_sound.h'],\n  },\n  'nes': { //TODO\n    arch: '6502',\n    define: ['__NES__'],\n    cfgfile: 'neslib2.cfg',\n    libargs: ['crt0.o', 'nes.lib', 'neslib2.lib',\n      '-D', 'NES_MAPPER=0', // NROM\n      '-D', 'NES_PRG_BANKS=2', // 2 16K PRG banks\n      '-D', 'NES_CHR_BANKS=1', // 1 CHR bank\n      '-D', 'NES_MIRRORING=0', // horizontal mirroring\n      ],\n    extra_link_files: ['crt0.o', 'neslib2.lib', 'neslib2.cfg', 'nesbanked.cfg'],\n    wiz_rom_ext: '.nes',\n  },\n  'apple2': {\n    arch: '6502',\n    define: ['__APPLE2__'],\n    cfgfile: 'apple2.cfg',\n    libargs: [ '--lib-path', '/share/target/apple2/drv', '-D', '__EXEHDR__=0', 'apple2.lib'],\n    __CODE_RUN__: 16384,\n    code_start: 0x803,\n  },\n  'apple2-e': {\n    arch: '6502',\n    define: ['__APPLE2__'],\n    cfgfile: 'apple2.cfg',\n    libargs: ['apple2.lib'],\n  },\n  'atari8-800xl.disk': {\n    arch: '6502',\n    define: ['__ATARI__'],\n    cfgfile: 'atari.cfg',\n    libargs: ['atari.lib'],\n    fastbasic_cfgfile: 'fastbasic-cart.cfg',\n  },\n  'atari8-800xl': {\n    arch: '6502',\n    define: ['__ATARI__'],\n    cfgfile: 'atari-cart.cfg',\n    libargs: ['atari.lib', '-D', '__CARTFLAGS__=4'],\n    fastbasic_cfgfile: 'fastbasic-cart.cfg',\n  },\n  'atari8-5200': {\n    arch: '6502',\n    define: ['__ATARI5200__'],\n    cfgfile: 'atari5200.cfg',\n    libargs: ['atari5200.lib', '-D', '__CARTFLAGS__=255'],\n    fastbasic_cfgfile: 'fastbasic-cart.cfg',\n  },\n  'verilog': {\n    arch: 'verilog',\n    extra_compile_files: ['8bitworkshop.v'],\n  },\n  'astrocade': {\n    arch: 'z80',\n    code_start: 0x2000,\n      rom_size: 0x2000,\n    data_start: 0x4e10,\n     data_size: 0x1f0,\n     stack_end: 0x5000,\n  },\n  'astrocade-arcade': {\n    arch: 'z80',\n    code_start: 0x0000,\n      rom_size: 0x4000,\n    data_start: 0x7de0,\n     data_size: 0x220,\n     stack_end: 0x8000,\n  },\n  'astrocade-bios': {\n    arch: 'z80',\n    code_start: 0x0000,\n      rom_size: 0x2000,\n    data_start: 0x4fce,\n     data_size: 50,\n     stack_end: 0x4fce,\n  },\n  'atari7800': {\n    arch: '6502',\n    define: ['__ATARI7800__'],\n    cfgfile: 'atari7800.cfg',\n    libargs: ['crt0.o', 'none.lib'],\n    extra_link_files: ['crt0.o', 'atari7800.cfg'],\n  },\n  'c64': {\n    arch: '6502',\n    define: ['__CBM__', '__C64__'],\n    cfgfile: 'c64.cfg', // SYS 2061\n    libargs: ['c64.lib'],\n    //extra_link_files: ['c64-cart.cfg'],\n  },\n  'kim1': {\n    arch: '6502',\n  },\n  'vectrex': {\n    arch: '6809',\n    code_start: 0x0,\n    rom_size: 0x8000,\n    data_start: 0xc880,\n    data_size: 0x380,\n    stack_end: 0xcc00,\n    extra_compile_files: ['assert.h','cmoc.h','stdarg.h','vectrex.h','stdlib.h','bios.h'],\n    extra_link_files: ['vectrex.scr', 'libcmoc-crt-vec.a', 'libcmoc-std-vec.a'],\n    extra_compile_args: ['--vectrex'],\n    extra_link_args: ['-svectrex.scr', '-lcmoc-crt-vec', '-lcmoc-std-vec'],\n  },\n  'x86': {    \n    arch: 'x86',\n  },\n  'zx': {\n    arch: 'z80',\n    code_start: 0x5ccb,\n    rom_size: 0xff58-0x5ccb,\n    data_start: 0xf000,\n    data_size: 0xfe00-0xf000,\n    stack_end: 0xff58,\n    extra_link_args: ['crt0-zx.rel'],\n    extra_link_files: ['crt0-zx.rel', 'crt0-zx.lst'],\n  },\n  'devel-6502': {\n    arch: '6502',\n    cfgfile: 'devel-6502.cfg',\n    libargs: ['crt0.o', 'none.lib'],\n    extra_link_files: ['crt0.o', 'devel-6502.cfg'],\n  },\n  // https://github.com/cpcitor/cpc-dev-tool-chain\n  'cpc.rslib': {\n    arch: 'z80',\n    code_start: 0x4000,\n    rom_size: 0xb100-0x4000,\n    data_start: 0xb100,\n    data_size: 0xb100-0xc000,\n    stack_end: 0xc000,\n    extra_compile_files: ['cpcrslib.h'],\n    extra_link_args: ['crt0-cpc.rel', 'cpcrslib.lib'],\n    extra_link_files: ['crt0-cpc.rel', 'crt0-cpc.lst', 'cpcrslib.lib', 'cpcrslib.lst'],\n  },\n  // https://lronaldo.github.io/cpctelera/ (TODO)\n  'cpc': {\n    arch: 'z80',\n    code_start: 0x4000,\n    rom_size: 0xb100-0x4000,\n    data_start: 0xb100,\n    data_size: 0xb100-0xc000,\n    stack_end: 0xc000,\n    extra_compile_files: ['cpctelera.h'],\n    extra_link_args: ['crt0-cpc.rel', 'cpctelera.lib'],\n    extra_link_files: ['crt0-cpc.rel', 'crt0-cpc.lst', 'cpctelera.lib', 'cpctelera.lst'],\n  },\n};\n\nPLATFORM_PARAMS['sms-sms-libcv'] = PLATFORM_PARAMS['sms-sg1000-libcv'];\n\nvar _t1;\nexport function starttime() { _t1 = new Date(); }\nexport function endtime(msg) { var _t2 = new Date(); console.log(msg, _t2.getTime() - _t1.getTime(), \"ms\"); }\n\n/// working file store and build steps\n\ntype FileData = string | Uint8Array;\n\ntype FileEntry = {\n  path: string\n  encoding: string\n  data: FileData\n  ts: number\n};\n\ntype BuildOptions = {\n  mainFilePath : string,\n  processFn?: (s:string, d:FileData) => FileData\n};\n\n// TODO\nexport type BuildStepResult = WorkerResult | WorkerNextToolResult;\n\nexport interface WorkerNextToolResult {\n  nexttool?: string\n  linktool?: string\n  path?: string\n  args: string[]\n  files: string[]\n  bblines?: boolean\n}\n\nexport interface BuildStep extends WorkerBuildStep {\n  files? : string[]\n  args? : string[]\n  nextstep? : BuildStep\n  linkstep? : BuildStep\n  params?\n  result? : BuildStepResult\n  code?\n  prefix?\n  maxts?\n};\n\n///\n\nexport class FileWorkingStore implements WorkingStore {\n  workfs : {[path:string]:FileEntry} = {};\n  workerseq : number = 0;\n  items : {};\n\n  constructor() {\n    this.reset();\n  }\n  reset() {\n    this.workfs = {};\n    this.newVersion();\n  }\n  currentVersion() {\n    return this.workerseq;\n  }\n  newVersion() {\n    let ts = new Date().getTime();\n    if (ts <= this.workerseq)\n      ts = ++this.workerseq;\n    return ts;\n  }\n  putFile(path:string, data:FileData) : FileEntry {\n    var encoding = (typeof data === 'string') ? 'utf8' : 'binary';\n    var entry = this.workfs[path];\n    if (!entry || !compareData(entry.data, data) || entry.encoding != encoding) {\n      this.workfs[path] = entry = {path:path, data:data, encoding:encoding, ts:this.newVersion()};\n      console.log('+++', entry.path, entry.encoding, entry.data.length, entry.ts);\n    }\n    return entry;\n  }\n  hasFile(path: string) {\n    return this.workfs[path] != null;\n  }\n  getFileData(path:string) : FileData {\n    return this.workfs[path] && this.workfs[path].data;\n  }  \n  getFileAsString(path:string) : string {\n    let data = this.getFileData(path);\n    if (data != null && typeof data !== 'string')\n      throw new Error(`${path}: expected string`)\n    return data as string; // TODO\n  }\n  getFileEntry(path:string) : FileEntry {\n    return this.workfs[path];\n  }\n  setItem(key: string, value: object) {\n    this.items[key] = value;\n  }\n}\n\nexport var store = new FileWorkingStore();\n\n///\n\nfunction errorResult(msg: string) : WorkerErrorResult {\n  return { errors:[{ line:0, msg:msg }]};\n}\n\nclass Builder {\n  steps : BuildStep[] = [];\n  startseq : number = 0;\n\n  // returns true if file changed during this build step\n  wasChanged(entry:FileEntry) : boolean {\n    return entry.ts > this.startseq;\n  }\n  async executeBuildSteps() : Promise<WorkerResult> {\n    this.startseq = store.currentVersion();\n    var linkstep : BuildStep = null;\n    while (this.steps.length) {\n      var step = this.steps.shift(); // get top of array\n      var platform = step.platform;\n      var toolfn = TOOLS[step.tool];\n      if (!toolfn) throw Error(\"no tool named \" + step.tool);\n      step.params = PLATFORM_PARAMS[getBasePlatform(platform)];\n      try {\n        step.result = await toolfn(step);\n      } catch (e) {\n        console.log(\"EXCEPTION\", e, e.stack);\n        return errorResult(e+\"\"); // TODO: catch errors already generated?\n      }\n      if (step.result) {\n        (step.result as any).params = step.params; // TODO: type check\n        // errors? return them\n        if ('errors' in step.result && step.result.errors.length) {\n          applyDefaultErrorPath(step.result.errors, step.path);\n          return step.result;\n        }\n        // if we got some output, return it immediately\n        if ('output' in step.result && step.result.output) {\n          return step.result;\n        }\n        // combine files with a link tool?\n        if ('linktool' in step.result) {\n          if (linkstep) {\n            linkstep.files = linkstep.files.concat(step.result.files);\n            linkstep.args = linkstep.args.concat(step.result.args);\n          } else {\n            linkstep = {\n              tool:step.result.linktool,\n              platform:platform,\n              files:step.result.files,\n              args:step.result.args\n            };\n          }\n        }\n        // process with another tool?\n        if ('nexttool' in step.result) {\n          var asmstep : BuildStep = {\n            tool: step.result.nexttool,\n            platform: platform,\n            ...step.result\n          }\n          this.steps.push(asmstep);\n        }\n        // process final step?\n        if (this.steps.length == 0 && linkstep) {\n          this.steps.push(linkstep);\n          linkstep = null;\n        }\n      }\n    }\n  }\n  async handleMessage(data: WorkerMessage) : Promise<WorkerResult> {\n    this.steps = [];\n    // file updates\n    if (data.updates) {\n      data.updates.forEach((u) => store.putFile(u.path, u.data));\n    }\n    // object update\n    if (data.setitems) {\n      data.setitems.forEach((i) => store.setItem(i.key, i.value));\n    }\n    // build steps\n    if (data.buildsteps) {\n      this.steps.push.apply(this.steps, data.buildsteps);\n    }\n    // single-file\n    if (data.code) {\n      this.steps.push(data as BuildStep); // TODO: remove cast\n    }\n    // execute build steps\n    if (this.steps.length) {\n      var result = await this.executeBuildSteps();\n      return result ? result : {unchanged:true};\n    }\n    // TODO: cache results\n    // message not recognized\n    console.log(\"Unknown message\",data);\n  }\n}\n\nvar builder = new Builder();\n\n///\n\nfunction applyDefaultErrorPath(errors:WorkerError[], path:string) {\n  if (!path) return;\n  for (var i=0; i<errors.length; i++) {\n    var err = errors[i];\n    if (!err.path && err.line) err.path = path;\n  }\n}\n\nfunction compareData(a:FileData, b:FileData) : boolean {\n  if (a.length != b.length) return false;\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a == b;\n  } else {\n    for (var i=0; i<a.length; i++) {\n      //if (a[i] != b[i]) console.log('differ at byte',i,a[i],b[i]);\n      if (a[i] != b[i]) return false;\n    }\n    return true;\n  }\n}\n\nexport function putWorkFile(path:string, data:FileData) {\n  return store.putFile(path, data);\n}\n\nexport function getWorkFileAsString(path:string) : string {\n  return store.getFileAsString(path);\n}\n\nexport function populateEntry(fs, path:string, entry:FileEntry, options:BuildOptions) {\n  var data = entry.data;\n  if (options && options.processFn) {\n    data = options.processFn(path, data);\n  }\n  // create subfolders\n  var toks = path.split('/');\n  if (toks.length > 1) {\n    for (var i=0; i<toks.length-1; i++)\n      try {\n        fs.mkdir(toks[i]);\n      } catch (e) { }\n  }\n  // write file\n  fs.writeFile(path, data, {encoding:entry.encoding});\n  var time = new Date(entry.ts);\n  fs.utime(path, time, time);\n  console.log(\"<<<\", path, entry.data.length);\n}\n\n// can call multiple times (from populateFiles)\nexport function gatherFiles(step:BuildStep, options?:BuildOptions) : number {\n  var maxts = 0;\n  if (step.files) {\n    for (var i=0; i<step.files.length; i++) {\n      var path = step.files[i];\n      var entry = store.workfs[path];\n      if (!entry) {\n        throw new Error(\"No entry for path '\" + path + \"'\");\n      } else {\n        maxts = Math.max(maxts, entry.ts);\n      }\n    }\n  }\n  else if (step.code) {\n    var path = step.path ? step.path : options.mainFilePath; // TODO: what if options null\n    if (!path) throw Error(\"need path or mainFilePath\");\n    var code = step.code;\n    var entry = putWorkFile(path, code);\n    step.path = path;\n    step.files = [path];\n    maxts = entry.ts;\n  }\n  else if (step.path) {\n    var path = step.path;\n    var entry = store.workfs[path];\n    maxts = entry.ts;\n    step.files = [path];\n  }\n  if (step.path && !step.prefix) {\n    step.prefix = getPrefix(step.path);\n  }\n  step.maxts = maxts;\n  return maxts;\n}\n\nexport function getPrefix(s : string) : string {\n  var pos = s.lastIndexOf('.');\n  return (pos > 0) ? s.substring(0, pos) : s;\n}\n\nexport function populateFiles(step:BuildStep, fs, options?:BuildOptions) {\n  gatherFiles(step, options);\n  if (!step.files) throw Error(\"call gatherFiles() first\");\n  for (var i=0; i<step.files.length; i++) {\n    var path = step.files[i];\n    populateEntry(fs, path, store.workfs[path], options);\n  }\n}\n\nexport function populateExtraFiles(step:BuildStep, fs, extrafiles) {\n  if (extrafiles) {\n    for (var i=0; i<extrafiles.length; i++) {\n      var xfn = extrafiles[i];\n      // is this file cached?\n      if (store.workfs[xfn]) {\n        fs.writeFile(xfn, store.workfs[xfn].data, {encoding:'binary'});\n        continue;\n      }\n      // fetch from network\n      var xpath = \"lib/\" + getBasePlatform(step.platform) + \"/\" + xfn;\n      var xhr = new XMLHttpRequest();\n      xhr.responseType = 'arraybuffer';\n      xhr.open(\"GET\", PWORKER+xpath, false);  // synchronous request\n      xhr.send(null);\n      if (xhr.response && xhr.status == 200) {\n        var data = new Uint8Array(xhr.response);\n        fs.writeFile(xfn, data, {encoding:'binary'});\n        putWorkFile(xfn, data);\n        console.log(\":::\",xfn,data.length);\n      } else {\n        throw Error(\"Could not load extra file \" + xpath);\n      }\n    }\n  }\n}\n\nexport function staleFiles(step:BuildStep, targets:string[]) {\n  if (!step.maxts) throw Error(\"call populateFiles() first\");\n  // see if any target files are more recent than inputs\n  for (var i=0; i<targets.length; i++) {\n    var entry = store.workfs[targets[i]];\n    if (!entry || step.maxts > entry.ts)\n      return true;\n  }\n  console.log(\"unchanged\", step.maxts, targets);\n  return false;\n}\n\nexport function anyTargetChanged(step:BuildStep, targets:string[]) {\n  if (!step.maxts) throw Error(\"call populateFiles() first\");\n  // see if any target files are more recent than inputs\n  for (var i=0; i<targets.length; i++) {\n    var entry = store.workfs[targets[i]];\n    if (!entry || entry.ts > step.maxts)\n      return true;\n  }\n  console.log(\"unchanged\", step.maxts, targets);\n  return false;\n}\n\nexport function execMain(step:BuildStep, mod, args:string[]) {\n  starttime();\n  var run = mod.callMain || mod.run; // TODO: run?\n  run(args);\n  endtime(step.tool);\n}\n\n/// asm.js / WASM / filesystem loading\n\nvar fsMeta = {};\nvar fsBlob = {};\nvar wasmBlob = {};\n\nconst PSRC = \"../../src/\";\nconst PWORKER = PSRC+\"worker/\";\n\n// load filesystems for CC65 and others asynchronously\nfunction loadFilesystem(name:string) {\n  var xhr = new XMLHttpRequest();\n  xhr.responseType = 'blob';\n  xhr.open(\"GET\", PWORKER+\"fs/fs\"+name+\".data\", false);  // synchronous request\n  xhr.send(null);\n  fsBlob[name] = xhr.response;\n  xhr = new XMLHttpRequest();\n  xhr.responseType = 'json';\n  xhr.open(\"GET\", PWORKER+\"fs/fs\"+name+\".js.metadata\", false);  // synchronous request\n  xhr.send(null);\n  fsMeta[name] = xhr.response;\n  console.log(\"Loaded \"+name+\" filesystem\", fsMeta[name].files.length, 'files', fsBlob[name].size, 'bytes');\n}\n\nvar loaded = {};\nexport function load(modulename:string, debug?:boolean) {\n  if (!loaded[modulename]) {\n    importScripts(PWORKER+'asmjs/'+modulename+(debug?\".\"+debug+\".js\":\".js\"));\n    loaded[modulename] = 1;\n  }\n}\nexport function loadWASM(modulename:string, debug?:boolean) {\n  if (!loaded[modulename]) {\n    importScripts(PWORKER+\"wasm/\" + modulename+(debug?\".\"+debug+\".js\":\".js\"));\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'arraybuffer';\n    xhr.open(\"GET\", PWORKER+\"wasm/\"+modulename+\".wasm\", false);  // synchronous request\n    xhr.send(null);\n    if (xhr.response) {\n      wasmBlob[modulename] = new Uint8Array(xhr.response);\n      console.log(\"Loaded \" + modulename + \".wasm (\" + wasmBlob[modulename].length + \" bytes)\");\n      loaded[modulename] = 1;\n    } else {\n      throw Error(\"Could not load WASM file \" + modulename + \".wasm\");\n    }\n  }\n}\nexport function loadNative(modulename:string) {\n  // detect WASM\n  if (CACHE_WASM_MODULES && typeof WebAssembly === 'object') {\n    loadWASM(modulename);\n  } else {\n    load(modulename);\n  }\n}\n\n// mount the filesystem at /share\nexport function setupFS(FS, name:string) {\n  var WORKERFS = FS.filesystems['WORKERFS'];\n  if (name === '65-vector') name = '65-none'; // TODO\n  if (name === '65-atari7800') name = '65-none'; // TODO\n  if (name === '65-devel') name = '65-none'; // TODO\n  if (name === '65-vcs') name = '65-none'; // TODO\n  if (!fsMeta[name]) throw Error(\"No filesystem for '\" + name + \"'\");\n  FS.mkdir('/share');\n  FS.mount(WORKERFS, {\n    packages: [{ metadata: fsMeta[name], blob: fsBlob[name] }]\n  }, '/share');\n  // fix for slow Blob operations by caching typed arrays\n  // https://github.com/kripken/emscripten/blob/incoming/src/library_workerfs.js\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=349304#c30\n  var reader = WORKERFS.reader;\n  var blobcache = {};\n  WORKERFS.stream_ops.read = function (stream, buffer, offset, length, position) {\n    if (position >= stream.node.size) return 0;\n    var contents = blobcache[stream.path];\n    if (!contents) {\n      var ab = reader.readAsArrayBuffer(stream.node.contents);\n      contents = blobcache[stream.path] = new Uint8Array(ab);\n    }\n    if (position + length > contents.length)\n      length = contents.length - position;\n    for (var i=0; i<length; i++) {\n      buffer[offset+i] = contents[position+i];\n    }\n    return length;\n  };\n}\n\nexport var print_fn = function(s:string) {\n  console.log(s);\n  //console.log(new Error().stack);\n}\n\n// test.c(6) : warning 85: in function main unreferenced local variable : 'x'\n// main.a (4): error: Unknown Mnemonic 'xxx'.\n// at 2: warning 190: ISO C forbids an empty source file\nexport const re_msvc  = /[/]*([^( ]+)\\s*[(](\\d+)[)]\\s*:\\s*(.+?):\\s*(.*)/;\nexport const re_msvc2 = /\\s*(at)\\s+(\\d+)\\s*(:)\\s*(.*)/;\n\nexport function msvcErrorMatcher(errors:WorkerError[]) {\n  return function(s:string) {\n    var matches = re_msvc.exec(s) || re_msvc2.exec(s);\n    if (matches) {\n      var errline = parseInt(matches[2]);\n      errors.push({\n        line:errline,\n        path:matches[1],\n        //type:matches[3],\n        msg:matches[4]\n      });\n    } else {\n      console.log(s);\n    }\n  }\n}\n\nexport function makeErrorMatcher(errors:WorkerError[], regex, iline:number, imsg:number, mainpath:string, ifilename?:number) {\n  return function(s) {\n    var matches = regex.exec(s);\n    if (matches) {\n      errors.push({\n        line:parseInt(matches[iline]) || 1,\n        msg:matches[imsg],\n        path:ifilename ? matches[ifilename] : mainpath\n      });\n    } else {\n      console.log(\"??? \"+s);\n    }\n  }\n}\n\nexport function extractErrors(regex, strings:string[], path:string, iline, imsg, ifilename) {\n  var errors = [];\n  var matcher = makeErrorMatcher(errors, regex, iline, imsg, path, ifilename);\n  for (var i=0; i<strings.length; i++) {\n    matcher(strings[i]);\n  }\n  return errors;\n}\n\nexport const re_crlf = /\\r?\\n/;\n//    1   %line 16+1 hello.asm\nexport const re_lineoffset = /\\s*(\\d+)\\s+[%]line\\s+(\\d+)\\+(\\d+)\\s+(.+)/;\n\nexport function parseListing(code:string,\n  lineMatch, iline:number, ioffset:number, iinsns:number, icycles?:number,\n  funcMatch?, segMatch?) : SourceLine[] {\n  var lines : SourceLine[] = [];\n  var lineofs = 0;\n  var segment = '';\n  var func = '';\n  var funcbase = 0;\n  code.split(re_crlf).forEach((line, lineindex) => {\n    let segm = segMatch && segMatch.exec(line);\n    if (segm) { segment = segm[1]; }\n    let funcm = funcMatch && funcMatch.exec(line);\n    if (funcm) { funcbase = parseInt(funcm[1],16); func = funcm[2]; }\n\n    var linem = lineMatch.exec(line);\n    if (linem && linem[1]) {\n      var linenum = iline < 0 ? lineindex : parseInt(linem[iline]);\n      var offset = parseInt(linem[ioffset], 16);\n      var insns = linem[iinsns];\n      var cycles : number = icycles ? parseInt(linem[icycles]) : null;\n      var iscode = cycles > 0;\n      if (insns) {\n        lines.push({\n          line: linenum + lineofs,\n          offset: offset - funcbase,\n          insns,\n          cycles,\n          iscode,\n          segment,\n          func\n        });\n      }\n    } else {\n      let m = re_lineoffset.exec(line);\n      // TODO: check filename too\n      if (m) {\n        lineofs = parseInt(m[2]) - parseInt(m[1]) - parseInt(m[3]);\n      }\n    }\n  });\n  return lines;\n}\n\nexport function parseSourceLines(code:string, lineMatch, offsetMatch, funcMatch?, segMatch?) {\n  var lines = [];\n  var lastlinenum = 0;\n  var segment = '';\n  var func = '';\n  var funcbase = 0;\n  for (var line of code.split(re_crlf)) {\n    let segm = segMatch && segMatch.exec(line);\n    if (segm) { segment = segm[1]; }\n    let funcm = funcMatch && funcMatch.exec(line);\n    if (funcm) { funcbase = parseInt(funcm[1],16); func = funcm[2]; }\n    \n    var linem = lineMatch.exec(line);\n    if (linem && linem[1]) {\n      lastlinenum = parseInt(linem[1]);\n    } else if (lastlinenum) {\n      var linem = offsetMatch.exec(line);\n      if (linem && linem[1]) {\n        var offset = parseInt(linem[1], 16);\n        lines.push({\n          line: lastlinenum,\n          offset: offset - funcbase,\n          segment,\n          func\n        });\n        lastlinenum = 0;\n      }\n    }\n  }\n  return lines;\n}\n\nexport function setupStdin(fs, code:string) {\n  var i = 0;\n  fs.init(\n    function() { return i<code.length ? code.charCodeAt(i++) : null; }\n  );\n}\n\nexport function fixParamsWithDefines(path:string, params){\n  var libargs = params.libargs;\n  if (path && libargs) {\n    var code = getWorkFileAsString(path);\n    if (code) {\n      var oldcfgfile = params.cfgfile;\n      var ident2index = {};\n      // find all lib args \"IDENT=VALUE\"\n      for (var i=0; i<libargs.length; i++) {\n        var toks = libargs[i].split('=');\n        if (toks.length == 2) {\n          ident2index[toks[0]] = i;\n        }\n      }\n      // find #defines and replace them\n      var re = /^[;]?#define\\s+(\\w+)\\s+(\\S+)/gmi; // TODO: empty string?\n      var m;\n      while (m = re.exec(code)) {\n        var ident = m[1];\n        var value = m[2];\n        var index = ident2index[ident];\n        if (index >= 0) {\n          libargs[index] = ident + \"=\" + value;\n          console.log('Using libargs', index, libargs[index]);\n          // TODO: MMC3 mapper switch\n          if (ident == 'NES_MAPPER' && value == '4') {\n            params.cfgfile = 'nesbanked.cfg';\n            console.log(\"using config file\", params.cfgfile);\n          }\n        } else if (ident == 'CFGFILE' && value) {\n          params.cfgfile = value;\n        } else if (ident == 'LIBARGS' && value) {\n          params.libargs = value.split(',').filter((s) => { return s!=''; });\n          console.log('Using libargs', params.libargs);\n        } else if (ident == 'CC65_FLAGS' && value) {\n          params.extra_compiler_args = value.split(',').filter((s) => { return s!=''; });\n          console.log('Using compiler flags', params.extra_compiler_args);\n        }\n      }\n    }\n  }\n}\n\n\nfunction makeCPPSafe(s:string) : string {\n  return s.replace(/[^A-Za-z0-9_]/g,'_');\n}\n\nexport function preprocessMCPP(step:BuildStep, filesys:string) {\n  load(\"mcpp\");\n  var platform = step.platform;\n  var params = PLATFORM_PARAMS[getBasePlatform(platform)];\n  if (!params) throw Error(\"Platform not supported: \" + platform);\n  // <stdin>:2: error: Can't open include file \"foo.h\"\n  var errors = [];\n  var match_fn = makeErrorMatcher(errors, /<stdin>:(\\d+): (.+)/, 1, 2, step.path);\n  var MCPP : EmscriptenModule = emglobal.mcpp({\n    noInitialRun:true,\n    noFSInit:true,\n    print:print_fn,\n    printErr:match_fn,\n  });\n  var FS = MCPP.FS;\n  if (filesys) setupFS(FS, filesys);\n  populateFiles(step, FS);\n  populateExtraFiles(step, FS, params.extra_compile_files);\n  // TODO: make configurable by other compilers\n  var args = [\n    \"-D\", \"__8BITWORKSHOP__\",\n    \"-D\", \"__SDCC_z80\",\n    \"-D\", makeCPPSafe(platform.toUpperCase()),\n    \"-I\", \"/share/include\",\n    \"-Q\",\n    step.path, \"main.i\"];\n  if (step.mainfile) {\n    args.unshift.apply(args, [\"-D\", \"__MAIN__\"]);\n  }\n  if (params.extra_preproc_args) {\n    args.push.apply(args, params.extra_preproc_args);\n  }\n  execMain(step, MCPP, args);\n  if (errors.length)\n    return {errors:errors};\n  var iout = FS.readFile(\"main.i\", {encoding:'utf8'});\n  iout = iout.replace(/^#line /gm,'\\n# ');\n  try {\n    var errout = FS.readFile(\"mcpp.err\", {encoding:'utf8'});\n    if (errout.length) {\n      // //main.c:2: error: Can't open include file \"stdiosd.h\"\n      var errors = extractErrors(/([^:]+):(\\d+): (.+)/, errout.split(\"\\n\"), step.path, 2, 3, 1);\n      if (errors.length == 0) {\n        errors = errorResult(errout).errors;\n      }\n      return {errors: errors};\n    }\n  } catch (e) {\n    //\n  }\n  return {code:iout};\n}\n\nexport function setupRequireFunction() {\n  var exports = {};\n  exports['jsdom'] = {\n    JSDOM: function(a,b) {\n      this.window = {};\n    }\n  };\n  emglobal['require'] = (modname:string) => {\n    console.log('require',modname,exports[modname]!=null);\n    return exports[modname];\n  }\n}\n\n////////////////////////////\n\nimport * as misc from './tools/misc'\nimport * as cc65 from './tools/cc65'\nimport * as dasm from './tools/dasm'\nimport * as sdcc from './tools/sdcc'\nimport * as verilog from './tools/verilog'\nimport * as m6809 from './tools/m6809'\nimport * as m6502 from './tools/m6502'\nimport * as z80 from './tools/z80'\nimport * as x86 from './tools/x86'\nimport * as arm from './tools/arm'\nimport * as script from './tools/script'\n\nvar TOOLS = {\n  'dasm': dasm.assembleDASM,\n  //'acme': assembleACME,\n  //'plasm': compilePLASMA,\n  'cc65': cc65.compileCC65,\n  'ca65': cc65.assembleCA65,\n  'ld65': cc65.linkLD65,\n  //'z80asm': assembleZ80ASM,\n  //'sccz80': compileSCCZ80,\n  'sdasz80': sdcc.assembleSDASZ80,\n  'sdldz80': sdcc.linkSDLDZ80,\n  'sdcc': sdcc.compileSDCC,\n  'xasm6809': m6809.assembleXASM6809,\n  'cmoc': m6809.compileCMOC,\n  'lwasm': m6809.assembleLWASM,\n  'lwlink': m6809.linkLWLINK,\n  //'naken': assembleNAKEN,\n  'verilator': verilog.compileVerilator,\n  'yosys': verilog.compileYosys,\n  'jsasm': verilog.compileJSASMStep,\n  'zmac': z80.assembleZMAC,\n  'nesasm': m6502.assembleNESASM,\n  'smlrc': x86.compileSmallerC,\n  'yasm': x86.assembleYASM,\n  'bataribasic': dasm.compileBatariBasic,\n  'markdown': misc.translateShowdown,\n  'inform6': misc.compileInform6,\n  'merlin32': m6502.assembleMerlin32,\n  'fastbasic': m6502.compileFastBasic,\n  'basic': misc.compileBASIC,\n  'silice': verilog.compileSilice,\n  'wiz': misc.compileWiz,\n  'armips': arm.assembleARMIPS,\n  'vasmarm': arm.assembleVASMARM,\n  'js': script.runJavascript,\n}\n\nvar TOOL_PRELOADFS = {\n  'cc65-apple2': '65-apple2',\n  'ca65-apple2': '65-apple2',\n  'cc65-c64': '65-c64',\n  'ca65-c64': '65-c64',\n  'cc65-nes': '65-nes',\n  'ca65-nes': '65-nes',\n  'cc65-atari8': '65-atari8',\n  'ca65-atari8': '65-atari8',\n  'cc65-vector': '65-none',\n  'ca65-vector': '65-none',\n  'cc65-atari7800': '65-none',\n  'ca65-atari7800': '65-none',\n  'cc65-devel': '65-none',\n  'ca65-devel': '65-none',\n  'ca65-vcs': '65-none',\n  'sdasz80': 'sdcc',\n  'sdcc': 'sdcc',\n  'sccz80': 'sccz80',\n  'bataribasic': '2600basic',\n  'inform6': 'inform',\n  'fastbasic': '65-atari8',\n  'silice': 'Silice',\n  'wiz': 'wiz',\n}\n\n//const waitFor = delay => new Promise(resolve => setTimeout(resolve, delay)); // for testing\n\nasync function handleMessage(data : WorkerMessage) : Promise<WorkerResult> {\n  // preload file system\n  if (data.preload) {\n    var fs = TOOL_PRELOADFS[data.preload];\n    if (!fs && data.platform)\n      fs = TOOL_PRELOADFS[data.preload+'-'+getBasePlatform(data.platform)];\n    if (!fs && data.platform)\n      fs = TOOL_PRELOADFS[data.preload+'-'+getRootBasePlatform(data.platform)];\n    if (fs && !fsMeta[fs])\n      loadFilesystem(fs);\n    return;\n  }\n  // clear filesystem? (TODO: buildkey)\n  if (data.reset) {\n    store.reset();\n    return;\n  }\n  return builder.handleMessage(data);\n}\n\nif (ENVIRONMENT_IS_WORKER) {\n  var lastpromise = null;\n  onmessage = async function(e) {\n    await lastpromise; // wait for previous message to complete\n    lastpromise = handleMessage(e.data);\n    var result = await lastpromise;\n    lastpromise = null;\n    if (result) {\n      try {\n        postMessage(result);\n      } catch (e) {\n        console.log(e);\n        postMessage(errorResult(`${e}`));\n      }\n    }\n  }\n}\n"],
  "mappings": "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MAAI,6BAA6B,CAAC,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,MAAK,KAAI,MAAK;AAGh6C,MAAI,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE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",
  "names": []
}
