{
  "version": 3,
  "sources": ["../src/machine/c64.ts", "../src/platform/c64.ts"],
  "sourcesContent": ["\nimport { MOS6502, MOS6502State } from \"../common/cpu/MOS6502\";\nimport { BasicMachine, RasterFrameBased, Bus, ProbeAll, Probeable, NullProbe } from \"../common/devices\";\nimport { KeyFlags, newAddressDecoder, padBytes, Keys, makeKeycodeMap, newKeyboardHandler, EmuHalt, dumpRAM } from \"../common/emu\";\nimport { lzgmini, stringToByteArray, hex, rgb2bgr } from \"../common/util\";\n\n// https://www.c64-wiki.com/wiki/C64\n// http://www.zimmers.net/cbmpics/cbm/c64/vic-ii.txt\n// http://www.zimmers.net/cbmpics/cbm/c64/c64prg.txt\n// http://sta.c64.org/cbm64mem.html\n// http://hitmen.c02.at/temp/palstuff/\n\n//// WASM Machine\n\nimport { Machine } from \"../common/baseplatform\";\nimport { TrapCondition } from \"../common/devices\";\nimport { BaseWASMMachine } from \"../common/wasmplatform\";\n\nexport class C64_WASMMachine extends BaseWASMMachine implements Machine, Probeable {\n\n  numTotalScanlines = 312;\n  cpuCyclesPerLine = 63;\n\n  prgstart : number;\n  joymask0 = 0;\n  joymask1 = 0;\n\n  loadBIOS(srcArray: Uint8Array) {\n    var patch1ofs = 0xea24 - 0xe000 + 0x3000;\n    /*if (srcArray[patch1ofs] == 0x02)*/ srcArray[patch1ofs] = 0x60; // cursor move, KIL -> RTS\n    super.loadBIOS(srcArray);\n  }\n  reset() {\n    super.reset();\n    // clear keyboard\n    for (var ch=0; ch<128; ch++) {\n      this.setKeyInput(ch, 0, KeyFlags.KeyUp);\n    }\n    // load rom\n    if (this.romptr && this.romlen) {\n      this.exports.machine_load_rom(this.sys, this.romptr, this.romlen);\n      this.prgstart = this.romarr[0] + (this.romarr[1]<<8); // get load address\n      // look for BASIC program start\n      if (this.prgstart == 0x801) {\n        this.prgstart = this.romarr[2] + (this.romarr[3]<<8) + 2; // point to after BASIC program\n        console.log(\"prgstart\", hex(this.prgstart));\n      }\n      // is program loaded into RAM?\n      if (this.prgstart < 0x8000) {\n        // advance BIOS a few frames\n        this.exports.machine_exec(this.sys, 250000);\n        // type in command (SYS 2061)\n        var cmd = \"SYS \"+this.prgstart+\"\\r\";\n        for (var i=0; i<cmd.length; i++) {\n          var key = cmd.charCodeAt(i);\n          this.exports.machine_exec(this.sys, 20000);\n          this.exports.machine_key_down(this.sys, key);\n          this.exports.machine_exec(this.sys, 20000);\n          this.exports.machine_key_up(this.sys, key);\n        }\n        // advance clock until program starts\n        for (var i=0; i<100000 && this.getPC() != this.prgstart; i++) {\n          this.exports.machine_tick(this.sys);\n        }\n      } else {\n        // get out of reset\n        this.exports.machine_exec(this.sys, 100);\n        // wait until cartridge start\n        // TODO: detect ROM cartridge\n        var warmstart = this.romarr[0x4] + this.romarr[0x5]*256;\n        for (var i=0; i<150000 && this.getPC() != warmstart; i++) {\n          this.exports.machine_tick(this.sys);\n        }\n      }\n      // TODO: shouldn't we return here @ start of frame?\n      // and stop probing\n    }\n  }\n  advanceFrame(trap: TrapCondition) : number {\n    // TODO: does this sync with VSYNC?\n    var scanline = this.exports.machine_get_raster_line(this.sys);\n    var clocks = Math.floor((this.numTotalScanlines - scanline) * (19656+295) / this.numTotalScanlines);\n    var probing = this.probe != null;\n    if (probing) this.exports.machine_reset_probe_buffer();\n    clocks = super.advanceFrameClock(trap, clocks);\n    if (probing) this.copyProbeData();\n    return clocks;\n  }\n  getCPUState() {\n    this.exports.machine_save_cpu_state(this.sys, this.cpustateptr);\n    var s = this.cpustatearr;\n    var pc = s[2] + (s[3]<<8);\n    return {\n      PC:pc,\n      SP:s[9],\n      A:s[6],\n      X:s[7],\n      Y:s[8],\n      C:s[10] & 1,\n      Z:s[10] & 2,\n      I:s[10] & 4,\n      D:s[10] & 8,\n      V:s[10] & 64,\n      N:s[10] & 128,\n      o:this.readConst(pc),\n    }\n  }\n  saveState() {\n    this.exports.machine_save_state(this.sys, this.stateptr);\n    /*\n    for (var i=0; i<this.statearr.length; i++)\n      if (this.statearr[i] == 0xa0 && this.statearr[i+1] == 0x4d && this.statearr[i+2] == 0xe2) console.log(hex(i));\n    */\n    return {\n      c:this.getCPUState(),\n      state:this.statearr.slice(0),\n      ram:this.statearr.slice(18640, 18640+0x200), // ZP and stack\n    };\n  }\n  loadState(state) : void {\n    this.statearr.set(state.state);\n    this.exports.machine_load_state(this.sys, this.stateptr);\n  }\n  getVideoParams() {\n   return {width:392, height:272, overscan:true, videoFrequency:50};\n  }\n  setKeyInput(key: number, code: number, flags: number): void {\n    // TODO: handle shifted keys\n    if (key == 16 || key == 17 || key == 18 || key == 224) return; // meta keys\n    //console.log(key, code, flags);\n    //if (flags & KeyFlags.Shift) { key += 64; }\n    // convert to c64\n    var mask = 0;\n    var mask2 = 0;\n    if (key == 37) { key = 0x8; mask = 0x4; } // LEFT\n    if (key == 38) { key = 0xb; mask = 0x1; } // UP\n    if (key == 39) { key = 0x9; mask = 0x8; } // RIGHT\n    if (key == 40) { key = 0xa; mask = 0x2; } // DOWN\n    if (key == 32) { mask = 0x10; } // FIRE\n    /* player 2 (TODO)\n    if (key == 65) { key = 65; mask2 = 0x4; } // LEFT\n    if (key == 87) { key = 87; mask2 = 0x1; } // UP\n    if (key == 68) { key = 68; mask2 = 0x8; } // RIGHT\n    if (key == 83) { key = 83; mask2 = 0x2; } // DOWN\n    if (key == 69) { mask2 = 0x10; } // FIRE\n    */\n    if (key == 113) { key = 0xf1; } // F2\n    if (key == 115) { key = 0xf3; } // F4\n    if (key == 119) { key = 0xf5; } // F8\n    if (key == 121) { key = 0xf7; } // F10\n    if (flags & KeyFlags.KeyDown) {\n      this.exports.machine_key_down(this.sys, key);\n      this.joymask0 |= mask;\n      this.joymask1 |= mask2;\n    } else if (flags & KeyFlags.KeyUp) {\n      this.exports.machine_key_up(this.sys, key);\n      this.joymask0 &= ~mask;\n      this.joymask1 &= ~mask2;\n    }\n    this.exports.c64_joystick(this.sys, this.joymask0, this.joymask1);\n  }\n\n}\n", "\nimport { C64_WASMMachine } from \"../machine/c64\";\nimport { Platform, Base6502MachinePlatform, getToolForFilename_6502, getOpcodeMetadata_6502 } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\nimport { BaseMAME6502Platform } from \"../common/mameplatform\";\n\nconst C64_PRESETS = [\n  {id:'hello.dasm', name:'Hello World (ASM)'},\n  {id:'eliza.c', name:'Eliza (C)'},\n  {id:'tgidemo.c', name:'TGI Graphics Demo (C)'},\n  {id:'upandaway.c', name:'Up, Up and Away (C)'},\n  {id:'joymove.c', name:'Joystick Movement (C)'},\n  {id:'siegegame.c', name:'Siege Game (C)'},\n  {id:'scroll1.c', name:'Scrolling 1 (C)'},\n  {id:'scroll2.c', name:'Scrolling 2 (C)'},\n  {id:'scroll3.c', name:'Scrolling 3 (C)'},\n  {id:'scroll4.c', name:'Scrolling 4 (C)'},\n  {id:'scroll5.c', name:'Scrolling 5 (C)'},\n  {id:'climber.c', name:'Climber Game (C)'},\n  {id:'multilines.c', name:'Multicolor Lines+Flood Fill (C)'},\n  {id:'sidtune.dasm', name:'SID Tune (ASM)'},\n  {id:'musicplayer.c', name:'Music Player (C)'},\n];\n\nconst C64_MEMORY_MAP = { main:[\n  {name:'6510 Registers',start:0x0,  size:0x2,type:'io'},\n  //{name:'RAM',          start:0x2,   size:0x7ffe,type:'ram'},\n  {name:'Cartridge ROM',start:0x8000,size:0x2000,type:'rom'},\n  {name:'BASIC ROM',    start:0xa000,size:0x2000,type:'rom'},\n  {name:'RAM',          start:0xc000,size:0x1000,type:'ram'},\n  {name:'VIC-II I/O',   start:0xd000,size:0x0400,type:'io'},\n  {name:'SID',          start:0xd400,size:0x0400,type:'io'},\n  {name:'Color RAM',    start:0xd800,size:0x0400,type:'io'},\n  {name:'CIA 1',        start:0xdc00,size:0x0100,type:'io'},\n  {name:'CIA 2',        start:0xdd00,size:0x0100,type:'io'},\n  {name:'I/O 1',        start:0xde00,size:0x0100,type:'io'},\n  {name:'I/O 2',        start:0xdf00,size:0x0100,type:'io'},\n  {name:'KERNAL ROM',   start:0xe000,size:0x2000,type:'rom'},\n] }\n\n// WASM C64 platform\nclass C64WASMPlatform extends Base6502MachinePlatform<C64_WASMMachine> implements Platform {\n\n  newMachine()          { return new C64_WASMMachine('c64'); }\n\n  getPresets()          { return C64_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.readConst(a); }\n  getMemoryMap()        { return C64_MEMORY_MAP; }\n  showHelp() {\n    window.open(\"https://8bitworkshop.com/docs/platforms/c64/\", \"_help\");\n  }\n  getROMExtension(rom:Uint8Array) { \n    /*\n    if (rom && rom[0] == 0x00 && rom[1] == 0x80 && rom[2+4] == 0xc3 && rom[2+5] == 0xc2) return \".crt\";\n    */\n    if (rom && rom[0] == 0x01 && rom[1] == 0x08) return \".prg\";\n    else return \".bin\";\n  }\n}\n\n// C64 MAME platform\nabstract class C64MAMEPlatform extends BaseMAME6502Platform {\n  getPresets() { return C64_PRESETS; }\n  getToolForFilename = getToolForFilename_6502;\n  getOpcodeMetadata = getOpcodeMetadata_6502;\n  getDefaultExtension() { return \".c\"; }\n  loadROM(title, data) {\n    if (!this.started) {\n      this.startModule(this.mainElement, {\n        jsfile:'mame8bitpc.js',\n        biosfile:'c64.zip',\n        cfgfile:'c64.cfg',\n        driver:'c64',\n        width:418,\n        height:235,\n        romfn:'/emulator/image.crt',\n        romdata:new Uint8Array(data),\n        romsize:0x10000,\n        extraargs: ['-autoboot_delay','5','-autoboot_command','load \"$\",8,1\\n'],\n        preInit:function(_self) {\n        },\n      });\n    } else {\n      this.loadROMFile(data);\n      this.loadRegion(\":quickload\", data);\n      var result = this.luacall(`image:load(\"/emulator/image.prg\")`)\n      console.log('load rom', result);\n      //this.loadRegion(\":exp:standard\", data);\n    }\n  }\n  start() {\n  }\n  getMemoryMap() { return C64_MEMORY_MAP; }\n}\n\n\nPLATFORMS['c64'] = C64WASMPlatform;\nPLATFORMS['c64.wasm'] = C64WASMPlatform;\nPLATFORMS['c64.mame'] = C64MAMEPlatform;\n"],
  "mappings": "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",
  "names": []
}
