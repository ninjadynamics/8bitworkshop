{
  "version": 3,
  "sources": ["../src/machine/atari7800.ts", "../src/platform/atari7800.ts"],
  "sourcesContent": ["\nimport { MOS6502, MOS6502State } from \"../common/cpu/MOS6502\";\nimport { BasicMachine, RasterFrameBased, Bus, ProbeAll } from \"../common/devices\";\nimport { KeyFlags, newAddressDecoder, padBytes, Keys, makeKeycodeMap, newKeyboardHandler, EmuHalt, dumpRAM, gtia_ntsc_to_rgb } from \"../common/emu\";\nimport { TssChannelAdapter, MasterAudio, POKEYDeviceChannel } from \"../common/audio\";\nimport { hex, rgb2bgr } from \"../common/util\";\n\n// https://atarihq.com/danb/a7800.shtml\n// https://atarihq.com/danb/files/maria_r1.txt\n// https://sites.google.com/site/atari7800wiki/\n\ninterface Atari7800StateBase {\n  ram : Uint8Array;\n  regs6532 : Uint8Array;\n}\n\ninterface Atari7800ControlsState {\n  inputs : Uint8Array;\n}\n\ninterface Atari7800State extends Atari7800StateBase, Atari7800ControlsState {\n  c : MOS6502State;\n  tia : {\n    regs : Uint8Array,\n  };\n  maria : {\n    regs : Uint8Array,\n    offset,dll,dlstart : number;\n    dli,h16,h8 : boolean;\n  };\n}\n\nconst SWCHA = 0;\nconst SWCHB = 2;\nconst INPT0 = 8;\n\nconst Atari7800_KEYCODE_MAP = makeKeycodeMap([\n  [Keys.A,        INPT0+0, 0x80],\n  [Keys.B,        INPT0+1, 0x80],\n  [Keys.SELECT,   SWCHB, -0x02],\n  [Keys.START,    SWCHB, -0x01],\n  [Keys.UP,       SWCHA, -0x10],\n  [Keys.DOWN,     SWCHA, -0x20],\n  [Keys.LEFT,     SWCHA, -0x40],\n  [Keys.RIGHT,    SWCHA, -0x80],\n  \n  [Keys.P2_A,     INPT0+2, 0x80],\n  [Keys.P2_B,     INPT0+3, 0x80],\n  //[Keys.P2_SELECT, 1, 2],\n  //[Keys.P2_START,  1, 3],\n  [Keys.P2_UP,     SWCHA, -0x01],\n  [Keys.P2_DOWN,   SWCHA, -0x02],\n  [Keys.P2_LEFT,   SWCHA, -0x04],\n  [Keys.P2_RIGHT,  SWCHA, -0x08],\n]);\n\n// http://www.ataripreservation.org/websites/freddy.offenga/megazine/ISSUE5-PALNTSC.html\n// http://7800.8bitdev.org/index.php/7800_Software_Guide#APPENDIX_4:_FRAME_TIMING\nconst CLK = 3579545;\nconst linesPerFrame = 262;\nconst numVisibleLines = 258-16;\nconst colorClocksPerLine = 454; // 456?\nconst colorClocksPreDMA = 28;\nconst audioOversample = 2;\nconst audioSampleRate = linesPerFrame*60*audioOversample;\n\n// TIA chip\n\nclass TIA {\n  regs = new Uint8Array(0x20);\n  \n  reset() {\n    this.regs.fill(0);\n  }\n  read(a : number) : number {\n    return this.regs[a] | 0;\n  }\n  write(a : number, v : number) {\n    this.regs[a] = v;\n  }\n  saveState() {\n    return {\n      regs: this.regs.slice(0)\n    };\n  }\n  loadState(s) {\n    for (let i=0; i<32; i++)\n      this.write(i, s.regs[i]);\n  }\n  static stateToLongString(state) : string {\n    let s = \"\";\n    s += dumpRAM(state.regs, 0, 32);\n    return s;\n  }\n}\n\n// MARIA chip\n\nclass MARIA {\n  bus : Bus;\n  cycles : number = 0;\n  regs = new Uint8Array(0x20);\n  offset : number = -1;\n  dll : number = 0;\n  dlstart : number = 0;\n  dli : boolean = false;\n  h16 : boolean = false;\n  h8 : boolean = false;\n  pixels = new Uint8Array(320);\n  WSYNC : number = 0;\n\n  reset() {\n    this.regs.fill(0);\n    // TODO?\n  }\n  read(a : number) : number {\n    return this.regs[a] | 0;\n  }\n  write(a : number, v : number) {\n    this.regs[a] = v;\n    if (a == 0x04) this.WSYNC++;\n    //console.log(hex(a), '=', hex(v));\n  }\n  saveState() {\n    return {\n      regs: this.regs.slice(0),\n      offset: this.offset,\n      dll: this.dll,\n      dlstart: this.dlstart,\n      dli: this.dli,\n      h16: this.h16,\n      h8: this.h8,\n    };\n  }\n  loadState(s) {\n    for (let i=0; i<32; i++)\n      this.write(i, s.regs[i]|0);\n    this.offset = s.offset|0;\n    this.dll = s.dll|0;\n    this.dlstart = s.dlstart|0;\n    this.dli = !!s.dli;\n    this.h16 = !!s.h16;\n    this.h8 = !!s.h8;\n  }\n  isDMAEnabled() {\n    return (this.regs[0x1c] & 0x60) == 0x40;\n  }\n  getDLLStart() {\n    return (this.regs[0x0c] << 8) + this.regs[0x10];\n  }\n  getCharBaseAddress() {\n    return (this.regs[0x14] << 8) + this.offset;\n  }\n  setVBLANK(b : boolean) {\n    if (b) {\n      this.regs[0x08] |= 0x80;\n      this.offset = -1;\n      this.dll = this.getDLLStart();\n      this.dli = this.bus && (this.bus.read(this.dll) & 0x80) != 0; // if DLI on first zone\n    } else {\n      this.regs[0x08] &= ~0x80;\n    }\n  }\n  readDLLEntry(bus) {\n    // display lists must be in RAM (TODO: probe?)\n    if (this.dll >= 0x4000) { return; }\n    let x = bus.read(this.dll);\n    this.offset = (x & 0xf);\n    this.h16 = (x & 0x40) != 0;\n    this.h8  = (x & 0x20) != 0;\n    this.dlstart = (bus.read(this.dll+1)<<8) + bus.read(this.dll+2);\n    //console.log(hex(this.dll,4), this.offset, hex(this.dlstart,4));\n    this.dll = (this.dll + 3) & 0xffff; // TODO: can also only cross 1 page?\n    this.dli = (bus.read(this.dll) & 0x80) != 0; // DLI flag is from next DLL entry\n  }\n  isHoley(a : number) : boolean {\n    if (a & 0x8000) {\n      if (this.h16 && (a & 0x1000)) return true;\n      if (this.h8  && (a & 0x800))  return true;\n    }\n    return false;\n  }\n  readDMA(a : number) : number {\n    if (this.isHoley(a))\n      return 0;\n    else {\n      this.cycles += 3;\n      return this.bus.read(a);\n    }\n  }\n  doDMA(bus : Bus) {\n    this.bus = bus;\n    this.cycles = 0;\n    this.pixels.fill(this.regs[0x0]);\n    if (this.isDMAEnabled()) {\n      this.cycles += 16; // TODO: last line in zone gets additional 8 cycles\n      // time for a new DLL entry?\n      if (this.offset < 0) {\n        this.readDLLEntry(bus);\n      }\n      // read the DL (only can span two pages)\n      let dlhi = this.dlstart & 0xff00;\n      let dlofs = this.dlstart & 0xff;\n      do {\n        // read DL entry\n        let b0 = bus.read(dlhi + ((dlofs+0) & 0x1ff));\n        let b1 = bus.read(dlhi + ((dlofs+1) & 0x1ff));\n        if (b1 == 0) break; // end of DL\n        // display lists must be in RAM (TODO: probe?)\n        if (dlhi >= 0x4000) { break; }\n        let b2 = bus.read(dlhi + ((dlofs+2) & 0x1ff));\n        let b3 = bus.read(dlhi + ((dlofs+3) & 0x1ff));\n        let indirect = false;\n        // extended header?\n        if ((b1 & 31) == 0) {\n          var pal = b3 >> 5;\n          var width = 32 - (b3 & 31);\n          var xpos = bus.read(dlhi + ((dlofs+4) & 0x1ff));\n          var writemode = b1 & 0x80;\n          indirect = (b1 & 0x20) != 0;\n          dlofs += 5;\n          this.cycles += 10;\n        } else {\n          // direct mode\n          var xpos = b3;\n          var pal = b1 >> 5;\n          var width = 32 - (b1 & 31);\n          var writemode = 0;\n          dlofs += 4;\n          this.cycles += 8;\n        }\n        let gfxadr = b0 + (((b2 + (indirect?0:this.offset)) & 0xff) << 8);\n        xpos *= 2;\n        // copy graphics data (direct)\n        let readmode = (this.regs[0x1c] & 0x3) + (writemode?4:0);\n        // double bytes?\n        let dbl = indirect && (this.regs[0x1c] & 0x10) != 0;\n        if (dbl) { width *= 2; }\n        //if (this.offset == 0) console.log(hex(dla,4), hex(gfxadr,4), xpos, width, pal, readmode);\n        for (var i=0; i<width; i++) {\n          let data = this.readDMA( dbl ? (gfxadr+(i>>1)) : (gfxadr+i) );\n          if (indirect) {\n            let indadr = ((this.regs[0x14] + this.offset) << 8) + data;\n            if (dbl && (i&1)) {\n              indadr++;\n              this.cycles -= 3; // indirect read has 6/9 cycles\n            }\n            data = this.readDMA(indadr);\n          }\n          // TODO: more modes (https://github.com/gstanton/ProSystem1_3/blob/master/Core/Maria.cpp)\n          switch (readmode) {\n            case 0:\t// 160 A/B\n              for (let j=0; j<4; j++) {\n                var col = (data >> 6) & 3;\n                if (col > 0) {\n                  this.pixels[xpos] = this.pixels[xpos+1] = this.regs[(pal<<2) + col];\n                }\n                data <<= 2;\n                xpos = (xpos + 2) & 0x1ff;\n              }\n              break;\n            case 2:\t// 320 B/D (TODO?)\n            case 3:\t// 320 A/C\n              for (let j=0; j<8; j++) {\n                var col = (data & 128) ? 1 : 0;\n                if (col > 0) {\n                  this.pixels[xpos] = this.regs[(pal<<2) + col];\n                }\n                data <<= 1;\n                xpos = (xpos + 1) & 0x1ff;\n              }\n              break;\n          }\n        }\n      } while (this.cycles < colorClocksPerLine); // TODO?\n      // decrement offset\n      this.offset -= 1;\n    }\n    return this.cycles;\n  }\n  doInterrupt() : boolean {\n    if (this.dli && this.offset < 0) {\n      this.dli = false;\n      return true;\n    } else\n      return false;\n    //return this.dli;// && this.offset == 1;\n  }\n  static stateToLongString(state) : string {\n    let s = \"\";\n    s += dumpRAM(state.regs, 0, 32);\n    s += \"\\n   DLL: $\" + hex((state.regs[0x0c] << 8) + state.regs[0x10],4) + \" @ $\" + hex(state.dll,4);\n    s += \"\\n    DL: $\" + hex(state.dlstart,4);\n    s += \"\\nOffset:  \" + state.offset;\n    s += \"\\n   DLI?  \" + state.dli;\n    return s;\n  }\n}\n\n// Atari 7800\n\nexport class Atari7800 extends BasicMachine implements RasterFrameBased {\n\n  cpuFrequency = 1789772;\n  canvasWidth = 320;\n  numTotalScanlines = linesPerFrame;\n  numVisibleScanlines = numVisibleLines;\n  defaultROMSize = 0xc000;\n  cpuCyclesPerLine = 113.5;\n  sampleRate = audioSampleRate;\n\n  cpu : MOS6502;\n  ram : Uint8Array = new Uint8Array(0x1000);\n  regs6532 = new Uint8Array(4);\n  tia : TIA = new TIA();\n  maria : MARIA = new MARIA();\n  pokey1; //TODO: type\n  audioadapter;\n  \n  lastFrameCycles = 0;\n  xtracyc = 0;\n  \n  read  : (a:number) => number;\n  write : (a:number, v:number) => void;\n  \n  dmaBus : Bus; // to pass to MARIA\n\n  constructor() {\n    super();\n    this.cpu = new MOS6502();\n    this.read = newAddressDecoder([\n        [0x0008, 0x000d,   0x0f, (a) => { this.xtracyc++; return this.readInput(a); }],\n        [0x0000, 0x001f,   0x1f, (a) => { this.xtracyc++; return this.tia.read(a); }],\n        [0x0020, 0x003f,   0x1f, (a) => { return this.maria.read(a); }],\n        [0x0040, 0x00ff,   0xff, (a) => { return this.ram[a + 0x800]; }],\n        [0x0100, 0x013f,   0xff, (a) => { return this.read(a); }], // shadow\n        [0x0140, 0x01ff,  0x1ff, (a) => { return this.ram[a + 0x800]; }],\n        [0x0280, 0x02ff,    0x3, (a) => { this.xtracyc++; return this.inputs[a]; }],\n        [0x1800, 0x27ff, 0xffff, (a) => { return this.ram[a - 0x1800]; }],\n        [0x2800, 0x3fff,  0x7ff, (a) => { return this.read(a | 0x2000); }], // shadow\n        [0x4000, 0xffff, 0xffff, (a) => { return this.rom ? this.rom[a - 0x4000] : 0; }],\n        [0x0000, 0xffff, 0xffff, (a) => { return this.probe && this.probe.logIllegal(a); }],\n      ]);\n    this.write = newAddressDecoder([\n        [0x0015, 0x001A,   0x1f, (a,v) => { this.xtracyc++; this.pokey1.setTIARegister(a, v); }],\n        [0x0000, 0x001f,   0x1f, (a,v) => { this.xtracyc++; this.tia.write(a,v); }],\n        [0x0020, 0x003f,   0x1f, (a,v) => { this.maria.write(a,v); }],\n        [0x0040, 0x00ff,   0xff, (a,v) => { this.ram[a + 0x800] = v; }],\n        [0x0100, 0x013f,   0xff, (a,v) => { this.write(a,v); }], // shadow\n        [0x0140, 0x01ff,  0x1ff, (a,v) => { this.ram[a + 0x800] = v; }],\n        [0x0280, 0x02ff,    0x3, (a,v) => { this.xtracyc++; this.regs6532[a] = v; /*TODO*/ }],\n        [0x1800, 0x27ff, 0xffff, (a,v) => { this.ram[a - 0x1800] = v; }],\n        [0x2800, 0x3fff,  0x7ff, (a,v) => { this.write(a | 0x2000, v); }], // shadow\n        [0xbfff, 0xbfff, 0xffff, (a,v) => { }], // TODO: bank switching?\n        [0x0000, 0xffff, 0xffff, (a,v) => { this.probe && this.probe.logIllegal(a); }],\n      ]);\n    this.connectCPUMemoryBus(this);\n    this.dmaBus = this.probeDMABus(this);\n    this.handler = newKeyboardHandler(this.inputs, Atari7800_KEYCODE_MAP);\n    this.pokey1 = new POKEYDeviceChannel();\n    this.audioadapter = new TssChannelAdapter(this.pokey1, audioOversample, audioSampleRate);\n  }\n  \n  readConst(a) {\n    // make sure we don't log during this\n    let oldprobe = this.probe;\n    this.probe = null;\n    let v = this.read(a);\n    this.probe = oldprobe;\n    return v;\n  }\n\n  readInput(a:number) : number {\n    switch (a) {\n      case 0xc: return ~this.inputs[0x8] & 0x80; //INPT4\n      case 0xd: return ~this.inputs[0x9] & 0x80; //INPT5\n      default: return this.inputs[a]|0;\n    }\n  }\n\n  advanceCPU() : number {\n    var clk = super.advanceCPU();\n    if (this.xtracyc) {\n      clk += this.xtracyc;\n      this.probe.logClocks(this.xtracyc);\n      this.xtracyc = 0;\n    }\n    return clk;\n  }\n\n  advanceFrame(trap) : number {\n    var idata = this.pixels;\n    var iofs = 0;\n    var rgb;\n    var mc = 0;\n    var fc = 0;\n    var steps = 0;\n    this.probe.logNewFrame();\n    //console.log(hex(this.cpu.getPC()), hex(this.maria.dll));\n    // visible lines\n    for (var sl=0; sl<linesPerFrame; sl++) {\n      this.scanline = sl;\n      var visible = sl < numVisibleLines;\n      this.maria.setVBLANK(!visible);\n      this.maria.WSYNC = 0;\n      // pre-DMA clocks\n      while (mc < colorClocksPreDMA) {\n        if (this.maria.WSYNC) break;\n        if (trap && trap()) {\n          trap = null;\n          sl = 999;\n          break; // TODO?\n        }\n        mc += this.advanceCPU() << 2;\n        steps++;\n      }\n      // is this scanline visible?\n      if (visible) {\n        // do DMA for scanline?\n        let dmaClocks = this.maria.doDMA(this.dmaBus);\n        this.probe.logClocks(dmaClocks >> 2); // TODO: logDMA\n        mc += dmaClocks;\n        // copy line to frame buffer\n        if (idata) {\n          for (var i=0; i<320; i++) {\n            idata[iofs++] = COLORS_RGBA[this.maria.pixels[i]];\n          }\n        }\n      }\n      // do interrupt? (if visible or before 1st scanline)\n      if ((visible || sl == linesPerFrame-1) && this.maria.doInterrupt()) {\n        this.probe.logInterrupt(0);\n        this.cpu.NMI();\n      }\n      // post-DMA clocks\n      while (mc < colorClocksPerLine) {\n        if (this.maria.WSYNC) {\n          this.probe.logWait(0);\n          this.probe.logClocks((colorClocksPerLine - mc) >> 2);\n          mc = colorClocksPerLine;\n          break;\n        }\n        if (trap && trap()) {\n          trap = null;\n          sl = 999;\n          break;\n        }\n        mc += this.advanceCPU() << 2;\n        steps++;\n      }\n      // audio\n      this.audio && this.audioadapter.generate(this.audio);\n      // update clocks, scanline\n      mc -= colorClocksPerLine;\n      fc += mc;\n      this.probe.logNewScanline();\n    }\n    /*\n      // TODO let bkcol = this.maria.regs[0x0];\n      // TODO $(this.video.canvas).css('background-color', COLORS_WEB[bkcol]);\n    */\n    this.lastFrameCycles = fc;\n    return steps;\n  }\n\n  getRasterX() { return this.lastFrameCycles % colorClocksPerLine; }\n  getRasterY() { return this.scanline; }\n\n  loadROM(data) {\n    if (data.length == 0xc080) data = data.slice(0x80); // strip header\n    this.rom = padBytes(data, this.defaultROMSize, true);\n  }\n\n  reset() {\n    super.reset();\n    this.tia.reset();\n    this.maria.reset();\n    this.inputs.fill(0x0);\n    this.inputs[SWCHA] = 0xff;\n    this.inputs[SWCHB] = 1+2+8;\n    //this.cpu.advanceClock(); // needed for test to pass?\n  }\n\n  readAddress(addr : number) {\n    return this.read(addr) | 0;\n  }\n\n  loadState(state : Atari7800State) {\n    this.cpu.loadState(state.c);\n    this.ram.set(state.ram);\n    this.tia.loadState(state.tia);\n    this.maria.loadState(state.maria);\n    this.regs6532.set(state.regs6532);\n    this.loadControlsState(state);\n  }\n  saveState() : Atari7800State {\n    return {\n      c:this.cpu.saveState(),\n      ram:this.ram.slice(0),\n      tia:this.tia.saveState(),\n      maria:this.maria.saveState(),\n      regs6532:this.regs6532.slice(0),\n      inputs:this.inputs.slice(0)\n    };\n  }\n  loadControlsState(state:Atari7800ControlsState) : void {\n    this.inputs.set(state.inputs);\n  }\n  saveControlsState() : Atari7800ControlsState {\n    return {\n      inputs:this.inputs.slice(0)\n    };\n  }\n\n  getDebugCategories() {\n    return ['CPU','Stack','TIA','MARIA'];\n  }\n  getDebugInfo(category, state) {\n    switch (category) {\n      case 'TIA': return TIA.stateToLongString(state.tia);\n      case 'MARIA': return MARIA.stateToLongString(state.maria) + \"\\nScanline: \" + this.scanline;\n      //default: return super.getDebugInfo(category, state);\n    }\n  }\n}\n\n///\n\nvar COLORS_RGBA = new Uint32Array(256);\nfor (var i=0; i<256; i++) {\n  COLORS_RGBA[i] = gtia_ntsc_to_rgb(i);\n}\n\n", "\nimport { Atari7800 } from \"../machine/atari7800\";\nimport { Platform, Base6502MachinePlatform } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\n\nvar Atari7800_PRESETS = [\n  {id:'sprites.dasm', name:'Sprites (ASM)'},\n  {id:'wsync.c', name:'WSYNC'},\n  {id:'sprites.c', name:'Double Buffering'},\n  {id:'scroll.c', name:'Scrolling'},\n];\n\nclass Atari7800Platform extends Base6502MachinePlatform<Atari7800> implements Platform {\n\n  newMachine()          { return new Atari7800(); }\n  getPresets()          { return Atari7800_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.readConst(a); }\n  // TODO loadBIOS(bios)\t{ this.machine.loadBIOS(a); }\n  getMemoryMap = function() { return { main:[\n      {name:'TIA',start:0x00,size:0x20,type:'io'},\n      {name:'MARIA',start:0x20,size:0x20,type:'io'},\n      {name:'RAM (6166 Block 0)',start:0x40,size:0xc0,type:'ram'},\n      {name:'RAM (6166 Block 1)',start:0x140,size:0xc0,type:'ram'},\n      {name:'PIA',start:0x280,size:0x18,type:'io'},\n      {name:'RAM',start:0x1800,size:0x1000,type:'ram'}, // TODO: shadow ram\n      {name:'Cartridge ROM',start:0x4000,size:0xc000,type:'rom'},\n  ] } };\n  getROMExtension() { return \".a78\"; }\n}\n\n///\n\nPLATFORMS['atari7800'] = Atari7800Platform;\n"],
  "mappings": "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",
  "names": []
}
