{
  "version": 3,
  "sources": ["../src/common/cpu/MOS6502.ts"],
  "sourcesContent": ["\nimport { CPU, Bus, ClockBased, SavesState, Interruptable } from \"../devices\";\n\n// Copyright 2015 by Paulo Augusto Peccin. See license.txt distributed with this file.\n\nvar _MOS6502 = function() {\n    var self = this;\n\n    this.powerOn = function() {\n        this.reset();\n    };\n\n    this.powerOff = function() {\n    };\n\n    this.clockPulse = function() {\n        if (!RDY) return;      // TODO Should be ignored in the last cycle of the instruction\n        T++;\n        instruction[T]();\n    };\n\n    this.connectBus = function(aBus) {\n        bus = aBus;\n    };\n\n    this.setRDY = function(boo) {\n        RDY = boo;\n    };\n\n    this.isRDY = function() {\n        return RDY;\n    }\n\n    this.reset = function() {\n        I = 1;\n        T = -1;\n        instruction = [ fetchOpcodeAndDecodeInstruction ];    // Bootstrap instruction\n        PC = bus.read(RESET_VECTOR) | (bus.read(RESET_VECTOR + 1) << 8);\n        this.setRDY(true);\n    };\n\n    // Interfaces\n    var bus : Bus;\n    var RDY : boolean = false;\n\n    // Registers\n    var PC : number = 0;\n    var SP : number = 0;\n    var A : number = 0;\n    var X : number = 0;\n    var Y : number = 0;\n\n    // Status Bits\n    var N : number = 0;\n    var V : number = 0;\n    var D : number = 0;\n    var I : number = 0;\n    var Z : number = 0;\n    var C : number = 0;\n\n    // Internal decoding registers\n    var T : number = -1;\n    var opcode : number = -1;\n    var instruction : (() => void)[];\n    var data : number = 0;\n    var AD : number = 0;\n    var BA : number = 0;\n    var BALCrossed : boolean = false;\n    var IA : number = 0;\n    var branchOffset : number = 0;\n    var branchOffsetCrossAdjust : number = 0;\n\n    // Vectors\n    const NMI_VECTOR = 0xfffa;\n    const RESET_VECTOR = 0xfffc;\n    const IRQ_VECTOR = 0xfffe;\n\n    // Index registers names\n    const rX = 0;\n    const rY = 1;\n\n    // Status bits names\n    const bN = 7;\n    const bV = 6;\n    // const bE = 5;\t// Not used\n    // const bB = 4;\t// Not used\n    // const bD = 3;  // Not used\n    // const bI = 2;  // Not used\n    const bZ = 1;\n    const bC = 0;\n\n    // Auxiliary variables\n    // TODO\n    //noinspection JSUnusedGlobalSymbols\n    this.debug = false;\n    //noinspection JSUnusedGlobalSymbols\n    this.trace = false;\n\n\n    // Internal operations\n\n    var fetchOpcodeAndDecodeInstruction = function() {\n        opcode = bus.read(PC);\n        instruction = instructions[opcode];\n        T = 0;\n\n        // if (self.trace) self.breakpoint(\"TRACE\");\n        // console.log(\"PC: \" + PC + \", op: \" + opcode + \": \" + opcodes[opcode]);\n\n        PC++;\n    };\n\n    var fetchNextOpcode = fetchOpcodeAndDecodeInstruction;\n\n    var fetchOpcodeAndDiscard = function() {\n        bus.read(PC);\n    };\n\n    var fetchBranchOffset = function() {\n        branchOffset = bus.read(PC);\n        PC++;\n    };\n\n    var fetchADL = function() {\n        AD = bus.read(PC);\n        PC++;\n    };\n\n    var fetchADH = function() {\n        AD |= bus.read(PC) << 8;\n        PC++;\n    };\n\n    var fetchADLFromBA = function() {\n        AD = bus.read(BA);\n    };\n\n    var fetchADHFromBA = function() {\n        AD |= bus.read(BA) << 8;\n    };\n\n    var fetchBAL = function() {\n        BA = bus.read(PC);\n        PC++;\n    };\n\n    var fetchBAH = function() {\n        BA |= bus.read(PC) << 8;\n        PC++;\n    };\n\n    var fetchBALFromIA = function() {\n        BA = bus.read(IA);\n    };\n\n    var fetchBAHFromIA = function() {\n        BA |= bus.read(IA) << 8;\n    };\n\n    var addXtoBAL = function() {\n        var low = (BA & 255) + X;\n        BALCrossed = low > 255;\n        BA = (BA & 0xff00) | (low & 255);\n    };\n\n    var addYtoBAL = function() {\n        var low = (BA & 255) + Y;\n        BALCrossed = low > 255;\n        BA = (BA & 0xff00) | (low & 255);\n    };\n\n    var add1toBAL = function() {\n        var low = (BA & 255) + 1;\n        BALCrossed = low > 255;\n        BA = (BA & 0xff00) | (low & 255);\n    };\n\n    var add1toBAHifBALCrossed = function() {\n        if (BALCrossed)\n            BA = (BA + 0x0100) & 0xffff;\n    };\n\n    var fetchIAL = function() {\n        IA = bus.read(PC);\n        PC++;\n    };\n\n    var fetchIAH = function() {\n        IA |= bus.read(PC) << 8;\n        PC++;\n    };\n\n    var add1toIAL = function() {\n        var low = (IA & 255) + 1;\n        IA = (IA & 0xff00) | (low & 255);\n    };\n\n    var fetchDataFromImmediate = function() {\n        data = bus.read(PC);\n        PC++;\n    };\n\n    var fetchDataFromAD = function() {\n        data = bus.read(AD);\n    };\n\n    var fetchDataFromBA = function() {\n        data = bus.read(BA);\n    };\n\n    var writeDataToAD = function() {\n        bus.write(AD, data);\n    };\n\n    var writeDataToBA = function() {\n        bus.write(BA, data);\n    };\n\n    var addBranchOffsetToPCL = function() {\n        var oldLow = (PC & 0x00ff);\n        var newLow = (oldLow + branchOffset) & 255;\n        // Negative offset?\n        if (branchOffset > 127)\n            branchOffsetCrossAdjust = (newLow > oldLow) ? -0x0100 : 0;\n        else\n            branchOffsetCrossAdjust = (newLow < oldLow) ? 0x0100 : 0;\n        PC = (PC & 0xff00) | newLow;\n    };\n\n    var adjustPCHForBranchOffsetCross = function() {\n        PC = (PC + branchOffsetCrossAdjust) & 0xffff;\n    };\n\n    var setZ = function(val) {\n        Z = (val === 0) ? 1 : 0;\n    };\n\n    var setN = function(val) {\n        N = (val & 0x080) ? 1 : 0;\n    };\n\n    var setV = function(boo) {\n        V = boo ? 1 : 0;\n    };\n\n    var setC = function(boo) {\n        C = boo ? 1 : 0;\n    };\n\n    var popFromStack = function() {\n        SP = (SP + 1) & 255;\n        return bus.read(0x0100 + SP);\n    };\n\n    var peekFromStack = function() {\n        return bus.read(0x0100 + SP);\n    };\n\n    var pushToStack = function(val) {\n        bus.write(0x0100 + SP, val);\n        SP = (SP - 1) & 255;\n    };\n\n    var getStatusBits = function() {\n        return N << 7 | V << 6 | 0x30                 // Always push with E (bit 5) and B (bit 4) ON\n            |  D << 3 | I << 2 | Z << 1 | C;\n    };\n\n    var setStatusBits = function(val) {\n        N = val >>> 7; V = val >>> 6 & 1;             // E and B flags actually do not exist as real flags, so ignore\n        D = val >>> 3 & 1; I = val >>> 2 & 1; Z = val >>> 1 & 1; C = val & 1;\n    };\n\n    var illegalOpcode = function(op) {\n        if (self.debug) self.breakpoint(\"Illegal Opcode: \" + op);\n    };\n\n\n    // Addressing routines\n\n    var implied = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var immediateRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var zeroPageRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,                        // ADH will be zero\n            fetchDataFromAD,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var absoluteRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            fetchDataFromAD,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var indirectXRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBAL,                        // BAH will be zero\n            fetchDataFromBA,\n            function() {\n                addXtoBAL();\n                fetchADLFromBA();\n            },\n            function() {\n                add1toBAL();\n                fetchADHFromBA();\n            },\n            fetchDataFromAD,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var absoluteIndexedRead = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,\n                fetchBAH,\n                function() {\n                    addIndex();\n                    fetchDataFromBA();\n                    add1toBAHifBALCrossed();\n                },\n                function() {\n                    if (BALCrossed) {\n                        fetchDataFromBA();\n                    } else {\n                        operation();\n                        fetchNextOpcode();\n                    }\n                },\n                function() {\n                    operation();\n                    fetchNextOpcode();\n                }\n            ];\n        };\n    };\n\n    var zeroPageIndexedRead = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,                        // BAH will be zero\n                fetchDataFromBA,\n                function() {\n                    addIndex();\n                    fetchDataFromBA();\n                },\n                function() {\n                    operation();\n                    fetchNextOpcode();\n                }\n            ];\n        };\n    };\n\n    var indirectYRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() {\n                addYtoBAL();\n                fetchDataFromBA();\n                add1toBAHifBALCrossed();\n            },\n            function() {\n                if(BALCrossed) {\n                    fetchDataFromBA();\n                } else {\n                    operation();\n                    fetchNextOpcode();\n                }\n            },\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var zeroPageWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,                        // ADH will be zero\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var absoluteWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var indirectXWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBAL,                        // BAH will be zero\n            fetchDataFromBA,\n            function() {\n                addXtoBAL();\n                fetchADLFromBA();\n            },\n            function() {\n                add1toBAL();\n                fetchADHFromBA();\n            },\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var absoluteIndexedWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,\n                fetchBAH,\n                function() {\n                    addIndex();\n                    fetchDataFromBA();\n                    add1toBAHifBALCrossed();\n                },\n                function() {\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var zeroPageIndexedWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,                        // BAH will be zero\n                fetchDataFromBA,\n                function() {\n                    addIndex();\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var indirectYWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() {\n                addYtoBAL();\n                fetchDataFromBA();\n                add1toBAHifBALCrossed();\n            },\n            function() {\n                operation();\n                writeDataToBA();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n\n    var zeroPageReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,                        // ADH will be zero\n            fetchDataFromAD,\n            writeDataToAD,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var absoluteReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            fetchDataFromAD,\n            writeDataToAD,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var zeroPageIndexedReadModifyWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,                        // BAH will be zero\n                fetchDataFromBA,\n                function () {\n                    addIndex();\n                    fetchDataFromBA();\n                },\n                writeDataToBA,\n                function () {\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var absoluteIndexedReadModifyWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,\n                fetchBAH,\n                function () {\n                    addIndex();\n                    fetchDataFromBA();\n                    add1toBAHifBALCrossed();\n                },\n                fetchDataFromBA,\n                writeDataToBA,\n                function () {\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var indirectXReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBAL,                        // BAH will be zero\n            fetchDataFromBA,\n            function() {\n                addXtoBAL();\n                fetchADLFromBA();\n            },\n            function() {\n                add1toBAL();\n                fetchADHFromBA();\n            },\n            fetchDataFromAD,\n            writeDataToAD,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var indirectYReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() {\n                addYtoBAL();\n                fetchDataFromBA();\n                add1toBAHifBALCrossed();\n            },\n            fetchDataFromBA,\n            writeDataToBA,\n            function() {\n                operation();\n                writeDataToBA();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n\n    // Instructions  ========================================================================================\n\n    // Complete instruction set\n    var opcodes =      new Array(256);\n    var instructions = new Array(256);\n\n    opcodes[0x00] = \"BRK\";  instructions[0x00] = BRK();\n    opcodes[0x01] = \"ORA\";  instructions[0x01] = ORA(indirectXRead);\n    opcodes[0x02] = \"uKIL\"; instructions[0x02] = uKIL();\n    opcodes[0x03] = \"uSLO\"; instructions[0x03] = uSLO(indirectXReadModifyWrite);\n    opcodes[0x04] = \"uNOP\"; instructions[0x04] = uNOP(zeroPageRead);\n    opcodes[0x05] = \"ORA\";  instructions[0x05] = ORA(zeroPageRead);\n    opcodes[0x06] = \"ASL\";  instructions[0x06] = ASL(zeroPageReadModifyWrite);\n    opcodes[0x07] = \"uSLO\"; instructions[0x07] = uSLO(zeroPageReadModifyWrite);\n    opcodes[0x08] = \"PHP\";  instructions[0x08] = PHP();\n    opcodes[0x09] = \"ORA\";  instructions[0x09] = ORA(immediateRead);\n    opcodes[0x0a] = \"ASL\";  instructions[0x0a] = ASL_ACC();\n    opcodes[0x0b] = \"uANC\"; instructions[0x0b] = uANC(immediateRead);\n    opcodes[0x0c] = \"uNOP\"; instructions[0x0c] = uNOP(absoluteRead);\n    opcodes[0x0d] = \"ORA\";  instructions[0x0d] = ORA(absoluteRead);\n    opcodes[0x0e] = \"ASL\";  instructions[0x0e] = ASL(absoluteReadModifyWrite);\n    opcodes[0x0f] = \"uSLO\"; instructions[0x0f] = uSLO(absoluteReadModifyWrite);\n    opcodes[0x10] = \"BPL\";  instructions[0x10] = Bxx(bN, 0);                 // BPL\n    opcodes[0x11] = \"ORA\";  instructions[0x11] = ORA(indirectYRead);\n    opcodes[0x12] = \"uKIL\"; instructions[0x12] = uKIL();\n    opcodes[0x13] = \"uSLO\"; instructions[0x13] = uSLO(indirectYReadModifyWrite);\n    opcodes[0x14] = \"uNOP\"; instructions[0x14] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x15] = \"ORA\";  instructions[0x15] = ORA(zeroPageIndexedRead(rX));\n    opcodes[0x16] = \"ASL\";  instructions[0x16] = ASL(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x17] = \"uSLO\"; instructions[0x17] = uSLO(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x18] = \"CLC\";  instructions[0x18] = CLC();\n    opcodes[0x19] = \"ORA\";  instructions[0x19] = ORA(absoluteIndexedRead(rY));\n    opcodes[0x1a] = \"uNOP\"; instructions[0x1a] = uNOP(implied);\n    opcodes[0x1b] = \"uSLO\"; instructions[0x1b] = uSLO(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x1c] = \"uNOP\"; instructions[0x1c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x1d] = \"ORA\";  instructions[0x1d] = ORA(absoluteIndexedRead(rX));\n    opcodes[0x1e] = \"ASL\";  instructions[0x1e] = ASL(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x1f] = \"uSLO\"; instructions[0x1f] = uSLO(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x20] = \"JSR\";  instructions[0x20] = JSR();\n    opcodes[0x21] = \"AND\";  instructions[0x21] = AND(indirectXRead);\n    opcodes[0x22] = \"uKIL\"; instructions[0x22] = uKIL();\n    opcodes[0x23] = \"uRLA\"; instructions[0x23] = uRLA(indirectXReadModifyWrite);\n    opcodes[0x24] = \"BIT\";  instructions[0x24] = BIT(zeroPageRead);\n    opcodes[0x25] = \"AND\";  instructions[0x25] = AND(zeroPageRead);\n    opcodes[0x26] = \"ROL\";  instructions[0x26] = ROL(zeroPageReadModifyWrite);\n    opcodes[0x27] = \"uRLA\"; instructions[0x27] = uRLA(zeroPageReadModifyWrite);\n    opcodes[0x28] = \"PLP\";  instructions[0x28] = PLP();\n    opcodes[0x29] = \"AND\";  instructions[0x29] = AND(immediateRead);\n    opcodes[0x2a] = \"ROL\";  instructions[0x2a] = ROL_ACC();\n    opcodes[0x2b] = \"uANC\"; instructions[0x2b] = uANC(immediateRead);\n    opcodes[0x2c] = \"BIT\";  instructions[0x2c] = BIT(absoluteRead);\n    opcodes[0x2d] = \"AND\";  instructions[0x2d] = AND(absoluteRead);\n    opcodes[0x2e] = \"ROL\";  instructions[0x2e] = ROL(absoluteReadModifyWrite);\n    opcodes[0x2f] = \"uRLA\"; instructions[0x2f] = uRLA(absoluteReadModifyWrite);\n    opcodes[0x30] = \"BMI\";  instructions[0x30] = Bxx(bN, 1);                 // BMI\n    opcodes[0x31] = \"AND\";  instructions[0x31] = AND(indirectYRead);\n    opcodes[0x32] = \"uKIL\"; instructions[0x32] = uKIL();\n    opcodes[0x33] = \"uRLA\"; instructions[0x33] = uRLA(indirectYReadModifyWrite);\n    opcodes[0x34] = \"uNOP\"; instructions[0x34] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x35] = \"AND\";  instructions[0x35] = AND(zeroPageIndexedRead(rX));\n    opcodes[0x36] = \"ROL\";  instructions[0x36] = ROL(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x37] = \"uRLA\"; instructions[0x37] = uRLA(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x38] = \"SEC\";  instructions[0x38] = SEC();\n    opcodes[0x39] = \"AND\";  instructions[0x39] = AND(absoluteIndexedRead(rY));\n    opcodes[0x3a] = \"uNOP\"; instructions[0x3a] = uNOP(implied);\n    opcodes[0x3b] = \"uRLA\"; instructions[0x3b] = uRLA(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x3c] = \"uNOP\"; instructions[0x3c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x3d] = \"AND\";  instructions[0x3d] = AND(absoluteIndexedRead(rX));\n    opcodes[0x3e] = \"ROL\";  instructions[0x3e] = ROL(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x3f] = \"uRLA\"; instructions[0x3f] = uRLA(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x40] = \"RTI\";  instructions[0x40] = RTI();\n    opcodes[0x41] = \"EOR\";  instructions[0x41] = EOR(indirectXRead);\n    opcodes[0x42] = \"uKIL\"; instructions[0x42] = uKIL();\n    opcodes[0x43] = \"uSRE\"; instructions[0x43] = uSRE(indirectXReadModifyWrite);\n    opcodes[0x44] = \"uNOP\"; instructions[0x44] = uNOP(zeroPageRead);\n    opcodes[0x45] = \"EOR\";  instructions[0x45] = EOR(zeroPageRead);\n    opcodes[0x46] = \"LSR\";  instructions[0x46] = LSR(zeroPageReadModifyWrite);\n    opcodes[0x47] = \"uSRE\"; instructions[0x47] = uSRE(zeroPageReadModifyWrite);\n    opcodes[0x48] = \"PHA\";  instructions[0x48] = PHA();\n    opcodes[0x49] = \"EOR\";  instructions[0x49] = EOR(immediateRead);\n    opcodes[0x4a] = \"LSR\";  instructions[0x4a] = LSR_ACC();\n    opcodes[0x4b] = \"uASR\"; instructions[0x4b] = uASR(immediateRead);\n    opcodes[0x4c] = \"JMP\";  instructions[0x4c] = JMP_ABS();\n    opcodes[0x4d] = \"EOR\";  instructions[0x4d] = EOR(absoluteRead);\n    opcodes[0x4e] = \"LSR\";  instructions[0x4e] = LSR(absoluteReadModifyWrite);\n    opcodes[0x4f] = \"uSRE\"; instructions[0x4f] = uSRE(absoluteReadModifyWrite);\n    opcodes[0x50] = \"BVC\";  instructions[0x50] = Bxx(bV, 0);                 // BVC\n    opcodes[0x51] = \"EOR\";  instructions[0x51] = EOR(indirectYRead);\n    opcodes[0x52] = \"uKIL\"; instructions[0x52] = uKIL();\n    opcodes[0x53] = \"uSRE\"; instructions[0x53] = uSRE(indirectYReadModifyWrite);\n    opcodes[0x54] = \"uNOP\"; instructions[0x54] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x55] = \"EOR\";  instructions[0x55] = EOR(zeroPageIndexedRead(rX));\n    opcodes[0x56] = \"LSR\";  instructions[0x56] = LSR(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x57] = \"uSRE\"; instructions[0x57] = uSRE(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x58] = \"CLI\";  instructions[0x58] = CLI();\n    opcodes[0x59] = \"EOR\";  instructions[0x59] = EOR(absoluteIndexedRead(rY));\n    opcodes[0x5a] = \"uNOP\"; instructions[0x5a] = uNOP(implied);\n    opcodes[0x5b] = \"uSRE\"; instructions[0x5b] = uSRE(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x5c] = \"uNOP\"; instructions[0x5c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x5d] = \"EOR\";  instructions[0x5d] = EOR(absoluteIndexedRead(rX));\n    opcodes[0x5e] = \"LSR\";  instructions[0x5e] = LSR(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x5f] = \"uSRE\"; instructions[0x5f] = uSRE(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x60] = \"RTS\";  instructions[0x60] = RTS();\n    opcodes[0x61] = \"ADC\";  instructions[0x61] = ADC(indirectXRead);\n    opcodes[0x62] = \"uKIL\"; instructions[0x62] = uKIL();\n    opcodes[0x63] = \"uRRA\"; instructions[0x63] = uRRA(indirectXReadModifyWrite);\n    opcodes[0x64] = \"uNOP\"; instructions[0x64] = uNOP(zeroPageRead);\n    opcodes[0x65] = \"ADC\";  instructions[0x65] = ADC(zeroPageRead);\n    opcodes[0x66] = \"ROR\";  instructions[0x66] = ROR(zeroPageReadModifyWrite);\n    opcodes[0x67] = \"uRRA\"; instructions[0x67] = uRRA(zeroPageReadModifyWrite);\n    opcodes[0x68] = \"PLA\";  instructions[0x68] = PLA();\n    opcodes[0x69] = \"ADC\";  instructions[0x69] = ADC(immediateRead);\n    opcodes[0x6a] = \"ROR\";  instructions[0x6a] = ROR_ACC();\n    opcodes[0x6b] = \"uARR\"; instructions[0x6b] = uARR(immediateRead);\n    opcodes[0x6c] = \"JMP\";  instructions[0x6c] = JMP_IND();\n    opcodes[0x6d] = \"ADC\";  instructions[0x6d] = ADC(absoluteRead);\n    opcodes[0x6e] = \"ROR\";  instructions[0x6e] = ROR(absoluteReadModifyWrite);\n    opcodes[0x6f] = \"uRRA\"; instructions[0x6f] = uRRA(absoluteReadModifyWrite);\n    opcodes[0x70] = \"BVS\";  instructions[0x70] = Bxx(bV, 1);                 // BVS\n    opcodes[0x71] = \"ADC\";  instructions[0x71] = ADC(indirectYRead);\n    opcodes[0x72] = \"uKIL\"; instructions[0x72] = uKIL();\n    opcodes[0x73] = \"uRRA\"; instructions[0x73] = uRRA(indirectYReadModifyWrite);\n    opcodes[0x74] = \"uNOP\"; instructions[0x74] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x75] = \"ADC\";  instructions[0x75] = ADC(zeroPageIndexedRead(rX));\n    opcodes[0x76] = \"ROR\";  instructions[0x76] = ROR(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x77] = \"uRRA\"; instructions[0x77] = uRRA(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x78] = \"SEI\";  instructions[0x78] = SEI();\n    opcodes[0x79] = \"ADC\";  instructions[0x79] = ADC(absoluteIndexedRead(rY));\n    opcodes[0x7a] = \"uNOP\"; instructions[0x7a] = uNOP(implied);\n    opcodes[0x7b] = \"uRRA\"; instructions[0x7b] = uRRA(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x7c] = \"uNOP\"; instructions[0x7c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x7d] = \"ADC\";  instructions[0x7d] = ADC(absoluteIndexedRead(rX));\n    opcodes[0x7e] = \"ROR\";  instructions[0x7e] = ROR(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x7f] = \"uRRA\"; instructions[0x7f] = uRRA(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x80] = \"uNOP\"; instructions[0x80] = uNOP(immediateRead);\n    opcodes[0x81] = \"STA\";  instructions[0x81] = STA(indirectXWrite);\n    opcodes[0x82] = \"uNOP\"; instructions[0x82] = uNOP(immediateRead);\n    opcodes[0x83] = \"uSAX\"; instructions[0x83] = uSAX(indirectXWrite);\n    opcodes[0x84] = \"STY\";  instructions[0x84] = STY(zeroPageWrite);\n    opcodes[0x85] = \"STA\";  instructions[0x85] = STA(zeroPageWrite);\n    opcodes[0x86] = \"STX\";  instructions[0x86] = STX(zeroPageWrite);\n    opcodes[0x87] = \"uSAX\"; instructions[0x87] = uSAX(zeroPageWrite);\n    opcodes[0x88] = \"DEY\";  instructions[0x88] = DEY();\n    opcodes[0x89] = \"uNOP\"; instructions[0x89] = uNOP(immediateRead);\n    opcodes[0x8a] = \"TXA\";  instructions[0x8a] = TXA();\n    opcodes[0x8b] = \"uANE\"; instructions[0x8b] = uANE(immediateRead);\n    opcodes[0x8c] = \"STY\";  instructions[0x8c] = STY(absoluteWrite);\n    opcodes[0x8d] = \"STA\";  instructions[0x8d] = STA(absoluteWrite);\n    opcodes[0x8e] = \"STX\";  instructions[0x8e] = STX(absoluteWrite);\n    opcodes[0x8f] = \"uSAX\"; instructions[0x8f] = uSAX(absoluteWrite);\n    opcodes[0x90] = \"BCC\";  instructions[0x90] = Bxx(bC, 0);                 // BCC\n    opcodes[0x91] = \"STA\";  instructions[0x91] = STA(indirectYWrite);\n    opcodes[0x92] = \"uKIL\"; instructions[0x92] = uKIL();\n    opcodes[0x93] = \"uSHA\"; instructions[0x93] = uSHA(indirectYWrite);\n    opcodes[0x94] = \"STY\";  instructions[0x94] = STY(zeroPageIndexedWrite(rX));\n    opcodes[0x95] = \"STA\";  instructions[0x95] = STA(zeroPageIndexedWrite(rX));\n    opcodes[0x96] = \"STX\";  instructions[0x96] = STX(zeroPageIndexedWrite(rY));\n    opcodes[0x97] = \"uSAX\"; instructions[0x97] = uSAX(zeroPageIndexedWrite(rY));\n    opcodes[0x98] = \"TYA\";  instructions[0x98] = TYA();\n    opcodes[0x99] = \"STA\";  instructions[0x99] = STA(absoluteIndexedWrite(rY));\n    opcodes[0x9a] = \"TXS\";  instructions[0x9a] = TXS();\n    opcodes[0x9b] = \"uSHS\"; instructions[0x9b] = uSHS(absoluteIndexedWrite(rY));\n    opcodes[0x9c] = \"uSHY\"; instructions[0x9c] = uSHY(absoluteIndexedWrite(rX));\n    opcodes[0x9d] = \"STA\";  instructions[0x9d] = STA(absoluteIndexedWrite(rX));\n    opcodes[0x9e] = \"uSHX\"; instructions[0x9e] = uSHX(absoluteIndexedWrite(rY));\n    opcodes[0x9f] = \"uSHA\"; instructions[0x9f] = uSHA(absoluteIndexedWrite(rY));\n    opcodes[0xa0] = \"LDY\";  instructions[0xa0] = LDY(immediateRead);\n    opcodes[0xa1] = \"LDA\";  instructions[0xa1] = LDA(indirectXRead);\n    opcodes[0xa2] = \"LDX\";  instructions[0xa2] = LDX(immediateRead);\n    opcodes[0xa3] = \"uLAX\"; instructions[0xa3] = uLAX(indirectXRead);\n    opcodes[0xa4] = \"LDY\";  instructions[0xa4] = LDY(zeroPageRead);\n    opcodes[0xa5] = \"LDA\";  instructions[0xa5] = LDA(zeroPageRead);\n    opcodes[0xa6] = \"LDX\";  instructions[0xa6] = LDX(zeroPageRead);\n    opcodes[0xa7] = \"uLAX\"; instructions[0xa7] = uLAX(zeroPageRead);\n    opcodes[0xa8] = \"TAY\";  instructions[0xa8] = TAY();\n    opcodes[0xa9] = \"LDA\";  instructions[0xa9] = LDA(immediateRead);\n    opcodes[0xaa] = \"TAX\";  instructions[0xaa] = TAX();\n    opcodes[0xab] = \"uLXA\"; instructions[0xab] = uLXA(immediateRead);\n    opcodes[0xac] = \"LDY\";  instructions[0xac] = LDY(absoluteRead);\n    opcodes[0xad] = \"LDA\";  instructions[0xad] = LDA(absoluteRead);\n    opcodes[0xae] = \"LDX\";  instructions[0xae] = LDX(absoluteRead);\n    opcodes[0xaf] = \"uLAX\"; instructions[0xaf] = uLAX(absoluteRead);\n    opcodes[0xb0] = \"BCS\";  instructions[0xb0] = Bxx(bC, 1);                 // BCS\n    opcodes[0xb1] = \"LDA\";  instructions[0xb1] = LDA(indirectYRead);\n    opcodes[0xb2] = \"uKIL\"; instructions[0xb2] = uKIL();\n    opcodes[0xb3] = \"uLAX\"; instructions[0xb3] = uLAX(indirectYRead);\n    opcodes[0xb4] = \"LDY\";  instructions[0xb4] = LDY(zeroPageIndexedRead(rX));\n    opcodes[0xb5] = \"LDA\";  instructions[0xb5] = LDA(zeroPageIndexedRead(rX));\n    opcodes[0xb6] = \"LDX\";  instructions[0xb6] = LDX(zeroPageIndexedRead(rY));\n    opcodes[0xb7] = \"uLAX\"; instructions[0xb7] = uLAX(zeroPageIndexedRead(rY));\n    opcodes[0xb8] = \"CLV\";  instructions[0xb8] = CLV();\n    opcodes[0xb9] = \"LDA\";  instructions[0xb9] = LDA(absoluteIndexedRead(rY));\n    opcodes[0xba] = \"TSX\";  instructions[0xba] = TSX();\n    opcodes[0xbb] = \"uLAS\"; instructions[0xbb] = uLAS(absoluteIndexedRead(rY));\n    opcodes[0xbc] = \"LDY\";  instructions[0xbc] = LDY(absoluteIndexedRead(rX));\n    opcodes[0xbd] = \"LDA\";  instructions[0xbd] = LDA(absoluteIndexedRead(rX));\n    opcodes[0xbe] = \"LDX\";  instructions[0xbe] = LDX(absoluteIndexedRead(rY));\n    opcodes[0xbf] = \"uLAX\"; instructions[0xbf] = uLAX(absoluteIndexedRead(rY));\n    opcodes[0xc0] = \"CPY\";  instructions[0xc0] = CPY(immediateRead);\n    opcodes[0xc1] = \"CMP\";  instructions[0xc1] = CMP(indirectXRead);\n    opcodes[0xc2] = \"uNOP\"; instructions[0xc2] = uNOP(immediateRead);\n    opcodes[0xc3] = \"uDCP\"; instructions[0xc3] = uDCP(indirectXReadModifyWrite);\n    opcodes[0xc4] = \"CPY\";  instructions[0xc4] = CPY(zeroPageRead);\n    opcodes[0xc5] = \"CMP\";  instructions[0xc5] = CMP(zeroPageRead);\n    opcodes[0xc6] = \"DEC\";  instructions[0xc6] = DEC(zeroPageReadModifyWrite);\n    opcodes[0xc7] = \"uDCP\"; instructions[0xc7] = uDCP(zeroPageReadModifyWrite);\n    opcodes[0xc8] = \"INY\";  instructions[0xc8] = INY();\n    opcodes[0xc9] = \"CMP\";  instructions[0xc9] = CMP(immediateRead);\n    opcodes[0xca] = \"DEX\";  instructions[0xca] = DEX();\n    opcodes[0xcb] = \"uSBX\"; instructions[0xcb] = uSBX(immediateRead);\n    opcodes[0xcc] = \"CPY\";  instructions[0xcc] = CPY(absoluteRead);\n    opcodes[0xcd] = \"CMP\";  instructions[0xcd] = CMP(absoluteRead);\n    opcodes[0xce] = \"DEC\";  instructions[0xce] = DEC(absoluteReadModifyWrite);\n    opcodes[0xcf] = \"uDCP\"; instructions[0xcf] = uDCP(absoluteReadModifyWrite);\n    opcodes[0xd0] = \"BNE\";  instructions[0xd0] = Bxx(bZ, 0);                 // BNE\n    opcodes[0xd1] = \"CMP\";  instructions[0xd1] = CMP(indirectYRead);\n    opcodes[0xd2] = \"uKIL\"; instructions[0xd2] = uKIL();\n    opcodes[0xd3] = \"uDCP\"; instructions[0xd3] = uDCP(indirectYReadModifyWrite);\n    opcodes[0xd4] = \"uNOP\"; instructions[0xd4] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0xd5] = \"CMP\";  instructions[0xd5] = CMP(zeroPageIndexedRead(rX));\n    opcodes[0xd6] = \"DEC\";  instructions[0xd6] = DEC(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xd7] = \"uDCP\"; instructions[0xd7] = uDCP(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xd8] = \"CLD\";  instructions[0xd8] = CLD();\n    opcodes[0xd9] = \"CMP\";  instructions[0xd9] = CMP(absoluteIndexedRead(rY));\n    opcodes[0xda] = \"uNOP\"; instructions[0xda] = uNOP(implied);\n    opcodes[0xdb] = \"uDCP\"; instructions[0xdb] = uDCP(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0xdc] = \"uNOP\"; instructions[0xdc] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0xdd] = \"CMP\";  instructions[0xdd] = CMP(absoluteIndexedRead(rX));\n    opcodes[0xde] = \"DEC\";  instructions[0xde] = DEC(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0xdf] = \"uDCP\"; instructions[0xdf] = uDCP(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0xe0] = \"CPX\";  instructions[0xe0] = CPX(immediateRead);\n    opcodes[0xe1] = \"SBC\";  instructions[0xe1] = SBC(indirectXRead);\n    opcodes[0xe2] = \"uNOP\"; instructions[0xe2] = uNOP(immediateRead);\n    opcodes[0xe3] = \"uISB\"; instructions[0xe3] = uISB(indirectXReadModifyWrite);\n    opcodes[0xe4] = \"CPX\";  instructions[0xe4] = CPX(zeroPageRead);\n    opcodes[0xe5] = \"SBC\";  instructions[0xe5] = SBC(zeroPageRead);\n    opcodes[0xe6] = \"INC\";  instructions[0xe6] = INC(zeroPageReadModifyWrite);\n    opcodes[0xe7] = \"uISB\"; instructions[0xe7] = uISB(zeroPageReadModifyWrite);\n    opcodes[0xe8] = \"INX\";  instructions[0xe8] = INX();\n    opcodes[0xe9] = \"SBC\";  instructions[0xe9] = SBC(immediateRead);\n    opcodes[0xea] = \"NOP\";  instructions[0xea] = NOP();\n    opcodes[0xeb] = \"SBC\";  instructions[0xeb] = SBC(immediateRead);\n    opcodes[0xec] = \"CPX\";  instructions[0xec] = CPX(absoluteRead);\n    opcodes[0xed] = \"SBC\";  instructions[0xed] = SBC(absoluteRead);\n    opcodes[0xee] = \"INC\";  instructions[0xee] = INC(absoluteReadModifyWrite);\n    opcodes[0xef] = \"uISB\"; instructions[0xef] = uISB(absoluteReadModifyWrite);\n    opcodes[0xf0] = \"BEQ\";  instructions[0xf0] = Bxx(bZ, 1);                 // BEQ\n    opcodes[0xf1] = \"SBC\";  instructions[0xf1] = SBC(indirectYRead);\n    opcodes[0xf2] = \"uKIL\"; instructions[0xf2] = uKIL();\n    opcodes[0xf3] = \"uISB\"; instructions[0xf3] = uISB(indirectYReadModifyWrite);\n    opcodes[0xf4] = \"uNOP\"; instructions[0xf4] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0xf5] = \"SBC\";  instructions[0xf5] = SBC(zeroPageIndexedRead(rX));\n    opcodes[0xf6] = \"INC\";  instructions[0xf6] = INC(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xf7] = \"uISB\"; instructions[0xf7] = uISB(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xf8] = \"SED\";  instructions[0xf8] = SED();\n    opcodes[0xf9] = \"SBC\";  instructions[0xf9] = SBC(absoluteIndexedRead(rY));\n    opcodes[0xfa] = \"uNOP\"; instructions[0xfa] = uNOP(implied);\n    opcodes[0xfb] = \"uISB\"; instructions[0xfb] = uISB(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0xfc] = \"uNOP\"; instructions[0xfc] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0xfd] = \"SBC\";  instructions[0xfd] = SBC(absoluteIndexedRead(rX));\n    opcodes[0xfe] = \"INC\";  instructions[0xfe] = INC(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0xff] = \"uISB\"; instructions[0xff] = uISB(absoluteIndexedReadModifyWrite(rX));\n\n\n    // Single Byte instructions\n\n    function ASL_ACC() {\n        return implied(function() {\n            setC(A > 127);\n            A = (A << 1) & 255;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function CLC() {\n        return implied(function() {\n            C = 0;\n        });\n    }\n\n    function CLD() {\n        return implied(function() {\n            D = 0;\n        });\n    }\n\n    function CLI() {\n        return implied(function() {\n            I = 0;\n        });\n    }\n\n    function CLV() {\n        return implied(function() {\n            V = 0;\n        });\n    }\n\n    function DEX() {\n        return implied(function() {\n            X = (X - 1) & 255;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function DEY() {\n        return implied(function() {\n            Y = (Y - 1) & 255;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function INX() {\n        return implied(function() {\n            X = (X + 1) & 255;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function INY() {\n        return implied(function() {\n            Y = (Y + 1) & 255;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function LSR_ACC() {\n        return implied(function() {\n            C = A & 0x01;\n            A >>>= 1;\n            setZ(A);\n            N = 0;\n        });\n    }\n\n    function NOP() {\n        return implied(function() {\n            // nothing\n        });\n    }\n\n    function ROL_ACC() {\n        return implied(function() {\n            var newC = A > 127;\n            A = ((A << 1) | C) & 255;\n            setC(newC);\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function ROR_ACC() {\n        return implied(function() {\n            var newC = A & 0x01;\n            A = (A >>> 1) | (C << 7);\n            setC(newC);\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function SEC() {\n        return implied(function() {\n            C = 1;\n        });\n    }\n\n    function SED() {\n        return implied(function() {\n            D = 1;\n        });\n    }\n\n    function SEI() {\n        return implied(function() {\n            I = 1;\n        });\n    }\n\n    function TAX() {\n        return implied(function() {\n            X = A;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function TAY() {\n        return implied(function() {\n            Y = A;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function TSX() {\n        return implied(function() {\n            X = SP;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function TXA() {\n        return implied(function() {\n            A = X;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function TXS() {\n        return implied(function() {\n            SP = X;\n        });\n    }\n\n    function TYA() {\n        return implied(function() {\n            A = Y;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function uKIL() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            function() {\n                illegalOpcode(\"KIL/HLT/JAM\");\n            },\n            function() {\n                T--;        // Causes the processor to be stuck in this instruction forever\n            }\n        ];\n    }\n\n    function uNOP(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"NOP/DOP\");\n            // nothing\n        });\n    }\n\n\n    // Internal Execution on Memory Data\n\n    function ADC(addressing) {\n        return addressing(function() {\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) + (operand & 15) + C;\n                if (AL > 9) { AL += 6; }\n                var AH = ((A >> 4) + (operand >> 4) + ((AL > 15)?1:0)) << 4;\n                setZ((A + operand + C) & 255);\n                setN(AH);\n                setV(((A ^AH) & ~(A ^ operand)) & 128);\n                if (AH > 0x9f) { AH += 0x60; }\n                setC(AH > 255);\n                A = (AH | (AL & 15)) & 255;\n            } else {\n                var add = A + data + C;\n                setC(add > 255);\n                setV(((A ^ add) & (data ^ add)) & 0x80);\n                A = add & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function AND(addressing) {\n        return addressing(function() {\n            A &= data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function BIT(addressing) {\n        return addressing(function() {\n            var par = data;\n            setZ(A & par);\n            setV(par & 0x40);\n            setN(par);\n        });\n    }\n\n    function CMP(addressing) {\n        return addressing(function() {\n            var val = (A - data) & 255;\n            setC(A >= data);\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function CPX(addressing) {\n        return addressing(function() {\n            var val = (X - data) & 255;\n            setC(X >= data);\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function CPY(addressing) {\n        return addressing(function() {\n            var val = (Y - data) & 255;\n            setC(Y >= data);\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function EOR(addressing) {\n        return addressing(function() {\n            A ^= data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function LDA(addressing) {\n        return addressing(function() {\n            A = data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function LDX(addressing) {\n        return addressing(function() {\n            X = data;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function LDY(addressing) {\n        return addressing(function() {\n            Y = data;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function ORA(addressing) {\n        return addressing(function() {\n            A |= data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function SBC(addressing) {\n        return addressing(function() {\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) - (operand & 15) - (1-C);\n                var AH = (A >> 4) - (operand >> 4) - ((AL < 0)?1:0);\n                if (AL < 0) { AL -= 6; }\n                if (AH < 0) { AH -= 6; }\n                var sub = A - operand - (1-C);\n                setC(~sub & 256);\n                setV(((A ^ operand) & (A ^ sub)) & 128);\n                setZ(sub & 255);\n                setN(sub);\n                A = ((AH << 4) | (AL & 15)) & 255;\n            } else {\n                operand = (~data) & 255;\n                sub = A + operand + C;\n                setC(sub > 255);\n                setV(((A ^ sub) & (operand ^ sub) & 0x80));\n                A = sub & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function uANC(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ANC\");\n            A &= data;\n            setZ(A);\n            N = C = (A & 0x080) ? 1 : 0;\n        });\n    }\n\n    function uANE(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ANE\");\n            // Exact operation unknown. Do nothing\n        });\n    }\n\n    function uARR(addressing) {\n        // Some sources say flags are affected per ROR, others say its more complex. The complex one is chosen\n        return addressing(function() {\n            illegalOpcode(\"ARR\");\n            var val = A & data;\n            var oldC = C ? 0x80 : 0;\n            val = (val >>> 1) | oldC;\n            A = val;\n            setZ(val);\n            setN(val);\n            var comp = A & 0x60;\n            if (comp == 0x60) \t\t{ C = 1; V = 0; }\n            else if (comp == 0x00) \t{ C = 0; V = 0; }\n            else if (comp == 0x20) \t{ C = 0; V = 1; }\n            else if (comp == 0x40) \t{ C = 1; V = 1; }\n        });\n    }\n\n    function uASR(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ASR\");\n            var val = A & data;\n            C = (val & 0x01);\t\t// bit 0\n            val = val >>> 1;\n            A = val;\n            setZ(val);\n            N = 0;\n        });\n    }\n\n    function uLAS(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"LAS\");\n            var val = SP & data;\n            A = val;\n            X = val;\n            SP = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uLAX(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"LAX\");\n            var val = data;\n            A = val;\n            X = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uLXA(addressing) {\n        return addressing(function() {\n            // Some sources say its an OR with $EE then AND with IMM, others exclude the OR,\n            // others exclude both the OR and the AND. Excluding just the OR...\n            illegalOpcode(\"LXA\");\n            var val = A /* | 0xEE) */ & data;\n            A = val;\n            X = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uSBX(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SBX\");\n            var par = A & X;\n            var val = data;\n            var newX = (par - val) & 255;\n            X = newX;\n            setC(par >= val);\n            setZ(newX);\n            setN(newX);\n        });\n    }\n\n\n    // Store operations\n\n    function STA(addressing) {\n        return addressing(function() {\n            data = A;\n        });\n    }\n\n    function STX(addressing) {\n        return addressing(function() {\n            data = X;\n        });\n    }\n\n    function STY(addressing) {\n        return addressing(function() {\n            data = Y;\n        });\n    }\n\n    function uSAX(addressing) {\n        return addressing(function() {\n            // Some sources say it would affect N and Z flags, some say it wouldn't. Chose not to affect\n            illegalOpcode(\"SAX\");\n            data = A & X;\n        });\n    }\n\n    function uSHA(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHA\");\n            data = A & X & ((BA >>> 8) + 1) & 255; // A & X & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n    function uSHS(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHS\");\n            var val = A & X;\n            SP = val;\n            data = val & ((BA >>> 8) + 1) & 255; // A & X & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n    function uSHX(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHX\");\n            data = X & ((BA >>> 8) + 1) & 255; // X & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n    function uSHY(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHY\");\n            data = Y & ((BA >>> 8) + 1) & 255; // Y & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n\n    // Read-Modify-Write operations\n\n    function ASL(addressing) {\n        return addressing(function() {\n            setC(data > 127);\n            var par = (data << 1) & 255;\n            data = par;\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function DEC(addressing) {\n        return addressing(function() {\n            var par = (data - 1) & 255;\n            data = par;\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function INC(addressing) {\n        return addressing(function() {\n            var par = (data + 1) & 255;\n            data = par;\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function LSR(addressing) {\n        return addressing(function() {\n            C = data & 0x01;\n            data >>>= 1;\n            setZ(data);\n            N = 0;\n        });\n    }\n\n    function ROL(addressing) {\n        return addressing(function() {\n            var newC = data > 127;\n            var par = ((data << 1) | C) & 255;\n            data = par;\n            setC(newC);\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function ROR(addressing) {\n        return addressing(function() {\n            var newC = data & 0x01;\n            var par = (data >>> 1) | (C << 7);\n            data = par;\n            setC(newC);\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function uDCP(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"DCP\");\n            var par = (data - 1) & 255;\n            data = par;\n            par = A - par;\n            setC(par >= 0);\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function uISB(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ISB\");\n            data = (data + 1) & 255;    // ISB is the same as SBC but incs the operand first\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) - (operand & 15) - (1-C);\n                var AH = (A >> 4) - (operand >> 4) - ((AL < 0)?1:0);\n                if (AL < 0) { AL -= 6; }\n                if (AH < 0) { AH -= 6; }\n                var sub = A - operand - (1-C);\n                setC(~sub & 256);\n                setV(((A ^ operand) & (A ^ sub)) & 128);\n                setZ(sub & 255);\n                setN(sub);\n                A = ((AH << 4) | (AL & 15)) & 255;\n            } else {\n                operand = (~data) & 255;\n                sub = A + operand + C;\n                setC(sub > 255);\n                setV(((A ^ sub) & (operand ^ sub) & 0x80));\n                A = sub & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function uRLA(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"RLA\");\n            var val = data;\n            var oldC = C;\n            setC(val & 0x80);\t\t// bit 7 was set\n            val = ((val << 1) | oldC) & 255;\n            data = val;\n            A &= val;\n            setZ(val);              // TODO Verify. May be A instead of val in the flags setting\n            setN(val);\n        });\n    }\n\n    function uRRA(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"RRA\");\n            var val = data;\n            var oldC = C ? 0x80 : 0;\n            setC(val & 0x01);\t\t// bit 0 was set\n            val = (val >>> 1) | oldC;\n            data = val;\n            // RRA is the same as ADC from here\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) + (operand & 15) + C;\n                if (AL > 9) { AL += 6; }\n                var AH = ((A >> 4) + (operand >> 4) + ((AL > 15)?1:0)) << 4;\n                setZ((A + operand + C) & 255);\n                setN(AH);\n                setV(((A ^AH) & ~(A ^ operand)) & 128);\n                if (AH > 0x9f) { AH += 0x60; }\n                setC(AH > 255);\n                A = (AH | (AL & 15)) & 255;\n            } else {\n                var add = A + data + C;\n                setC(add > 255);\n                setV(((A ^ add) & (data ^ add)) & 0x80);\n                A = add & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function uSLO(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SLO\");\n            var val = data;\n            setC(val & 0x80);\t\t// bit 7 was set\n            val = (val << 1) & 255;\n            data = val;\n            val = A | val;\n            A = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uSRE(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SRE\");\n            var val = data;\n            setC(val & 0x01);\t\t// bit 0 was set\n            val = val >>> 1;\n            data = val;\n            val = (A ^ val) & 255;\n            A = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n\n    // Miscellaneous operations\n\n    function PHA() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            function() { pushToStack(A); },\n            fetchNextOpcode\n        ];\n    }\n\n    function PHP() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            function() { pushToStack(getStatusBits()); },\n            fetchNextOpcode\n        ];\n    }\n\n    function PLA() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() {\n                A = popFromStack();\n                setZ(A);\n                setN(A);\n            },\n            fetchNextOpcode\n        ];\n    }\n\n    function PLP() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() { setStatusBits(popFromStack()); },\n            fetchNextOpcode\n        ];\n    }\n\n    function JSR() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            peekFromStack,\n            function() { pushToStack((PC >>> 8)  & 0xff); },\n            function() { pushToStack(PC & 0xff); },\n            fetchADH,\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function BRK() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,                 // For debugging purposes, use operand as an arg for BRK!\n            function() {\n                if (self.debug) self.breakpoint(\"BRK \" + data);\n                pushToStack((PC >>> 8) & 0xff);\n            },\n            function() { pushToStack(PC & 0xff); },\n            function() { pushToStack(getStatusBits()); }, // set B flag\n            function() { AD = bus.read(IRQ_VECTOR); },\n            function() { AD |= bus.read(IRQ_VECTOR + 1) << 8; },\n            function() { PC = AD; I = 1; fetchNextOpcode(); }\n        ];\n    }\n\n    function IRQ() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,                 // For debugging purposes, use operand as an arg for BRK!\n            function() {\n                if (self.debug) self.breakpoint(\"IRQ \" + data);\n                pushToStack((PC >>> 8) & 0xff);\n            },\n            function() { pushToStack(PC & 0xff); },\n            function() { pushToStack(getStatusBits()); },\n            function() { AD = bus.read(IRQ_VECTOR); },\n            function() { AD |= bus.read(IRQ_VECTOR + 1) << 8; },\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function NMI() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,\n            function() {\n                if (self.debug) self.breakpoint(\"NMI \" + data);\n                pushToStack((PC >>> 8) & 0xff);\n            },\n            function() { pushToStack(PC & 0xff); },\n            function() { pushToStack(getStatusBits()); },\n            function() { AD = bus.read(NMI_VECTOR); },\n            function() { AD |= bus.read(NMI_VECTOR + 1) << 8; },\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function RTI() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() { setStatusBits(popFromStack()); },\n            function() { AD = popFromStack(); },\n            function() { AD |= popFromStack() << 8; },\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function RTS() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() { AD = popFromStack(); },\n            function() { AD |= popFromStack() << 8; },\n            function() { PC = AD; fetchDataFromImmediate(); },\n            fetchNextOpcode\n        ];\n    }\n\n    function JMP_ABS() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function JMP_IND() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchIAH,\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() { PC = BA; fetchNextOpcode(); }\n        ];\n    }\n\n    function Bxx(reg, cond) {\n        var branchTaken;\n        if      (reg === bZ) branchTaken = function() { return Z === cond; };\n        else if (reg === bN) branchTaken = function() { return N === cond; };\n        else if (reg === bC) branchTaken = function() { return C === cond; };\n        else                 branchTaken = function() { return V === cond; };\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBranchOffset,\n            function() {\n                if (branchTaken()) {\n                    fetchOpcodeAndDiscard();\n                    addBranchOffsetToPCL();\n                } else {\n                    fetchNextOpcode();\n                }\n            },\n            function() {\n                if(branchOffsetCrossAdjust) {\n                    fetchOpcodeAndDiscard();\n                    adjustPCHForBranchOffsetCross();\n                } else {\n                    fetchNextOpcode();\n                }\n            },\n            fetchNextOpcode\n        ];\n    }\n\n\n    // Savestate  -------------------------------------------\n\n    this.saveState = function():MOS6502State {\n        return {\n            PC: (PC-1) & 0xffff,\n            A: A, X: X, Y: Y, SP: SP,\n            N: N, V: V, D: D, I: I, Z: Z, C: C,\n            T: T, o: opcode, R: RDY?1:0,\n            d: data, AD: AD, BA: BA, BC: BALCrossed?1:0, IA: IA,\n            bo: branchOffset, boa: branchOffsetCrossAdjust\n        };\n    };\n\n    this.loadState = function(state:MOS6502State) {\n        PC = (state.PC+1) & 0xffff;\n        A = state.A; X = state.X; Y = state.Y; SP = state.SP;\n        N = state.N; V = state.V; D = state.D; I = state.I; Z = state.Z; C = state.C;\n        T = state.T; opcode = state.o; RDY = !!state.R;\n        data = state.d; AD = state.AD; BA = state.BA; BALCrossed = !!state.BC; IA = state.IA;\n        branchOffset = state.bo; branchOffsetCrossAdjust = state.boa;\n        instruction = opcode < 0 ? [ fetchOpcodeAndDecodeInstruction ] : instructions[opcode];\n    };\n\n\n    // Accessory methods\n\n    this.toString = function() {\n        return \"CPU \" +\n            \" PC: \" + PC.toString(16) + \"  op: \" + opcode.toString() + \"  T: \" + T + \"  data: \" + data + \"\\n\" +\n            \" A: \" + A.toString(16) + \"  X: \" + X.toString(16) + \"  Y: \" + Y.toString(16) + \"  SP: \" + SP.toString(16) + \"     \" +\n            \"N\" + N + \"  \" + \"V\" + V + \"  \" + \"D\" + D + \"  \" + \"I\" + I + \"  \" + \"Z\" + Z + \"  \" + \"C\" + C + \"  \";\n    };\n\n    this.breakpoint = function(mes) {\n        //jt.Util.log(mes);\n        if (this.trace) {\n            var text = \"CPU Breakpoint!  \" + (mes ? \"(\" + mes + \")\" : \"\") + \"\\n\\n\" + this.toString();\n            //jt.Util.message(text);\n        }\n    };\n\n    var cycletime = [\n      7, 6, 0, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      6, 6, 0, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      6, 6, 0, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      6, 6, 0, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      0, 6, 0, 6, 3, 3, 3, 3, 2, 0, 2, 0, 4, 4, 4, 4,\n      2, 6, 0, 0, 4, 4, 4, 4, 2, 5, 2, 0, 0, 5, 0, 0,\n      2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 0, 4, 4, 4, 4,\n      2, 5, 0, 5, 4, 4, 4, 4, 2, 4, 2, 0, 4, 4, 4, 4,\n      2, 6, 0, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 3, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      2, 6, 0, 8, 3, 3, 5, 5, 2, 2, 2, 0, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7\n    ];\n\n    var extracycles = [\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1\n    ];\n\n    var insnlengths = [\n      1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      3, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      0, 2, 0, 2, 2, 2, 2, 2, 1, 0, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 0, 2, 2, 2, 3, 1, 3, 1, 0, 0, 3, 0, 0,\n      2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3\n    ];\n\n    var validinsns = [\n      1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      3, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 0, 3, 0, 0,\n      2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0\n    ];\n\n    this.getOpcodeMetadata = function(opcode, address) {\n      // TODO: more intelligent maximum cycles\n      //var i = instructions[opcode];\n      return {\n        opcode:opcode,\n        mnenomic:opcodes[opcode],\n        minCycles:cycletime[opcode],\n        maxCycles:cycletime[opcode] + extracycles[opcode],\n        insnlength:insnlengths[opcode]\n      };\n    }\n\n    // only call when isPCStable() is true\n    this.setNMI = function() {\n      instruction = NMI();\n      T = 1;\n      PC = (PC-1) & 0xffff;\n    }\n    this.setIRQ = function() {\n      instruction = IRQ();\n      T = 1;\n      PC = (PC-1) & 0xffff;\n    }\n\n    this.getSP = function() { return SP; }\n    this.getPC = function() { return (PC-1) & 0xffff; }\n    this.getT = function() { return T; }\n    \n    this.isPCStable = function() {\n      return T == 0;\n    }\n};\n\nexport interface MOS6502State {\nPC : number;\nSP : number;\nA : number;\nX : number;\nY : number;\nN : number;\nV : number;\nD : number;\nI : number;\nZ : number;\nC : number;\nT : number;\no : number;\nR : number;\nd : number;\nAD : number;\nBA : number;\nBC : number;\nIA : number;\nbo : number;\nboa : number;\n}\n\nexport enum MOS6502Interrupts { None=0, NMI=1, IRQ=2 };\n\nexport class MOS6502 implements CPU, ClockBased, SavesState<MOS6502State>, Interruptable<MOS6502Interrupts> {\n\n  cpu = new _MOS6502();\n  interruptType : MOS6502Interrupts = MOS6502Interrupts.None;\n  \n  connectMemoryBus(bus:Bus) {\n    this.cpu.connectBus(bus);\n  }\n  advanceClock() {\n    if (this.interruptType && this.isStable()) {\n      switch (this.interruptType) {\n        case MOS6502Interrupts.NMI: this.cpu.setNMI(); break;\n        case MOS6502Interrupts.IRQ: this.cpu.setIRQ(); break;\n      }\n      this.interruptType = 0;\n    }\n    this.cpu.clockPulse();\n  }\n  advanceInsn() {\n    do {\n      this.advanceClock();\n    } while (!this.isStable());\n  }\n  reset() {\n    this.cpu.reset();\n    this.interruptType = 0;\n  }\n  interrupt(itype:number) {\n    this.interruptType = itype;\n  }\n  NMI() {\n    this.interrupt(MOS6502Interrupts.NMI);\n  }\n  IRQ() {\n    this.interrupt(MOS6502Interrupts.IRQ);\n  }\n  getSP() {\n    return this.cpu.getSP();\n  }\n  getPC() {\n    return this.cpu.getPC();\n  }\n  saveState() {\n    var s = this.cpu.saveState();\n    s.it = this.interruptType;\n    return s;\n  }\n  loadState(s) {\n    this.cpu.loadState(s);\n    this.interruptType = s.it;\n  }\n  isStable() : boolean {\n    return this.cpu.isPCStable();\n  }\n  // TODO: metadata\n  // TODO: disassembler\n}\n"],
  "mappings": "AAKA,GAAI,IAAW,UAAW,CACtB,GAAI,GAAO,KAEX,KAAK,QAAU,UAAW,CACtB,KAAK,SAGT,KAAK,SAAW,UAAW,GAG3B,KAAK,WAAa,UAAW,CACzB,AAAI,CAAC,IACL,KACA,GAAY,OAGhB,KAAK,WAAa,SAAS,EAAM,CAC7B,EAAM,GAGV,KAAK,OAAS,SAAS,EAAK,CACxB,GAAM,GAGV,KAAK,MAAQ,UAAW,CACpB,MAAO,KAGX,KAAK,MAAQ,UAAW,CACpB,EAAI,EACJ,EAAI,GACJ,GAAc,CAAE,GAChB,EAAK,EAAI,KAAK,IAAiB,EAAI,KAAK,GAAe,IAAM,EAC7D,KAAK,OAAO,KAIhB,GAAI,GACA,GAAgB,GAGhB,EAAc,EACd,EAAc,EACd,EAAa,EACb,EAAa,EACb,EAAa,EAGb,EAAa,EACb,EAAa,EACb,EAAa,EACb,EAAa,EACb,GAAa,EACb,EAAa,EAGb,EAAa,GACb,GAAkB,GAClB,GACA,EAAgB,EAChB,EAAc,EACd,EAAc,EACd,GAAuB,GACvB,EAAc,EACd,GAAwB,EACxB,GAAmC,EAGvC,GAAM,IAAa,MACb,GAAe,MACf,GAAa,MAGb,EAAK,EACL,EAAK,EAGL,GAAK,EACL,GAAK,EAKL,GAAK,EACL,GAAK,EAKX,KAAK,MAAQ,GAEb,KAAK,MAAQ,GAKb,GAAI,GAAkC,UAAW,CAC7C,GAAS,EAAI,KAAK,GAClB,GAAc,EAAa,IAC3B,EAAI,EAKJ,KAGA,EAAkB,EAElB,EAAwB,UAAW,CACnC,EAAI,KAAK,IAGT,GAAoB,UAAW,CAC/B,GAAe,EAAI,KAAK,GACxB,KAGA,GAAW,UAAW,CACtB,EAAK,EAAI,KAAK,GACd,KAGA,GAAW,UAAW,CACtB,GAAM,EAAI,KAAK,IAAO,EACtB,KAGA,GAAiB,UAAW,CAC5B,EAAK,EAAI,KAAK,IAGd,GAAiB,UAAW,CAC5B,GAAM,EAAI,KAAK,IAAO,GAGtB,EAAW,UAAW,CACtB,EAAK,EAAI,KAAK,GACd,KAGA,GAAW,UAAW,CACtB,GAAM,EAAI,KAAK,IAAO,EACtB,KAGA,GAAiB,UAAW,CAC5B,EAAK,EAAI,KAAK,IAGd,GAAiB,UAAW,CAC5B,GAAM,EAAI,KAAK,IAAO,GAGtB,EAAY,UAAW,CACvB,GAAI,GAAO,GAAK,KAAO,EACvB,GAAa,EAAM,IACnB,EAAM,EAAK,MAAW,EAAM,KAG5B,EAAY,UAAW,CACvB,GAAI,GAAO,GAAK,KAAO,EACvB,GAAa,EAAM,IACnB,EAAM,EAAK,MAAW,EAAM,KAG5B,GAAY,UAAW,CACvB,GAAI,GAAO,GAAK,KAAO,EACvB,GAAa,EAAM,IACnB,EAAM,EAAK,MAAW,EAAM,KAG5B,GAAwB,UAAW,CACnC,AAAI,IACA,GAAM,EAAK,IAAU,QAGzB,GAAW,UAAW,CACtB,EAAK,EAAI,KAAK,GACd,KAGA,GAAW,UAAW,CACtB,GAAM,EAAI,KAAK,IAAO,EACtB,KAGA,GAAY,UAAW,CACvB,GAAI,GAAO,GAAK,KAAO,EACvB,EAAM,EAAK,MAAW,EAAM,KAG5B,GAAyB,UAAW,CACpC,EAAO,EAAI,KAAK,GAChB,KAGA,GAAkB,UAAW,CAC7B,EAAO,EAAI,KAAK,IAGhB,EAAkB,UAAW,CAC7B,EAAO,EAAI,KAAK,IAGhB,EAAgB,UAAW,CAC3B,EAAI,MAAM,EAAI,IAGd,EAAgB,UAAW,CAC3B,EAAI,MAAM,EAAI,IAGd,GAAuB,UAAW,CAClC,GAAI,GAAU,EAAK,IACf,EAAU,EAAS,GAAgB,IAEvC,AAAI,GAAe,IACf,GAA2B,EAAS,EAAU,KAAU,EAExD,GAA2B,EAAS,EAAU,IAAS,EAC3D,EAAM,EAAK,MAAU,GAGrB,GAAgC,UAAW,CAC3C,EAAM,EAAK,GAA2B,OAGtC,EAAO,SAAS,EAAK,CACrB,GAAK,IAAQ,EAAK,EAAI,GAGtB,EAAO,SAAS,EAAK,CACrB,EAAK,EAAM,IAAS,EAAI,GAGxB,EAAO,SAAS,EAAK,CACrB,EAAI,EAAM,EAAI,GAGd,EAAO,SAAS,EAAK,CACrB,EAAI,EAAM,EAAI,GAGd,GAAe,UAAW,CAC1B,SAAM,EAAK,EAAK,IACT,EAAI,KAAK,IAAS,IAGzB,GAAgB,UAAW,CAC3B,MAAO,GAAI,KAAK,IAAS,IAGzB,EAAc,SAAS,EAAK,CAC5B,EAAI,MAAM,IAAS,EAAI,GACvB,EAAM,EAAK,EAAK,KAGhB,GAAgB,UAAW,CAC3B,MAAO,IAAK,EAAI,GAAK,EAAI,GAClB,GAAK,EAAI,GAAK,EAAI,IAAK,EAAI,GAGlC,GAAgB,SAAS,EAAK,CAC9B,EAAI,IAAQ,EAAG,EAAI,IAAQ,EAAI,EAC/B,EAAI,IAAQ,EAAI,EAAG,EAAI,IAAQ,EAAI,EAAG,GAAI,IAAQ,EAAI,EAAG,EAAI,EAAM,GAGnE,EAAgB,SAAS,EAAI,CAC7B,AAAI,EAAK,OAAO,EAAK,WAAW,mBAAqB,IAMrD,EAAU,SAAS,EAAW,CAC9B,MAAO,CACH,EACA,EACA,UAAW,CACP,IACA,OAKR,EAAgB,SAAS,EAAW,CACpC,MAAO,CACH,EACA,GACA,UAAW,CACP,IACA,OAKR,EAAe,SAAS,EAAW,CACnC,MAAO,CACH,EACA,GACA,GACA,UAAW,CACP,IACA,OAKR,EAAe,SAAS,EAAW,CACnC,MAAO,CACH,EACA,GACA,GACA,GACA,UAAW,CACP,IACA,OAKR,GAAgB,SAAS,EAAW,CACpC,MAAO,CACH,EACA,EACA,EACA,UAAW,CACP,IACA,MAEJ,UAAW,CACP,KACA,MAEJ,GACA,UAAW,CACP,IACA,OAKR,EAAsB,SAAS,EAAO,CACtC,GAAI,GAAW,IAAU,EAAK,EAAY,EAC1C,MAAO,UAAS,EAAW,CACvB,MAAO,CACH,EACA,EACA,GACA,UAAW,CACP,IACA,IACA,MAEJ,UAAW,CACP,AAAI,GACA,IAEA,KACA,MAGR,UAAW,CACP,IACA,QAMZ,EAAsB,SAAS,EAAO,CACtC,GAAI,GAAW,IAAU,EAAK,EAAY,EAC1C,MAAO,UAAS,EAAW,CACvB,MAAO,CACH,EACA,EACA,EACA,UAAW,CACP,IACA,KAEJ,UAAW,CACP,IACA,QAMZ,GAAgB,SAAS,EAAW,CACpC,MAAO,CACH,EACA,GACA,GACA,UAAW,CACP,KACA,MAEJ,UAAW,CACP,IACA,IACA,MAEJ,UAAW,CACP,AAAG,GACC,IAEA,KACA,MAGR,UAAW,CACP,IACA,OAKR,GAAgB,SAAS,EAAW,CACpC,MAAO,CACH,EACA,GACA,UAAW,CACP,IACA,KAEJ,IAIJ,GAAgB,SAAS,EAAW,CACpC,MAAO,CACH,EACA,GACA,GACA,UAAW,CACP,IACA,KAEJ,IAIJ,GAAiB,SAAS,EAAW,CACrC,MAAO,CACH,EACA,EACA,EACA,UAAW,CACP,IACA,MAEJ,UAAW,CACP,KACA,MAEJ,UAAW,CACP,IACA,KAEJ,IAIJ,GAAuB,SAAS,EAAO,CACvC,GAAI,GAAW,IAAU,EAAK,EAAY,EAC1C,MAAO,UAAS,EAAW,CACvB,MAAO,CACH,EACA,EACA,GACA,UAAW,CACP,IACA,IACA,MAEJ,UAAW,CACP,IACA,KAEJ,KAKR,GAAuB,SAAS,EAAO,CACvC,GAAI,GAAW,IAAU,EAAK,EAAY,EAC1C,MAAO,UAAS,EAAW,CACvB,MAAO,CACH,EACA,EACA,EACA,UAAW,CACP,IACA,IACA,KAEJ,KAKR,GAAiB,SAAS,EAAW,CACrC,MAAO,CACH,EACA,GACA,GACA,UAAW,CACP,KACA,MAEJ,UAAW,CACP,IACA,IACA,MAEJ,UAAW,CACP,IACA,KAEJ,IAKJ,EAA0B,SAAS,EAAW,CAC9C,MAAO,CACH,EACA,GACA,GACA,EACA,UAAW,CACP,IACA,KAEJ,IAIJ,EAA0B,SAAS,EAAW,CAC9C,MAAO,CACH,EACA,GACA,GACA,GACA,EACA,UAAW,CACP,IACA,KAEJ,IAIJ,EAAiC,SAAS,EAAO,CACjD,GAAI,GAAW,IAAU,EAAK,EAAY,EAC1C,MAAO,UAAS,EAAW,CACvB,MAAO,CACH,EACA,EACA,EACA,UAAY,CACR,IACA,KAEJ,EACA,UAAY,CACR,IACA,KAEJ,KAKR,EAAiC,SAAS,EAAO,CACjD,GAAI,GAAW,IAAU,EAAK,EAAY,EAC1C,MAAO,UAAS,EAAW,CACvB,MAAO,CACH,EACA,EACA,GACA,UAAY,CACR,IACA,IACA,MAEJ,EACA,EACA,UAAY,CACR,IACA,KAEJ,KAKR,GAA2B,SAAS,EAAW,CAC/C,MAAO,CACH,EACA,EACA,EACA,UAAW,CACP,IACA,MAEJ,UAAW,CACP,KACA,MAEJ,GACA,EACA,UAAW,CACP,IACA,KAEJ,IAIJ,GAA2B,SAAS,EAAW,CAC/C,MAAO,CACH,EACA,GACA,GACA,UAAW,CACP,KACA,MAEJ,UAAW,CACP,IACA,IACA,MAEJ,EACA,EACA,UAAW,CACP,IACA,KAEJ,IAQJ,EAAe,GAAI,OAAM,KACzB,EAAe,GAAI,OAAM,KAE7B,EAAQ,GAAQ,MAAQ,EAAa,GAAQ,KAC7C,EAAQ,GAAQ,MAAQ,EAAa,GAAQ,GAAI,IACjD,EAAQ,GAAQ,OAAQ,EAAa,GAAQ,IAC7C,EAAQ,GAAQ,OAAQ,EAAa,GAAQ,GAAK,IAClD,EAAQ,GAAQ,OAAQ,EAAa,GAAQ,EAAK,GAClD,EAAQ,GAAQ,MAAQ,EAAa,GAAQ,GAAI,GACjD,EAAQ,GAAQ,MAAQ,EAAa,GAAQ,GAAI,GACjD,EAAQ,GAAQ,OAAQ,EAAa,GAAQ,GAAK,GAClD,EAAQ,GAAQ,MAAQ,EAAa,GAAQ,KAC7C,EAAQ,GAAQ,MAAQ,EAAa,GAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GAAI,GACrD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,IACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,IAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,IAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,EAAoB,IACtE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAA+B,IAChF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,GAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,EAAoB,IACtE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAA+B,IAChF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,IACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,IAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,IAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GAAI,GACrD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,IACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,IAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,IAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,EAAoB,IACtE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAA+B,IAChF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,GAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,EAAoB,IACtE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAA+B,IAChF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,IACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,IAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,IAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,GAClD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,GAAI,GACrD,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,IACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,IAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,IAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,EAAoB,IACtE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAA+B,IAChF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,GAClD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,EAAK,EAAoB,IACtE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAAoB,IACrE,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,EAA+B,IAChF,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,EAA+B,IACjF,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,KAC7C,EAAQ,IAAQ,MAAQ,EAAa,IAAQ,GAAI,IACjD,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,IAC7C,EAAQ,IAAQ,OAAQ,EAAa,IAAQ,GAAK,IAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAI,GACrD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,IAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAA+B,IAChF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAA+B,IAChF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAI,GACrD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,IAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAqB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAqB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAqB,IACtE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAAqB,IACvE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAqB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAAqB,IACvE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAAqB,IACvE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAqB,IACtE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAAqB,IACvE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAAqB,IACvE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAI,GACrD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,IAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAI,GACrD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,IAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAA+B,IAChF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAA+B,IAChF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,GACjD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,GAClD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,GAAI,GACrD,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,IACjD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,IAC7C,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,IAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAA+B,IAChF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,KAC7C,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,EAAoB,IACrE,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,GAClD,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IACjF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,EAAK,EAAoB,IACtE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,EAAI,EAAoB,IACrE,EAAQ,KAAQ,MAAQ,EAAa,KAAQ,GAAI,EAA+B,IAChF,EAAQ,KAAQ,OAAQ,EAAa,KAAQ,GAAK,EAA+B,IAKjF,aAAmB,CACf,MAAO,GAAQ,UAAW,CACtB,EAAK,EAAI,KACT,EAAK,GAAK,EAAK,IACf,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAK,EAAI,EAAK,IACd,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAK,EAAI,EAAK,IACd,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAK,EAAI,EAAK,IACd,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAK,EAAI,EAAK,IACd,EAAK,GACL,EAAK,KAIb,aAAmB,CACf,MAAO,GAAQ,UAAW,CACtB,EAAI,EAAI,EACR,KAAO,EACP,EAAK,GACL,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,IAK9B,aAAmB,CACf,MAAO,GAAQ,UAAW,CACtB,GAAI,GAAO,EAAI,IACf,EAAM,IAAK,EAAK,GAAK,IACrB,EAAK,GACL,EAAK,GACL,EAAK,KAIb,aAAmB,CACf,MAAO,GAAQ,UAAW,CACtB,GAAI,GAAO,EAAI,EACf,EAAK,IAAM,EAAM,GAAK,EACtB,EAAK,GACL,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,IAIZ,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAK,IAIb,aAAe,CACX,MAAO,GAAQ,UAAW,CACtB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAgB,CACZ,MAAO,CACH,EACA,UAAW,CACP,EAAc,gBAElB,UAAW,CACP,MAKZ,WAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,aAQtB,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,EAAG,CACH,GAAI,GAAU,EACV,EAAM,GAAI,IAAO,GAAU,IAAM,EACrC,AAAI,EAAK,GAAK,IAAM,GACpB,GAAI,GAAO,IAAK,GAAM,IAAW,GAAO,GAAK,GAAI,EAAE,IAAO,EAC1D,EAAM,EAAI,EAAU,EAAK,KACzB,EAAK,GACL,EAAO,GAAG,GAAM,CAAE,GAAI,GAAY,KAC9B,EAAK,KAAQ,IAAM,IACvB,EAAK,EAAK,KACV,EAAK,GAAM,EAAK,IAAO,QACpB,CACH,GAAI,GAAM,EAAI,EAAO,EACrB,EAAK,EAAM,KACX,EAAO,GAAI,GAAQ,GAAO,GAAQ,KAClC,EAAI,EAAM,IACV,EAAK,GACL,EAAK,MAKjB,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAK,EACL,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAM,EACV,EAAK,EAAI,GACT,EAAK,EAAM,IACX,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAI,EAAQ,IACvB,EAAK,GAAK,GACV,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAI,EAAQ,IACvB,EAAK,GAAK,GACV,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAI,EAAQ,IACvB,EAAK,GAAK,GACV,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAK,EACL,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAK,EACL,EAAK,GACL,EAAK,KAIb,WAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,EAAG,CACH,GAAI,GAAU,EACV,EAAM,GAAI,IAAO,GAAU,IAAO,GAAE,GACpC,EAAM,IAAK,GAAM,IAAW,GAAO,GAAK,EAAG,EAAE,GACjD,AAAI,EAAK,GAAK,IAAM,GAChB,EAAK,GAAK,IAAM,GACpB,GAAI,GAAM,EAAI,EAAW,GAAE,GAC3B,EAAK,CAAC,EAAM,KACZ,EAAO,GAAI,GAAY,GAAI,GAAQ,KACnC,EAAK,EAAM,KACX,EAAK,GACL,EAAM,IAAM,EAAM,EAAK,IAAO,QAE9B,GAAW,CAAC,EAAQ,IACpB,EAAM,EAAI,EAAU,EACpB,EAAK,EAAM,KACX,EAAO,GAAI,GAAQ,GAAU,GAAO,KACpC,EAAI,EAAM,IACV,EAAK,GACL,EAAK,KAKjB,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAK,EACL,EAAK,GACL,EAAI,EAAK,EAAI,IAAS,EAAI,IAIlC,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,SAKtB,YAAc,EAAY,CAEtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EAAI,EACV,EAAO,EAAI,IAAO,EACtB,EAAO,IAAQ,EAAK,EACpB,EAAI,EACJ,EAAK,GACL,EAAK,GACL,GAAI,GAAO,EAAI,GACf,AAAI,GAAQ,GAAU,GAAI,EAAG,EAAI,GAC5B,AAAI,GAAQ,EAAS,GAAI,EAAG,EAAI,GAChC,AAAI,GAAQ,GAAS,GAAI,EAAG,EAAI,GAC5B,GAAQ,IAAS,GAAI,EAAG,EAAI,KAI7C,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EAAI,EACd,EAAK,EAAM,EACX,EAAM,IAAQ,EACd,EAAI,EACJ,EAAK,GACL,EAAI,IAIZ,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EAAK,EACf,EAAI,EACJ,EAAI,EACJ,EAAK,EACL,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EACV,EAAI,EACJ,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CAGzB,EAAc,OACd,GAAI,GAAM,EAAkB,EAC5B,EAAI,EACJ,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EAAI,EACV,EAAM,EACN,EAAQ,EAAM,EAAO,IACzB,EAAI,EACJ,EAAK,GAAO,GACZ,EAAK,GACL,EAAK,KAOb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAO,IAIf,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAO,IAIf,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAO,IAIf,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CAEzB,EAAc,OACd,EAAO,EAAI,IAInB,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,EAAO,EAAI,EAAM,KAAO,GAAK,EAAK,MAK1C,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EAAI,EACd,EAAK,EACL,EAAO,EAAQ,KAAO,GAAK,EAAK,MAKxC,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,EAAO,EAAM,KAAO,GAAK,EAAK,MAKtC,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,EAAO,EAAM,KAAO,GAAK,EAAK,MAQtC,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAK,EAAO,KACZ,GAAI,GAAO,GAAQ,EAAK,IACxB,EAAO,EACP,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAO,EAAK,IACvB,EAAO,EACP,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAO,EAAK,IACvB,EAAO,EACP,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,EAAI,EAAO,EACX,KAAU,EACV,EAAK,GACL,EAAI,IAIZ,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAO,IACd,EAAQ,IAAQ,EAAK,GAAK,IAC9B,EAAO,EACP,EAAK,GACL,EAAK,GACL,EAAK,KAIb,YAAa,EAAY,CACrB,MAAO,GAAW,UAAW,CACzB,GAAI,GAAO,EAAO,EACd,EAAO,IAAS,EAAM,GAAK,EAC/B,EAAO,EACP,EAAK,GACL,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAO,EAAO,EAAK,IACvB,EAAO,EACP,EAAM,EAAI,EACV,EAAK,GAAO,GACZ,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CAGzB,GAFA,EAAc,OACd,EAAQ,EAAO,EAAK,IAChB,EAAG,CACH,GAAI,GAAU,EACV,EAAM,GAAI,IAAO,GAAU,IAAO,GAAE,GACpC,EAAM,IAAK,GAAM,IAAW,GAAO,GAAK,EAAG,EAAE,GACjD,AAAI,EAAK,GAAK,IAAM,GAChB,EAAK,GAAK,IAAM,GACpB,GAAI,GAAM,EAAI,EAAW,GAAE,GAC3B,EAAK,CAAC,EAAM,KACZ,EAAO,GAAI,GAAY,GAAI,GAAQ,KACnC,EAAK,EAAM,KACX,EAAK,GACL,EAAM,IAAM,EAAM,EAAK,IAAO,QAE9B,GAAW,CAAC,EAAQ,IACpB,EAAM,EAAI,EAAU,EACpB,EAAK,EAAM,KACX,EAAO,GAAI,GAAQ,GAAU,GAAO,KACpC,EAAI,EAAM,IACV,EAAK,GACL,EAAK,KAKjB,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EACN,EAAO,EACX,EAAK,EAAM,KACX,EAAQ,IAAO,EAAK,GAAQ,IAC5B,EAAO,EACP,GAAK,EACL,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EACN,EAAO,EAAI,IAAO,EAKtB,GAJA,EAAK,EAAM,GACX,EAAO,IAAQ,EAAK,EACpB,EAAO,EAEH,EAAG,CACH,GAAI,GAAU,EACV,EAAM,GAAI,IAAO,GAAU,IAAM,EACrC,AAAI,EAAK,GAAK,IAAM,GACpB,GAAI,IAAO,IAAK,GAAM,IAAW,GAAO,GAAK,GAAI,EAAE,IAAO,EAC1D,EAAM,EAAI,EAAU,EAAK,KACzB,EAAK,IACL,EAAO,GAAG,IAAM,CAAE,GAAI,GAAY,KAC9B,GAAK,KAAQ,KAAM,IACvB,EAAK,GAAK,KACV,EAAK,IAAM,EAAK,IAAO,QACpB,CACH,GAAI,IAAM,EAAI,EAAO,EACrB,EAAK,GAAM,KACX,EAAO,GAAI,IAAQ,GAAO,IAAQ,KAClC,EAAI,GAAM,IACV,EAAK,GACL,EAAK,MAKjB,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EACV,EAAK,EAAM,KACX,EAAO,GAAO,EAAK,IACnB,EAAO,EACP,EAAM,EAAI,EACV,EAAI,EACJ,EAAK,GACL,EAAK,KAIb,YAAc,EAAY,CACtB,MAAO,GAAW,UAAW,CACzB,EAAc,OACd,GAAI,GAAM,EACV,EAAK,EAAM,GACX,EAAM,IAAQ,EACd,EAAO,EACP,EAAO,GAAI,GAAO,IAClB,EAAI,EACJ,EAAK,GACL,EAAK,KAOb,aAAe,CACX,MAAO,CACH,EACA,EACA,UAAW,CAAE,EAAY,IACzB,GAIR,aAAe,CACX,MAAO,CACH,EACA,EACA,UAAW,CAAE,EAAY,OACzB,GAIR,aAAe,CACX,MAAO,CACH,EACA,EACA,GACA,UAAW,CACP,EAAI,KACJ,EAAK,GACL,EAAK,IAET,GAIR,aAAe,CACX,MAAO,CACH,EACA,EACA,GACA,UAAW,CAAE,GAAc,OAC3B,GAIR,aAAe,CACX,MAAO,CACH,EACA,GACA,GACA,UAAW,CAAE,EAAa,IAAO,EAAM,MACvC,UAAW,CAAE,EAAY,EAAK,MAC9B,GACA,UAAW,CAAE,EAAK,EAAI,MAI9B,aAAe,CACX,MAAO,CACH,EACA,GACA,UAAW,CACP,AAAI,EAAK,OAAO,EAAK,WAAW,OAAS,GACzC,EAAa,IAAO,EAAK,MAE7B,UAAW,CAAE,EAAY,EAAK,MAC9B,UAAW,CAAE,EAAY,OACzB,UAAW,CAAE,EAAK,EAAI,KAAK,KAC3B,UAAW,CAAE,GAAM,EAAI,KAAK,GAAa,IAAM,GAC/C,UAAW,CAAE,EAAK,EAAI,EAAI,EAAG,MAIrC,aAAe,CACX,MAAO,CACH,EACA,GACA,UAAW,CACP,AAAI,EAAK,OAAO,EAAK,WAAW,OAAS,GACzC,EAAa,IAAO,EAAK,MAE7B,UAAW,CAAE,EAAY,EAAK,MAC9B,UAAW,CAAE,EAAY,OACzB,UAAW,CAAE,EAAK,EAAI,KAAK,KAC3B,UAAW,CAAE,GAAM,EAAI,KAAK,GAAa,IAAM,GAC/C,UAAW,CAAE,EAAK,EAAI,MAI9B,aAAe,CACX,MAAO,CACH,EACA,GACA,UAAW,CACP,AAAI,EAAK,OAAO,EAAK,WAAW,OAAS,GACzC,EAAa,IAAO,EAAK,MAE7B,UAAW,CAAE,EAAY,EAAK,MAC9B,UAAW,CAAE,EAAY,OACzB,UAAW,CAAE,EAAK,EAAI,KAAK,KAC3B,UAAW,CAAE,GAAM,EAAI,KAAK,GAAa,IAAM,GAC/C,UAAW,CAAE,EAAK,EAAI,MAI9B,aAAe,CACX,MAAO,CACH,EACA,EACA,GACA,UAAW,CAAE,GAAc,OAC3B,UAAW,CAAE,EAAK,MAClB,UAAW,CAAE,GAAM,MAAkB,GACrC,UAAW,CAAE,EAAK,EAAI,MAI9B,aAAe,CACX,MAAO,CACH,EACA,EACA,GACA,UAAW,CAAE,EAAK,MAClB,UAAW,CAAE,GAAM,MAAkB,GACrC,UAAW,CAAE,EAAK,EAAI,MACtB,GAIR,aAAmB,CACf,MAAO,CACH,EACA,GACA,GACA,UAAW,CAAE,EAAK,EAAI,MAI9B,aAAmB,CACf,MAAO,CACH,EACA,GACA,GACA,GACA,UAAW,CACP,KACA,MAEJ,UAAW,CAAE,EAAK,EAAI,MAI9B,YAAa,EAAK,EAAM,CACpB,GAAI,GACJ,MAAS,KAAQ,GAAI,EAAc,UAAW,CAAE,MAAO,MAAM,GACxD,AAAI,IAAQ,GAAI,EAAc,UAAW,CAAE,MAAO,KAAM,GACxD,AAAI,IAAQ,GAAI,EAAc,UAAW,CAAE,MAAO,KAAM,GACxC,EAAc,UAAW,CAAE,MAAO,KAAM,GACtD,CACH,EACA,GACA,UAAW,CACP,AAAI,IACA,KACA,MAEA,KAGR,UAAW,CACP,AAAG,GACC,KACA,MAEA,KAGR,GAOR,KAAK,UAAY,UAAwB,CACrC,MAAO,CACH,GAAK,EAAG,EAAK,MACb,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EACtB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,EAAG,EACjC,EAAG,EAAG,EAAG,GAAQ,EAAG,GAAI,EAAE,EAC1B,EAAG,EAAM,GAAI,EAAI,GAAI,EAAI,GAAI,GAAW,EAAE,EAAG,GAAI,EACjD,GAAI,GAAc,IAAK,KAI/B,KAAK,UAAY,SAAS,EAAoB,CAC1C,EAAM,EAAM,GAAG,EAAK,MACpB,EAAI,EAAM,EAAG,EAAI,EAAM,EAAG,EAAI,EAAM,EAAG,EAAK,EAAM,GAClD,EAAI,EAAM,EAAG,EAAI,EAAM,EAAG,EAAI,EAAM,EAAG,EAAI,EAAM,EAAG,GAAI,EAAM,EAAG,EAAI,EAAM,EAC3E,EAAI,EAAM,EAAG,GAAS,EAAM,EAAG,GAAM,CAAC,CAAC,EAAM,EAC7C,EAAO,EAAM,EAAG,EAAK,EAAM,GAAI,EAAK,EAAM,GAAI,GAAa,CAAC,CAAC,EAAM,GAAI,EAAK,EAAM,GAClF,GAAe,EAAM,GAAI,GAA0B,EAAM,IACzD,GAAc,GAAS,EAAI,CAAE,GAAoC,EAAa,KAMlF,KAAK,SAAW,UAAW,CACvB,MAAO,YACO,EAAG,SAAS,IAAM,SAAW,GAAO,WAAa,QAAU,EAAI,WAAa,EAAO;AAAA,MACpF,EAAE,SAAS,IAAM,QAAU,EAAE,SAAS,IAAM,QAAU,EAAE,SAAS,IAAM,SAAW,EAAG,SAAS,IAAM,SACvG,EAAI,MAAa,EAAI,MAAa,EAAI,MAAa,EAAI,MAAa,GAAI,MAAa,EAAI,MAGvG,KAAK,WAAa,SAAS,EAAK,CAE5B,GAAI,KAAK,MACL,GAAI,GAAO,oBAAuB,GAAM,IAAM,EAAM,IAAM,IAAM;AAAA;AAAA,EAAS,KAAK,YAKtF,GAAI,IAAY,CACdc,CAChc,CACha,CACfkBAAoB,SAAS,EAAQ,EAAS,CAGjD,MAAO,CACL,OAAO,EACP,SAAS,EAAQ,GACjB,UAAU,GAAU,GACpB,UAAU,GAAU,GAAU,GAAY,GAC1C,WAAW,GAAY,KAK3B,KAAK,OAAS,UAAW,CACvB,GAAc,KACd,EAAI,EACJ,EAAM,EAAG,EAAK,OAEhB,KAAK,OAAS,UAAW,CACvB,GAAc,KACd,EAAI,EACJ,EAAM,EAAG,EAAK,OAGhB,KAAK,MAAQ,UAAW,CAAE,MAAO,IACjC,KAAK,MAAQ,UAAW,CAAE,MAAQ,GAAG,EAAK,OAC1C,KAAK,KAAO,UAAW,CAAE,MAAO,IAEhC,KAAK,WAAa,UAAW,CAC3B,MAAO,IAAK,IA4BN,GAAL,UAAK,EAAL,CAAyB,SAAK,GAAL,OAAQ,QAAI,GAAJ,MAAO,QAAI,GAAJ,QAAnC,aAEL,YAAqG,CAArG,aAz4DP,CA24DE,SAAM,GAAI,IACV,mBAAoC,EAEpC,iBAAiB,EAAS,CACxB,KAAK,IAAI,WAAW,GAEtB,cAAe,CACb,GAAI,KAAK,eAAiB,KAAK,WAAY,CACzC,OAAQ,KAAK,mBACN,GAAuB,KAAK,IAAI,SAAU,UAC1C,GAAuB,KAAK,IAAI,SAAU,MAEjD,KAAK,cAAgB,EAEvB,KAAK,IAAI,aAEX,aAAc,CACZ,EACE,MAAK,qBACE,CAAC,KAAK,YAEjB,OAAQ,CACN,KAAK,IAAI,QACT,KAAK,cAAgB,EAEvB,UAAU,EAAc,CACtB,KAAK,cAAgB,EAEvB,KAAM,CACJ,KAAK,UAAU,GAEjB,KAAM,CACJ,KAAK,UAAU,GAEjB,OAAQ,CACN,MAAO,MAAK,IAAI,QAElB,OAAQ,CACN,MAAO,MAAK,IAAI,QAElB,WAAY,CACV,GAAI,GAAI,KAAK,IAAI,YACjB,SAAE,GAAK,KAAK,cACL,EAET,UAAU,EAAG,CACX,KAAK,IAAI,UAAU,GACnB,KAAK,cAAgB,EAAE,GAEzB,UAAqB,CACnB,MAAO,MAAK,IAAI",
  "names": []
}
